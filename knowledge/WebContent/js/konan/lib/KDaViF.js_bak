!function(){function n(n){return n&&(n.ownerDocument||n.document||n).documentElement}function t(n){return n&&(n.ownerDocument&&n.ownerDocument.defaultView||n.document&&n||n.defaultView)}function e(n,t){return t>n?-1:n>t?1:n>=t?0:NaN}function r(n){return null===n?NaN:+n}function u(n){return!isNaN(n)}function i(n){return{left:function(t,e,r,u){for(arguments.length<3&&(r=0),arguments.length<4&&(u=t.length);u>r;){var i=r+u>>>1;n(t[i],e)<0?r=i+1:u=i}return r},right:function(t,e,r,u){for(arguments.length<3&&(r=0),arguments.length<4&&(u=t.length);u>r;){var i=r+u>>>1;n(t[i],e)>0?u=i:r=i+1}return r}}}function a(n){return n.length}function o(n){for(var t=1;n*t%1;)t*=10;return t}function l(n,t){for(var e in t)Object.defineProperty(n.prototype,e,{value:t[e],enumerable:!1})}function c(){this._=Object.create(null)}function s(n){return(n+="")===xa||n[0]===ba?ba+n:n}function f(n){return(n+="")[0]===ba?n.slice(1):n}function h(n){return s(n)in this._}function g(n){return(n=s(n))in this._&&delete this._[n]}function p(){var n=[];for(var t in this._)n.push(f(t));return n}function v(){var n=0;for(var t in this._)++n;return n}function d(){for(var n in this._)return!1;return!0}function m(){this._=Object.create(null)}function y(n){return n}function M(n,t,e){return function(){var r=e.apply(t,arguments);return r===t?n:r}}function x(n,t){if(t in n)return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e=0,r=_a.length;r>e;++e){var u=_a[e]+t;if(u in n)return u}}function b(){}function _(){}function w(n){function t(){for(var t,r=e,u=-1,i=r.length;++u<i;)(t=r[u].on)&&t.apply(this,arguments);return n}var e=[],r=new c;return t.on=function(t,u){var i,a=r.get(t);return arguments.length<2?a&&a.on:(a&&(a.on=null,e=e.slice(0,i=e.indexOf(a)).concat(e.slice(i+1)),r.remove(t)),u&&e.push(r.set(t,{on:u})),n)},t}function S(){oa.event.preventDefault()}function k(){for(var n,t=oa.event;n=t.sourceEvent;)t=n;return t}function N(n){for(var t=new _,e=0,r=arguments.length;++e<r;)t[arguments[e]]=w(t);return t.of=function(e,r){return function(u){try{var i=u.sourceEvent=oa.event;u.target=n,oa.event=u,t[u.type].apply(e,r)}finally{oa.event=i}}},t}function E(n){return Sa(n,Aa),n}function A(n){return"function"==typeof n?n:function(){return ka(n,this)}}function C(n){return"function"==typeof n?n:function(){return Na(n,this)}}function z(n,t){function e(){this.removeAttribute(n)}function r(){this.removeAttributeNS(n.space,n.local)}function u(){this.setAttribute(n,t)}function i(){this.setAttributeNS(n.space,n.local,t)}function a(){var e=t.apply(this,arguments);null==e?this.removeAttribute(n):this.setAttribute(n,e)}function o(){var e=t.apply(this,arguments);null==e?this.removeAttributeNS(n.space,n.local):this.setAttributeNS(n.space,n.local,e)}return n=oa.ns.qualify(n),null==t?n.local?r:e:"function"==typeof t?n.local?o:a:n.local?i:u}function L(n){return n.trim().replace(/\s+/g," ")}function q(n){return new RegExp("(?:^|\\s+)"+oa.requote(n)+"(?:\\s+|$)","g")}function T(n){return(n+"").trim().split(/^|\s+/)}function R(n,t){function e(){for(var e=-1;++e<u;)n[e](this,t)}function r(){for(var e=-1,r=t.apply(this,arguments);++e<u;)n[e](this,r)}n=T(n).map(D);var u=n.length;return"function"==typeof t?r:e}function D(n){var t=q(n);return function(e,r){if(u=e.classList)return r?u.add(n):u.remove(n);var u=e.getAttribute("class")||"";r?(t.lastIndex=0,t.test(u)||e.setAttribute("class",L(u+" "+n))):e.setAttribute("class",L(u.replace(t," ")))}}function P(n,t,e){function r(){this.style.removeProperty(n)}function u(){this.style.setProperty(n,t,e)}function i(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(n):this.style.setProperty(n,r,e)}return null==t?r:"function"==typeof t?i:u}function j(n,t){function e(){delete this[n]}function r(){this[n]=t}function u(){var e=t.apply(this,arguments);null==e?delete this[n]:this[n]=e}return null==t?e:"function"==typeof t?u:r}function U(n){function t(){var t=this.ownerDocument,e=this.namespaceURI;return e?t.createElementNS(e,n):t.createElement(n)}function e(){return this.ownerDocument.createElementNS(n.space,n.local)}return"function"==typeof n?n:(n=oa.ns.qualify(n)).local?e:t}function F(){var n=this.parentNode;n&&n.removeChild(this)}function H(n){return{__data__:n}}function O(n){return function(){return Ea(this,n)}}function I(n){return arguments.length||(n=e),function(t,e){return t&&e?n(t.__data__,e.__data__):!t-!e}}function Y(n,t){for(var e=0,r=n.length;r>e;e++)for(var u,i=n[e],a=0,o=i.length;o>a;a++)(u=i[a])&&t(u,a,e);return n}function Z(n){return Sa(n,za),n}function V(n){var t,e;return function(r,u,i){var a,o=n[i].update,l=o.length;for(i!=e&&(e=i,t=0),u>=t&&(t=u+1);!(a=o[t])&&++t<l;);return a}}function X(n,t,e){function r(){var t=this[a];t&&(this.removeEventListener(n,t,t.$),delete this[a])}function u(){var u=l(t,ca(arguments));r.call(this),this.addEventListener(n,this[a]=u,u.$=e),u._=t}function i(){var t,e=new RegExp("^__on([^.]+)"+oa.requote(n)+"$");for(var r in this)if(t=r.match(e)){var u=this[r];this.removeEventListener(t[1],u,u.$),delete this[r]}}var a="__on"+n,o=n.indexOf("."),l=$;o>0&&(n=n.slice(0,o));var c=La.get(n);return c&&(n=c,l=B),o?t?u:r:t?b:i}function $(n,t){return function(e){var r=oa.event;oa.event=e,t[0]=this.__data__;try{n.apply(this,t)}finally{oa.event=r}}}function B(n,t){var e=$(n,t);return function(n){var t=this,r=n.relatedTarget;r&&(r===t||8&r.compareDocumentPosition(t))||e.call(t,n)}}function W(e){var r=".dragsuppress-"+ ++Ta,u="click"+r,i=oa.select(t(e)).on("touchmove"+r,S).on("dragstart"+r,S).on("selectstart"+r,S);if(null==qa&&(qa="onselectstart"in e?!1:x(e.style,"userSelect")),qa){var a=n(e).style,o=a[qa];a[qa]="none"}return function(n){if(i.on(r,null),qa&&(a[qa]=o),n){var t=function(){i.on(u,null)};i.on(u,function(){S(),t()},!0),setTimeout(t,0)}}}function J(n,e){e.changedTouches&&(e=e.changedTouches[0]);var r=n.ownerSVGElement||n;if(r.createSVGPoint){var u=r.createSVGPoint();if(0>Ra){var i=t(n);if(i.scrollX||i.scrollY){r=oa.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var a=r[0][0].getScreenCTM();Ra=!(a.f||a.e),r.remove()}}return Ra?(u.x=e.pageX,u.y=e.pageY):(u.x=e.clientX,u.y=e.clientY),u=u.matrixTransform(n.getScreenCTM().inverse()),[u.x,u.y]}var o=n.getBoundingClientRect();return[e.clientX-o.left-n.clientLeft,e.clientY-o.top-n.clientTop]}function G(){return oa.event.changedTouches[0].identifier}function K(n){return n>0?1:0>n?-1:0}function Q(n,t,e){return(t[0]-n[0])*(e[1]-n[1])-(t[1]-n[1])*(e[0]-n[0])}function nn(n){return n>1?0:-1>n?ja:Math.acos(n)}function tn(n){return n>1?Ha:-1>n?-Ha:Math.asin(n)}function en(n){return((n=Math.exp(n))-1/n)/2}function rn(n){return((n=Math.exp(n))+1/n)/2}function un(n){return((n=Math.exp(2*n))-1)/(n+1)}function an(n){return(n=Math.sin(n/2))*n}function on(){}function ln(n,t,e){return this instanceof ln?(this.h=+n,this.s=+t,void(this.l=+e)):arguments.length<2?n instanceof ln?new ln(n.h,n.s,n.l):_n(""+n,wn,ln):new ln(n,t,e)}function cn(n,t,e){function r(n){return n>360?n-=360:0>n&&(n+=360),60>n?i+(a-i)*n/60:180>n?a:240>n?i+(a-i)*(240-n)/60:i}function u(n){return Math.round(255*r(n))}var i,a;return n=isNaN(n)?0:(n%=360)<0?n+360:n,t=isNaN(t)?0:0>t?0:t>1?1:t,e=0>e?0:e>1?1:e,a=.5>=e?e*(1+t):e+t-e*t,i=2*e-a,new yn(u(n+120),u(n),u(n-120))}function sn(n,t,e){return this instanceof sn?(this.h=+n,this.c=+t,void(this.l=+e)):arguments.length<2?n instanceof sn?new sn(n.h,n.c,n.l):n instanceof hn?pn(n.l,n.a,n.b):pn((n=Sn((n=oa.rgb(n)).r,n.g,n.b)).l,n.a,n.b):new sn(n,t,e)}function fn(n,t,e){return isNaN(n)&&(n=0),isNaN(t)&&(t=0),new hn(e,Math.cos(n*=Oa)*t,Math.sin(n)*t)}function hn(n,t,e){return this instanceof hn?(this.l=+n,this.a=+t,void(this.b=+e)):arguments.length<2?n instanceof hn?new hn(n.l,n.a,n.b):n instanceof sn?fn(n.h,n.c,n.l):Sn((n=yn(n)).r,n.g,n.b):new hn(n,t,e)}function gn(n,t,e){var r=(n+16)/116,u=r+t/500,i=r-e/200;return u=vn(u)*Ka,r=vn(r)*Qa,i=vn(i)*no,new yn(mn(3.2404542*u-1.5371385*r-.4985314*i),mn(-.969266*u+1.8760108*r+.041556*i),mn(.0556434*u-.2040259*r+1.0572252*i))}function pn(n,t,e){return n>0?new sn(Math.atan2(e,t)*Ia,Math.sqrt(t*t+e*e),n):new sn(NaN,NaN,n)}function vn(n){return n>.206893034?n*n*n:(n-4/29)/7.787037}function dn(n){return n>.008856?Math.pow(n,1/3):7.787037*n+4/29}function mn(n){return Math.round(255*(.00304>=n?12.92*n:1.055*Math.pow(n,1/2.4)-.055))}function yn(n,t,e){return this instanceof yn?(this.r=~~n,this.g=~~t,void(this.b=~~e)):arguments.length<2?n instanceof yn?new yn(n.r,n.g,n.b):_n(""+n,yn,cn):new yn(n,t,e)}function Mn(n){return new yn(n>>16,n>>8&255,255&n)}function xn(n){return Mn(n)+""}function bn(n){return 16>n?"0"+Math.max(0,n).toString(16):Math.min(255,n).toString(16)}function _n(n,t,e){var r,u,i,a=0,o=0,l=0;if(r=/([a-z]+)\((.*)\)/.exec(n=n.toLowerCase()))switch(u=r[2].split(","),r[1]){case"hsl":return e(parseFloat(u[0]),parseFloat(u[1])/100,parseFloat(u[2])/100);case"rgb":return t(Nn(u[0]),Nn(u[1]),Nn(u[2]))}return(i=ro.get(n))?t(i.r,i.g,i.b):(null==n||"#"!==n.charAt(0)||isNaN(i=parseInt(n.slice(1),16))||(4===n.length?(a=(3840&i)>>4,a=a>>4|a,o=240&i,o=o>>4|o,l=15&i,l=l<<4|l):7===n.length&&(a=(16711680&i)>>16,o=(65280&i)>>8,l=255&i)),t(a,o,l))}function wn(n,t,e){var r,u,i=Math.min(n/=255,t/=255,e/=255),a=Math.max(n,t,e),o=a-i,l=(a+i)/2;return o?(u=.5>l?o/(a+i):o/(2-a-i),r=n==a?(t-e)/o+(e>t?6:0):t==a?(e-n)/o+2:(n-t)/o+4,r*=60):(r=NaN,u=l>0&&1>l?0:r),new ln(r,u,l)}function Sn(n,t,e){n=kn(n),t=kn(t),e=kn(e);var r=dn((.4124564*n+.3575761*t+.1804375*e)/Ka),u=dn((.2126729*n+.7151522*t+.072175*e)/Qa),i=dn((.0193339*n+.119192*t+.9503041*e)/no);return hn(116*u-16,500*(r-u),200*(u-i))}function kn(n){return(n/=255)<=.04045?n/12.92:Math.pow((n+.055)/1.055,2.4)}function Nn(n){var t=parseFloat(n);return"%"===n.charAt(n.length-1)?Math.round(2.55*t):t}function En(n){return"function"==typeof n?n:function(){return n}}function An(n){return function(t,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=null),Cn(t,e,n,r)}}function Cn(n,t,e,r){function u(){var n,t=l.status;if(!t&&Ln(l)||t>=200&&300>t||304===t){try{n=e.call(i,l)}catch(r){return void a.error.call(i,r)}a.load.call(i,n)}else a.error.call(i,l)}var i={},a=oa.dispatch("beforesend","progress","load","error"),o={},l=new XMLHttpRequest,c=null;return!this.XDomainRequest||"withCredentials"in l||!/^(http(s)?:)?\/\//.test(n)||(l=new XDomainRequest),"onload"in l?l.onload=l.onerror=u:l.onreadystatechange=function(){l.readyState>3&&u()},l.onprogress=function(n){var t=oa.event;oa.event=n;try{a.progress.call(i,l)}finally{oa.event=t}},i.header=function(n,t){return n=(n+"").toLowerCase(),arguments.length<2?o[n]:(null==t?delete o[n]:o[n]=t+"",i)},i.mimeType=function(n){return arguments.length?(t=null==n?null:n+"",i):t},i.responseType=function(n){return arguments.length?(c=n,i):c},i.response=function(n){return e=n,i},["get","post"].forEach(function(n){i[n]=function(){return i.send.apply(i,[n].concat(ca(arguments)))}}),i.send=function(e,r,u){if(2===arguments.length&&"function"==typeof r&&(u=r,r=null),l.open(e,n,!0),null==t||"accept"in o||(o.accept=t+",*/*"),l.setRequestHeader)for(var s in o)l.setRequestHeader(s,o[s]);return null!=t&&l.overrideMimeType&&l.overrideMimeType(t),null!=c&&(l.responseType=c),null!=u&&i.on("error",u).on("load",function(n){u(null,n)}),a.beforesend.call(i,l),l.send(null==r?null:r),i},i.abort=function(){return l.abort(),i},oa.rebind(i,a,"on"),null==r?i:i.get(zn(r))}function zn(n){return 1===n.length?function(t,e){n(null==t?e:null)}:n}function Ln(n){var t=n.responseType;return t&&"text"!==t?n.response:n.responseText}function qn(n,t,e){var r=arguments.length;2>r&&(t=0),3>r&&(e=Date.now());var u=e+t,i={c:n,t:u,n:null};return io?io.n=i:uo=i,io=i,ao||(oo=clearTimeout(oo),ao=1,lo(Tn)),i}function Tn(){var n=Rn(),t=Dn()-n;t>24?(isFinite(t)&&(clearTimeout(oo),oo=setTimeout(Tn,t)),ao=0):(ao=1,lo(Tn))}function Rn(){for(var n=Date.now(),t=uo;t;)n>=t.t&&t.c(n-t.t)&&(t.c=null),t=t.n;return n}function Dn(){for(var n,t=uo,e=1/0;t;)t.c?(t.t<e&&(e=t.t),t=(n=t).n):t=n?n.n=t.n:uo=t.n;return io=n,e}function Pn(n,t){return t-(n?Math.ceil(Math.log(n)/Math.LN10):1)}function jn(n,t){var e=Math.pow(10,3*Ma(8-t));return{scale:t>8?function(n){return n/e}:function(n){return n*e},symbol:n}}function Un(n){var t=n.decimal,e=n.thousands,r=n.grouping,u=n.currency,i=r&&e?function(n,t){for(var u=n.length,i=[],a=0,o=r[0],l=0;u>0&&o>0&&(l+o+1>t&&(o=Math.max(1,t-l)),i.push(n.substring(u-=o,u+o)),!((l+=o+1)>t));)o=r[a=(a+1)%r.length];return i.reverse().join(e)}:y;return function(n){var e=so.exec(n),r=e[1]||" ",a=e[2]||">",o=e[3]||"-",l=e[4]||"",c=e[5],s=+e[6],f=e[7],h=e[8],g=e[9],p=1,v="",d="",m=!1,y=!0;switch(h&&(h=+h.substring(1)),(c||"0"===r&&"="===a)&&(c=r="0",a="="),g){case"n":f=!0,g="g";break;case"%":p=100,d="%",g="f";break;case"p":p=100,d="%",g="r";break;case"b":case"o":case"x":case"X":"#"===l&&(v="0"+g.toLowerCase());case"c":y=!1;case"d":m=!0,h=0;break;case"s":p=-1,g="r"}"$"===l&&(v=u[0],d=u[1]),"r"!=g||h||(g="g"),null!=h&&("g"==g?h=Math.max(1,Math.min(21,h)):("e"==g||"f"==g)&&(h=Math.max(0,Math.min(20,h)))),g=fo.get(g)||Fn;var M=c&&f;return function(n){var e=d;if(m&&n%1)return"";var u=0>n||0===n&&0>1/n?(n=-n,"-"):"-"===o?"":o;if(0>p){var l=oa.formatPrefix(n,h);n=l.scale(n),e=l.symbol+d}else n*=p;n=g(n,h);var x,b,_=n.lastIndexOf(".");if(0>_){var w=y?n.lastIndexOf("e"):-1;0>w?(x=n,b=""):(x=n.substring(0,w),b=n.substring(w))}else x=n.substring(0,_),b=t+n.substring(_+1);!c&&f&&(x=i(x,1/0));var S=v.length+x.length+b.length+(M?0:u.length),k=s>S?new Array(S=s-S+1).join(r):"";return M&&(x=i(k+x,k.length?s-b.length:1/0)),u+=v,n=x+b,("<"===a?u+n+k:">"===a?k+u+n:"^"===a?k.substring(0,S>>=1)+u+n+k.substring(S):u+(M?n:k+n))+e}}}function Fn(n){return n+""}function Hn(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function On(n,t,e){function r(t){var e=n(t),r=i(e,1);return r-t>t-e?e:r}function u(e){return t(e=n(new go(e-1)),1),e}function i(n,e){return t(n=new go(+n),e),n}function a(n,r,i){var a=u(n),o=[];if(i>1)for(;r>a;)e(a)%i||o.push(new Date(+a)),t(a,1);else for(;r>a;)o.push(new Date(+a)),t(a,1);return o}function o(n,t,e){try{go=Hn;var r=new Hn;return r._=n,a(r,t,e)}finally{go=Date}}n.floor=n,n.round=r,n.ceil=u,n.offset=i,n.range=a;var l=n.utc=In(n);return l.floor=l,l.round=In(r),l.ceil=In(u),l.offset=In(i),l.range=o,n}function In(n){return function(t,e){try{go=Hn;var r=new Hn;return r._=t,n(r,e)._}finally{go=Date}}}function Yn(n){function t(n){function t(t){for(var e,u,i,a=[],o=-1,l=0;++o<r;)37===n.charCodeAt(o)&&(a.push(n.slice(l,o)),null!=(u=vo[e=n.charAt(++o)])&&(e=n.charAt(++o)),(i=A[e])&&(e=i(t,null==u?"e"===e?" ":"0":u)),a.push(e),l=o+1);return a.push(n.slice(l,o)),a.join("")}var r=n.length;return t.parse=function(t){var r={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null},u=e(r,n,t,0);if(u!=t.length)return null;"p"in r&&(r.H=r.H%12+12*r.p);var i=null!=r.Z&&go!==Hn,a=new(i?Hn:go);return"j"in r?a.setFullYear(r.y,0,r.j):"W"in r||"U"in r?("w"in r||(r.w="W"in r?1:0),a.setFullYear(r.y,0,1),a.setFullYear(r.y,0,"W"in r?(r.w+6)%7+7*r.W-(a.getDay()+5)%7:r.w+7*r.U-(a.getDay()+6)%7)):a.setFullYear(r.y,r.m,r.d),a.setHours(r.H+(r.Z/100|0),r.M+r.Z%100,r.S,r.L),i?a._:a},t.toString=function(){return n},t}function e(n,t,e,r){for(var u,i,a,o=0,l=t.length,c=e.length;l>o;){if(r>=c)return-1;if(u=t.charCodeAt(o++),37===u){if(a=t.charAt(o++),i=C[a in vo?t.charAt(o++):a],!i||(r=i(n,e,r))<0)return-1}else if(u!=e.charCodeAt(r++))return-1}return r}function r(n,t,e){_.lastIndex=0;var r=_.exec(t.slice(e));return r?(n.w=w.get(r[0].toLowerCase()),e+r[0].length):-1}function u(n,t,e){x.lastIndex=0;var r=x.exec(t.slice(e));return r?(n.w=b.get(r[0].toLowerCase()),e+r[0].length):-1}function i(n,t,e){N.lastIndex=0;var r=N.exec(t.slice(e));return r?(n.m=E.get(r[0].toLowerCase()),e+r[0].length):-1}function a(n,t,e){S.lastIndex=0;var r=S.exec(t.slice(e));return r?(n.m=k.get(r[0].toLowerCase()),e+r[0].length):-1}function o(n,t,r){return e(n,A.c.toString(),t,r)}function l(n,t,r){return e(n,A.x.toString(),t,r)}function c(n,t,r){return e(n,A.X.toString(),t,r)}function s(n,t,e){var r=M.get(t.slice(e,e+=2).toLowerCase());return null==r?-1:(n.p=r,e)}var f=n.dateTime,h=n.date,g=n.time,p=n.periods,v=n.days,d=n.shortDays,m=n.months,y=n.shortMonths;t.utc=function(n){function e(n){try{go=Hn;var t=new go;return t._=n,r(t)}finally{go=Date}}var r=t(n);return e.parse=function(n){try{go=Hn;var t=r.parse(n);return t&&t._}finally{go=Date}},e.toString=r.toString,e},t.multi=t.utc.multi=ct;var M=oa.map(),x=Vn(v),b=Xn(v),_=Vn(d),w=Xn(d),S=Vn(m),k=Xn(m),N=Vn(y),E=Xn(y);p.forEach(function(n,t){M.set(n.toLowerCase(),t)});var A={a:function(n){return d[n.getDay()]},A:function(n){return v[n.getDay()]},b:function(n){return y[n.getMonth()]},B:function(n){return m[n.getMonth()]},c:t(f),d:function(n,t){return Zn(n.getDate(),t,2)},e:function(n,t){return Zn(n.getDate(),t,2)},H:function(n,t){return Zn(n.getHours(),t,2)},I:function(n,t){return Zn(n.getHours()%12||12,t,2)},j:function(n,t){return Zn(1+ho.dayOfYear(n),t,3)},L:function(n,t){return Zn(n.getMilliseconds(),t,3)},m:function(n,t){return Zn(n.getMonth()+1,t,2)},M:function(n,t){return Zn(n.getMinutes(),t,2)},p:function(n){return p[+(n.getHours()>=12)]},S:function(n,t){return Zn(n.getSeconds(),t,2)},U:function(n,t){return Zn(ho.sundayOfYear(n),t,2)},w:function(n){return n.getDay()},W:function(n,t){return Zn(ho.mondayOfYear(n),t,2)},x:t(h),X:t(g),y:function(n,t){return Zn(n.getFullYear()%100,t,2)},Y:function(n,t){return Zn(n.getFullYear()%1e4,t,4)},Z:ot,"%":function(){return"%"}},C={a:r,A:u,b:i,B:a,c:o,d:tt,e:tt,H:rt,I:rt,j:et,L:at,m:nt,M:ut,p:s,S:it,U:Bn,w:$n,W:Wn,x:l,X:c,y:Gn,Y:Jn,Z:Kn,"%":lt};return t}function Zn(n,t,e){var r=0>n?"-":"",u=(r?-n:n)+"",i=u.length;return r+(e>i?new Array(e-i+1).join(t)+u:u)}function Vn(n){return new RegExp("^(?:"+n.map(oa.requote).join("|")+")","i")}function Xn(n){for(var t=new c,e=-1,r=n.length;++e<r;)t.set(n[e].toLowerCase(),e);return t}function $n(n,t,e){mo.lastIndex=0;var r=mo.exec(t.slice(e,e+1));return r?(n.w=+r[0],e+r[0].length):-1}function Bn(n,t,e){mo.lastIndex=0;var r=mo.exec(t.slice(e));return r?(n.U=+r[0],e+r[0].length):-1}function Wn(n,t,e){mo.lastIndex=0;var r=mo.exec(t.slice(e));return r?(n.W=+r[0],e+r[0].length):-1}function Jn(n,t,e){mo.lastIndex=0;var r=mo.exec(t.slice(e,e+4));return r?(n.y=+r[0],e+r[0].length):-1}function Gn(n,t,e){mo.lastIndex=0;var r=mo.exec(t.slice(e,e+2));return r?(n.y=Qn(+r[0]),e+r[0].length):-1}function Kn(n,t,e){return/^[+-]\d{4}$/.test(t=t.slice(e,e+5))?(n.Z=-t,e+5):-1}function Qn(n){return n+(n>68?1900:2e3)}function nt(n,t,e){mo.lastIndex=0;var r=mo.exec(t.slice(e,e+2));return r?(n.m=r[0]-1,e+r[0].length):-1}function tt(n,t,e){mo.lastIndex=0;var r=mo.exec(t.slice(e,e+2));return r?(n.d=+r[0],e+r[0].length):-1}function et(n,t,e){mo.lastIndex=0;var r=mo.exec(t.slice(e,e+3));return r?(n.j=+r[0],e+r[0].length):-1}function rt(n,t,e){mo.lastIndex=0;var r=mo.exec(t.slice(e,e+2));return r?(n.H=+r[0],e+r[0].length):-1}function ut(n,t,e){mo.lastIndex=0;var r=mo.exec(t.slice(e,e+2));return r?(n.M=+r[0],e+r[0].length):-1}function it(n,t,e){mo.lastIndex=0;var r=mo.exec(t.slice(e,e+2));return r?(n.S=+r[0],e+r[0].length):-1}function at(n,t,e){mo.lastIndex=0;var r=mo.exec(t.slice(e,e+3));return r?(n.L=+r[0],e+r[0].length):-1}function ot(n){var t=n.getTimezoneOffset(),e=t>0?"-":"+",r=Ma(t)/60|0,u=Ma(t)%60;return e+Zn(r,"0",2)+Zn(u,"0",2)}function lt(n,t,e){yo.lastIndex=0;var r=yo.exec(t.slice(e,e+1));return r?e+r[0].length:-1}function ct(n){for(var t=n.length,e=-1;++e<t;)n[e][0]=this(n[e][0]);return function(t){for(var e=0,r=n[e];!r[1](t);)r=n[++e];return r[0](t)}}function st(){}function ft(n,t,e){var r=e.s=n+t,u=r-n,i=r-u;e.t=n-i+(t-u)}function ht(n,t){n&&_o.hasOwnProperty(n.type)&&_o[n.type](n,t)}function gt(n,t,e){var r,u=-1,i=n.length-e;for(t.lineStart();++u<i;)r=n[u],t.point(r[0],r[1],r[2]);t.lineEnd()}function pt(n,t){var e=-1,r=n.length;for(t.polygonStart();++e<r;)gt(n[e],t,1);t.polygonEnd()}function vt(){function n(n,t){n*=Oa,t=t*Oa/2+ja/4;var e=n-r,a=e>=0?1:-1,o=a*e,l=Math.cos(t),c=Math.sin(t),s=i*c,f=u*l+s*Math.cos(o),h=s*a*Math.sin(o);So.add(Math.atan2(h,f)),r=n,u=l,i=c}var t,e,r,u,i;ko.point=function(a,o){ko.point=n,r=(t=a)*Oa,u=Math.cos(o=(e=o)*Oa/2+ja/4),i=Math.sin(o)},ko.lineEnd=function(){n(t,e)}}function dt(n){var t=n[0],e=n[1],r=Math.cos(e);return[r*Math.cos(t),r*Math.sin(t),Math.sin(e)]}function mt(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function yt(n,t){return[n[1]*t[2]-n[2]*t[1],n[2]*t[0]-n[0]*t[2],n[0]*t[1]-n[1]*t[0]]}function Mt(n,t){n[0]+=t[0],n[1]+=t[1],n[2]+=t[2]}function xt(n,t){return[n[0]*t,n[1]*t,n[2]*t]}function bt(n){var t=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/=t,n[1]/=t,n[2]/=t}function _t(n){return[Math.atan2(n[1],n[0]),tn(n[2])]}function wt(n,t){return Ma(n[0]-t[0])<Da&&Ma(n[1]-t[1])<Da}function St(n,t){n*=Oa;var e=Math.cos(t*=Oa);kt(e*Math.cos(n),e*Math.sin(n),Math.sin(t))}function kt(n,t,e){++No,Ao+=(n-Ao)/No,Co+=(t-Co)/No,zo+=(e-zo)/No}function Nt(){function n(n,u){n*=Oa;var i=Math.cos(u*=Oa),a=i*Math.cos(n),o=i*Math.sin(n),l=Math.sin(u),c=Math.atan2(Math.sqrt((c=e*l-r*o)*c+(c=r*a-t*l)*c+(c=t*o-e*a)*c),t*a+e*o+r*l);Eo+=c,Lo+=c*(t+(t=a)),qo+=c*(e+(e=o)),To+=c*(r+(r=l)),kt(t,e,r)}var t,e,r;jo.point=function(u,i){u*=Oa;var a=Math.cos(i*=Oa);t=a*Math.cos(u),e=a*Math.sin(u),r=Math.sin(i),jo.point=n,kt(t,e,r)}}function Et(){jo.point=St}function At(){function n(n,t){n*=Oa;var e=Math.cos(t*=Oa),a=e*Math.cos(n),o=e*Math.sin(n),l=Math.sin(t),c=u*l-i*o,s=i*a-r*l,f=r*o-u*a,h=Math.sqrt(c*c+s*s+f*f),g=r*a+u*o+i*l,p=h&&-nn(g)/h,v=Math.atan2(h,g);Ro+=p*c,Do+=p*s,Po+=p*f,Eo+=v,Lo+=v*(r+(r=a)),qo+=v*(u+(u=o)),To+=v*(i+(i=l)),kt(r,u,i)}var t,e,r,u,i;jo.point=function(a,o){t=a,e=o,jo.point=n,a*=Oa;var l=Math.cos(o*=Oa);r=l*Math.cos(a),u=l*Math.sin(a),i=Math.sin(o),kt(r,u,i)},jo.lineEnd=function(){n(t,e),jo.lineEnd=Et,jo.point=St}}function Ct(n,t){function e(e,r){return e=n(e,r),t(e[0],e[1])}return n.invert&&t.invert&&(e.invert=function(e,r){return e=t.invert(e,r),e&&n.invert(e[0],e[1])}),e}function zt(){return!0}function Lt(n,t,e,r,u){var i=[],a=[];if(n.forEach(function(n){if(!((t=n.length-1)<=0)){var t,e=n[0],r=n[t];if(wt(e,r)){u.lineStart();for(var o=0;t>o;++o)u.point((e=n[o])[0],e[1]);return void u.lineEnd()}var l=new Tt(e,n,null,!0),c=new Tt(e,null,l,!1);l.o=c,i.push(l),a.push(c),l=new Tt(r,n,null,!1),c=new Tt(r,null,l,!0),l.o=c,i.push(l),a.push(c)}}),a.sort(t),qt(i),qt(a),i.length){for(var o=0,l=e,c=a.length;c>o;++o)a[o].e=l=!l;for(var s,f,h=i[0];;){for(var g=h,p=!0;g.v;)if((g=g.n)===h)return;s=g.z,u.lineStart();do{if(g.v=g.o.v=!0,g.e){if(p)for(var o=0,c=s.length;c>o;++o)u.point((f=s[o])[0],f[1]);else r(g.x,g.n.x,1,u);g=g.n}else{if(p){s=g.p.z;for(var o=s.length-1;o>=0;--o)u.point((f=s[o])[0],f[1])}else r(g.x,g.p.x,-1,u);g=g.p}g=g.o,s=g.z,p=!p}while(!g.v);u.lineEnd()}}}function qt(n){if(t=n.length){for(var t,e,r=0,u=n[0];++r<t;)u.n=e=n[r],e.p=u,u=e;u.n=e=n[0],e.p=u}}function Tt(n,t,e,r){this.x=n,this.z=t,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Rt(n,t,e,r){return function(u,i){function a(t,e){var r=u(t,e);n(t=r[0],e=r[1])&&i.point(t,e)}function o(n,t){var e=u(n,t);d.point(e[0],e[1])}function l(){y.point=o,d.lineStart()}function c(){y.point=a,d.lineEnd()}function s(n,t){v.push([n,t]);var e=u(n,t);x.point(e[0],e[1])}function f(){x.lineStart(),v=[]}function h(){s(v[0][0],v[0][1]),x.lineEnd();var n,t=x.clean(),e=M.buffer(),r=e.length;if(v.pop(),p.push(v),v=null,r)if(1&t){n=e[0];var u,r=n.length-1,a=-1;if(r>0){for(b||(i.polygonStart(),b=!0),i.lineStart();++a<r;)i.point((u=n[a])[0],u[1]);i.lineEnd()}}else r>1&&2&t&&e.push(e.pop().concat(e.shift())),g.push(e.filter(Dt))}var g,p,v,d=t(i),m=u.invert(r[0],r[1]),y={point:a,lineStart:l,lineEnd:c,polygonStart:function(){y.point=s,y.lineStart=f,y.lineEnd=h,g=[],p=[]},polygonEnd:function(){y.point=a,y.lineStart=l,y.lineEnd=c,g=oa.merge(g);var n=Ot(m,p);g.length?(b||(i.polygonStart(),b=!0),Lt(g,jt,n,e,i)):n&&(b||(i.polygonStart(),b=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),b&&(i.polygonEnd(),b=!1),g=p=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}},M=Pt(),x=t(M),b=!1;return y}}function Dt(n){return n.length>1}function Pt(){var n,t=[];return{lineStart:function(){t.push(n=[])},point:function(t,e){n.push([t,e])},lineEnd:b,buffer:function(){var e=t;return t=[],n=null,e},rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))}}}function jt(n,t){return((n=n.x)[0]<0?n[1]-Ha-Da:Ha-n[1])-((t=t.x)[0]<0?t[1]-Ha-Da:Ha-t[1])}function Ut(n){var t,e=NaN,r=NaN,u=NaN;return{lineStart:function(){n.lineStart(),t=1},point:function(i,a){var o=i>0?ja:-ja,l=Ma(i-e);Ma(l-ja)<Da?(n.point(e,r=(r+a)/2>0?Ha:-Ha),n.point(u,r),n.lineEnd(),n.lineStart(),n.point(o,r),n.point(i,r),t=0):u!==o&&l>=ja&&(Ma(e-u)<Da&&(e-=u*Da),Ma(i-o)<Da&&(i-=o*Da),r=Ft(e,r,i,a),n.point(u,r),n.lineEnd(),n.lineStart(),n.point(o,r),t=0),n.point(e=i,r=a),u=o},lineEnd:function(){n.lineEnd(),e=r=NaN},clean:function(){return 2-t}}}function Ft(n,t,e,r){var u,i,a=Math.sin(n-e);return Ma(a)>Da?Math.atan((Math.sin(t)*(i=Math.cos(r))*Math.sin(e)-Math.sin(r)*(u=Math.cos(t))*Math.sin(n))/(u*i*a)):(t+r)/2}function Ht(n,t,e,r){var u;if(null==n)u=e*Ha,r.point(-ja,u),r.point(0,u),r.point(ja,u),r.point(ja,0),r.point(ja,-u),r.point(0,-u),r.point(-ja,-u),r.point(-ja,0),r.point(-ja,u);else if(Ma(n[0]-t[0])>Da){var i=n[0]<t[0]?ja:-ja;u=e*i/2,r.point(-i,u),r.point(0,u),r.point(i,u)}else r.point(t[0],t[1])}function Ot(n,t){var e=n[0],r=n[1],u=[Math.sin(e),-Math.cos(e),0],i=0,a=0;So.reset();for(var o=0,l=t.length;l>o;++o){var c=t[o],s=c.length;if(s)for(var f=c[0],h=f[0],g=f[1]/2+ja/4,p=Math.sin(g),v=Math.cos(g),d=1;;){d===s&&(d=0),n=c[d];var m=n[0],y=n[1]/2+ja/4,M=Math.sin(y),x=Math.cos(y),b=m-h,_=b>=0?1:-1,w=_*b,S=w>ja,k=p*M;if(So.add(Math.atan2(k*_*Math.sin(w),v*x+k*Math.cos(w))),i+=S?b+_*Ua:b,S^h>=e^m>=e){var N=yt(dt(f),dt(n));bt(N);var E=yt(u,N);bt(E);var A=(S^b>=0?-1:1)*tn(E[2]);(r>A||r===A&&(N[0]||N[1]))&&(a+=S^b>=0?1:-1)}if(!d++)break;h=m,p=M,v=x,f=n}}return(-Da>i||Da>i&&0>So)^1&a}function It(n){function t(n,t){return Math.cos(n)*Math.cos(t)>i}function e(n){var e,i,l,c,s;return{lineStart:function(){c=l=!1,s=1},point:function(f,h){var g,p=[f,h],v=t(f,h),d=a?v?0:u(f,h):v?u(f+(0>f?ja:-ja),h):0;if(!e&&(c=l=v)&&n.lineStart(),v!==l&&(g=r(e,p),(wt(e,g)||wt(p,g))&&(p[0]+=Da,p[1]+=Da,v=t(p[0],p[1]))),v!==l)s=0,v?(n.lineStart(),g=r(p,e),n.point(g[0],g[1])):(g=r(e,p),n.point(g[0],g[1]),n.lineEnd()),e=g;else if(o&&e&&a^v){var m;d&i||!(m=r(p,e,!0))||(s=0,a?(n.lineStart(),n.point(m[0][0],m[0][1]),n.point(m[1][0],m[1][1]),n.lineEnd()):(n.point(m[1][0],m[1][1]),n.lineEnd(),n.lineStart(),n.point(m[0][0],m[0][1])))}!v||e&&wt(e,p)||n.point(p[0],p[1]),e=p,l=v,i=d},lineEnd:function(){l&&n.lineEnd(),e=null},clean:function(){return s|(c&&l)<<1}}}function r(n,t,e){var r=dt(n),u=dt(t),a=[1,0,0],o=yt(r,u),l=mt(o,o),c=o[0],s=l-c*c;if(!s)return!e&&n;var f=i*l/s,h=-i*c/s,g=yt(a,o),p=xt(a,f),v=xt(o,h);Mt(p,v);var d=g,m=mt(p,d),y=mt(d,d),M=m*m-y*(mt(p,p)-1);if(!(0>M)){var x=Math.sqrt(M),b=xt(d,(-m-x)/y);if(Mt(b,p),b=_t(b),!e)return b;var _,w=n[0],S=t[0],k=n[1],N=t[1];w>S&&(_=w,w=S,S=_);var E=S-w,A=Ma(E-ja)<Da,C=A||Da>E;if(!A&&k>N&&(_=k,k=N,N=_),C?A?k+N>0^b[1]<(Ma(b[0]-w)<Da?k:N):k<=b[1]&&b[1]<=N:E>ja^(w<=b[0]&&b[0]<=S)){var z=xt(d,(-m+x)/y);return Mt(z,p),[b,_t(z)]}}}function u(t,e){var r=a?n:ja-n,u=0;return-r>t?u|=1:t>r&&(u|=2),-r>e?u|=4:e>r&&(u|=8),u}var i=Math.cos(n),a=i>0,o=Ma(i)>Da,l=ve(n,6*Oa);return Rt(t,e,l,a?[0,-n]:[-ja,n-ja])}function Yt(n,t,e,r){return function(u){var i,a=u.a,o=u.b,l=a.x,c=a.y,s=o.x,f=o.y,h=0,g=1,p=s-l,v=f-c;if(i=n-l,p||!(i>0)){if(i/=p,0>p){if(h>i)return;g>i&&(g=i)}else if(p>0){if(i>g)return;i>h&&(h=i)}if(i=e-l,p||!(0>i)){if(i/=p,0>p){if(i>g)return;i>h&&(h=i)}else if(p>0){if(h>i)return;g>i&&(g=i)}if(i=t-c,v||!(i>0)){if(i/=v,0>v){if(h>i)return;g>i&&(g=i)}else if(v>0){if(i>g)return;i>h&&(h=i)}if(i=r-c,v||!(0>i)){if(i/=v,0>v){if(i>g)return;i>h&&(h=i)}else if(v>0){if(h>i)return;g>i&&(g=i)}return h>0&&(u.a={x:l+h*p,y:c+h*v}),1>g&&(u.b={x:l+g*p,y:c+g*v}),u}}}}}}function Zt(n,t,e,r){function u(r,u){return Ma(r[0]-n)<Da?u>0?0:3:Ma(r[0]-e)<Da?u>0?2:1:Ma(r[1]-t)<Da?u>0?1:0:u>0?3:2}function i(n,t){return a(n.x,t.x)}function a(n,t){var e=u(n,1),r=u(t,1);return e!==r?e-r:0===e?t[1]-n[1]:1===e?n[0]-t[0]:2===e?n[1]-t[1]:t[0]-n[0]}return function(o){function l(n){for(var t=0,e=d.length,r=n[1],u=0;e>u;++u)for(var i,a=1,o=d[u],l=o.length,c=o[0];l>a;++a)i=o[a],c[1]<=r?i[1]>r&&Q(c,i,n)>0&&++t:i[1]<=r&&Q(c,i,n)<0&&--t,c=i;return 0!==t}function c(i,o,l,c){var s=0,f=0;if(null==i||(s=u(i,l))!==(f=u(o,l))||a(i,o)<0^l>0){do c.point(0===s||3===s?n:e,s>1?r:t);while((s=(s+l+4)%4)!==f)}else c.point(o[0],o[1])}function s(u,i){return u>=n&&e>=u&&i>=t&&r>=i}function f(n,t){s(n,t)&&o.point(n,t)}function h(){C.point=p,d&&d.push(m=[]),S=!0,w=!1,b=_=NaN}function g(){v&&(p(y,M),x&&w&&E.rejoin(),v.push(E.buffer())),C.point=f,w&&o.lineEnd()}function p(n,t){n=Math.max(-Fo,Math.min(Fo,n)),t=Math.max(-Fo,Math.min(Fo,t));var e=s(n,t);if(d&&m.push([n,t]),S)y=n,M=t,x=e,S=!1,e&&(o.lineStart(),o.point(n,t));else if(e&&w)o.point(n,t);else{var r={a:{x:b,y:_},b:{x:n,y:t}};A(r)?(w||(o.lineStart(),o.point(r.a.x,r.a.y)),o.point(r.b.x,r.b.y),e||o.lineEnd(),k=!1):e&&(o.lineStart(),o.point(n,t),k=!1)}b=n,_=t,w=e}var v,d,m,y,M,x,b,_,w,S,k,N=o,E=Pt(),A=Yt(n,t,e,r),C={point:f,lineStart:h,lineEnd:g,polygonStart:function(){o=E,v=[],d=[],k=!0},polygonEnd:function(){o=N,v=oa.merge(v);var t=l([n,r]),e=k&&t,u=v.length;(e||u)&&(o.polygonStart(),e&&(o.lineStart(),c(null,null,1,o),o.lineEnd()),u&&Lt(v,i,t,c,o),o.polygonEnd()),v=d=m=null}};return C}}function Vt(n){var t=0,e=ja/3,r=oe(n),u=r(t,e);return u.parallels=function(n){return arguments.length?r(t=n[0]*ja/180,e=n[1]*ja/180):[t/ja*180,e/ja*180]},u}function Xt(n,t){function e(n,t){var e=Math.sqrt(i-2*u*Math.sin(t))/u;return[e*Math.sin(n*=u),a-e*Math.cos(n)]}var r=Math.sin(n),u=(r+Math.sin(t))/2,i=1+r*(2*u-r),a=Math.sqrt(i)/u;return e.invert=function(n,t){var e=a-t;return[Math.atan2(n,e)/u,tn((i-(n*n+e*e)*u*u)/(2*u))]},e}function $t(){function n(n,t){Oo+=u*n-r*t,r=n,u=t}var t,e,r,u;Xo.point=function(i,a){Xo.point=n,t=r=i,e=u=a},Xo.lineEnd=function(){n(t,e)}}function Bt(n,t){Io>n&&(Io=n),n>Zo&&(Zo=n),Yo>t&&(Yo=t),t>Vo&&(Vo=t)}function Wt(){function n(n,t){a.push("M",n,",",t,i)}function t(n,t){a.push("M",n,",",t),o.point=e}function e(n,t){a.push("L",n,",",t)}function r(){o.point=n}function u(){a.push("Z")}var i=Jt(4.5),a=[],o={point:n,lineStart:function(){o.point=t},lineEnd:r,polygonStart:function(){o.lineEnd=u},polygonEnd:function(){o.lineEnd=r,o.point=n},pointRadius:function(n){return i=Jt(n),o},result:function(){if(a.length){var n=a.join("");return a=[],n}}};return o}function Jt(n){return"m0,"+n+"a"+n+","+n+" 0 1,1 0,"+-2*n+"a"+n+","+n+" 0 1,1 0,"+2*n+"z"}function Gt(n,t){Ao+=n,Co+=t,++zo}function Kt(){function n(n,r){var u=n-t,i=r-e,a=Math.sqrt(u*u+i*i);Lo+=a*(t+n)/2,qo+=a*(e+r)/2,To+=a,Gt(t=n,e=r)}var t,e;Bo.point=function(r,u){Bo.point=n,Gt(t=r,e=u)}}function Qt(){Bo.point=Gt}function ne(){function n(n,t){var e=n-r,i=t-u,a=Math.sqrt(e*e+i*i);Lo+=a*(r+n)/2,qo+=a*(u+t)/2,To+=a,a=u*n-r*t,Ro+=a*(r+n),Do+=a*(u+t),Po+=3*a,Gt(r=n,u=t)}var t,e,r,u;Bo.point=function(i,a){Bo.point=n,Gt(t=r=i,e=u=a)},Bo.lineEnd=function(){n(t,e)}}function te(n){function t(t,e){n.moveTo(t+a,e),n.arc(t,e,a,0,Ua)}function e(t,e){n.moveTo(t,e),o.point=r}function r(t,e){n.lineTo(t,e)}function u(){o.point=t}function i(){n.closePath()}var a=4.5,o={point:t,lineStart:function(){o.point=e},lineEnd:u,polygonStart:function(){o.lineEnd=i},polygonEnd:function(){o.lineEnd=u,o.point=t},pointRadius:function(n){return a=n,o},result:b};return o}function ee(n){function t(n){return(o?r:e)(n)}function e(t){return ie(t,function(e,r){e=n(e,r),t.point(e[0],e[1])})}function r(t){function e(e,r){e=n(e,r),t.point(e[0],e[1])}function r(){M=NaN,S.point=i,t.lineStart()}function i(e,r){var i=dt([e,r]),a=n(e,r);u(M,x,y,b,_,w,M=a[0],x=a[1],y=e,b=i[0],_=i[1],w=i[2],o,t),t.point(M,x)}function a(){S.point=e,t.lineEnd()}function l(){r(),S.point=c,S.lineEnd=s}function c(n,t){
i(f=n,h=t),g=M,p=x,v=b,d=_,m=w,S.point=i}function s(){u(M,x,y,b,_,w,g,p,f,v,d,m,o,t),S.lineEnd=a,a()}var f,h,g,p,v,d,m,y,M,x,b,_,w,S={point:e,lineStart:r,lineEnd:a,polygonStart:function(){t.polygonStart(),S.lineStart=l},polygonEnd:function(){t.polygonEnd(),S.lineStart=r}};return S}function u(t,e,r,o,l,c,s,f,h,g,p,v,d,m){var y=s-t,M=f-e,x=y*y+M*M;if(x>4*i&&d--){var b=o+g,_=l+p,w=c+v,S=Math.sqrt(b*b+_*_+w*w),k=Math.asin(w/=S),N=Ma(Ma(w)-1)<Da||Ma(r-h)<Da?(r+h)/2:Math.atan2(_,b),E=n(N,k),A=E[0],C=E[1],z=A-t,L=C-e,q=M*z-y*L;(q*q/x>i||Ma((y*z+M*L)/x-.5)>.3||a>o*g+l*p+c*v)&&(u(t,e,r,o,l,c,A,C,N,b/=S,_/=S,w,d,m),m.point(A,C),u(A,C,N,b,_,w,s,f,h,g,p,v,d,m))}}var i=.5,a=Math.cos(30*Oa),o=16;return t.precision=function(n){return arguments.length?(o=(i=n*n)>0&&16,t):Math.sqrt(i)},t}function re(n){var t=ee(function(t,e){return n([t*Ia,e*Ia])});return function(n){return le(t(n))}}function ue(n){this.stream=n}function ie(n,t){return{point:t,sphere:function(){n.sphere()},lineStart:function(){n.lineStart()},lineEnd:function(){n.lineEnd()},polygonStart:function(){n.polygonStart()},polygonEnd:function(){n.polygonEnd()}}}function ae(n){return oe(function(){return n})()}function oe(n){function t(n){return n=o(n[0]*Oa,n[1]*Oa),[n[0]*h+l,c-n[1]*h]}function e(n){return n=o.invert((n[0]-l)/h,(c-n[1])/h),n&&[n[0]*Ia,n[1]*Ia]}function r(){o=Ct(a=fe(m,M,x),i);var n=i(v,d);return l=g-n[0]*h,c=p+n[1]*h,u()}function u(){return s&&(s.valid=!1,s=null),t}var i,a,o,l,c,s,f=ee(function(n,t){return n=i(n,t),[n[0]*h+l,c-n[1]*h]}),h=150,g=480,p=250,v=0,d=0,m=0,M=0,x=0,b=Uo,_=y,w=null,S=null;return t.stream=function(n){return s&&(s.valid=!1),s=le(b(a,f(_(n)))),s.valid=!0,s},t.clipAngle=function(n){return arguments.length?(b=null==n?(w=n,Uo):It((w=+n)*Oa),u()):w},t.clipExtent=function(n){return arguments.length?(S=n,_=n?Zt(n[0][0],n[0][1],n[1][0],n[1][1]):y,u()):S},t.scale=function(n){return arguments.length?(h=+n,r()):h},t.translate=function(n){return arguments.length?(g=+n[0],p=+n[1],r()):[g,p]},t.center=function(n){return arguments.length?(v=n[0]%360*Oa,d=n[1]%360*Oa,r()):[v*Ia,d*Ia]},t.rotate=function(n){return arguments.length?(m=n[0]%360*Oa,M=n[1]%360*Oa,x=n.length>2?n[2]%360*Oa:0,r()):[m*Ia,M*Ia,x*Ia]},oa.rebind(t,f,"precision"),function(){return i=n.apply(this,arguments),t.invert=i.invert&&e,r()}}function le(n){return ie(n,function(t,e){n.point(t*Oa,e*Oa)})}function ce(n,t){return[n,t]}function se(n,t){return[n>ja?n-Ua:-ja>n?n+Ua:n,t]}function fe(n,t,e){return n?t||e?Ct(ge(n),pe(t,e)):ge(n):t||e?pe(t,e):se}function he(n){return function(t,e){return t+=n,[t>ja?t-Ua:-ja>t?t+Ua:t,e]}}function ge(n){var t=he(n);return t.invert=he(-n),t}function pe(n,t){function e(n,t){var e=Math.cos(t),o=Math.cos(n)*e,l=Math.sin(n)*e,c=Math.sin(t),s=c*r+o*u;return[Math.atan2(l*i-s*a,o*r-c*u),tn(s*i+l*a)]}var r=Math.cos(n),u=Math.sin(n),i=Math.cos(t),a=Math.sin(t);return e.invert=function(n,t){var e=Math.cos(t),o=Math.cos(n)*e,l=Math.sin(n)*e,c=Math.sin(t),s=c*i-l*a;return[Math.atan2(l*i+c*a,o*r+s*u),tn(s*r-o*u)]},e}function ve(n,t){var e=Math.cos(n),r=Math.sin(n);return function(u,i,a,o){var l=a*t;null!=u?(u=de(e,u),i=de(e,i),(a>0?i>u:u>i)&&(u+=a*Ua)):(u=n+a*Ua,i=n-.5*l);for(var c,s=u;a>0?s>i:i>s;s-=l)o.point((c=_t([e,-r*Math.cos(s),-r*Math.sin(s)]))[0],c[1])}}function de(n,t){var e=dt(t);e[0]-=n,bt(e);var r=nn(-e[1]);return((-e[2]<0?-r:r)+2*Math.PI-Da)%(2*Math.PI)}function me(n,t,e){var r=oa.range(n,t-Da,e).concat(t);return function(n){return r.map(function(t){return[n,t]})}}function ye(n,t,e){var r=oa.range(n,t-Da,e).concat(t);return function(n){return r.map(function(t){return[t,n]})}}function Me(n){return n.source}function xe(n){return n.target}function be(n,t,e,r){var u=Math.cos(t),i=Math.sin(t),a=Math.cos(r),o=Math.sin(r),l=u*Math.cos(n),c=u*Math.sin(n),s=a*Math.cos(e),f=a*Math.sin(e),h=2*Math.asin(Math.sqrt(an(r-t)+u*a*an(e-n))),g=1/Math.sin(h),p=h?function(n){var t=Math.sin(n*=h)*g,e=Math.sin(h-n)*g,r=e*l+t*s,u=e*c+t*f,a=e*i+t*o;return[Math.atan2(u,r)*Ia,Math.atan2(a,Math.sqrt(r*r+u*u))*Ia]}:function(){return[n*Ia,t*Ia]};return p.distance=h,p}function _e(){function n(n,u){var i=Math.sin(u*=Oa),a=Math.cos(u),o=Ma((n*=Oa)-t),l=Math.cos(o);Wo+=Math.atan2(Math.sqrt((o=a*Math.sin(o))*o+(o=r*i-e*a*l)*o),e*i+r*a*l),t=n,e=i,r=a}var t,e,r;Jo.point=function(u,i){t=u*Oa,e=Math.sin(i*=Oa),r=Math.cos(i),Jo.point=n},Jo.lineEnd=function(){Jo.point=Jo.lineEnd=b}}function we(n,t){function e(t,e){var r=Math.cos(t),u=Math.cos(e),i=n(r*u);return[i*u*Math.sin(t),i*Math.sin(e)]}return e.invert=function(n,e){var r=Math.sqrt(n*n+e*e),u=t(r),i=Math.sin(u),a=Math.cos(u);return[Math.atan2(n*i,r*a),Math.asin(r&&e*i/r)]},e}function Se(n,t){function e(n,t){a>0?-Ha+Da>t&&(t=-Ha+Da):t>Ha-Da&&(t=Ha-Da);var e=a/Math.pow(u(t),i);return[e*Math.sin(i*n),a-e*Math.cos(i*n)]}var r=Math.cos(n),u=function(n){return Math.tan(ja/4+n/2)},i=n===t?Math.sin(n):Math.log(r/Math.cos(t))/Math.log(u(t)/u(n)),a=r*Math.pow(u(n),i)/i;return i?(e.invert=function(n,t){var e=a-t,r=K(i)*Math.sqrt(n*n+e*e);return[Math.atan2(n,e)/i,2*Math.atan(Math.pow(a/r,1/i))-Ha]},e):Ne}function ke(n,t){function e(n,t){var e=i-t;return[e*Math.sin(u*n),i-e*Math.cos(u*n)]}var r=Math.cos(n),u=n===t?Math.sin(n):(r-Math.cos(t))/(t-n),i=r/u+n;return Ma(u)<Da?ce:(e.invert=function(n,t){var e=i-t;return[Math.atan2(n,e)/u,i-K(u)*Math.sqrt(n*n+e*e)]},e)}function Ne(n,t){return[n,Math.log(Math.tan(ja/4+t/2))]}function Ee(n){var t,e=ae(n),r=e.scale,u=e.translate,i=e.clipExtent;return e.scale=function(){var n=r.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.translate=function(){var n=u.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.clipExtent=function(n){var a=i.apply(e,arguments);if(a===e){if(t=null==n){var o=ja*r(),l=u();i([[l[0]-o,l[1]-o],[l[0]+o,l[1]+o]])}}else t&&(a=null);return a},e.clipExtent(null)}function Ae(n,t){return[Math.log(Math.tan(ja/4+t/2)),-n]}function Ce(n){return n[0]}function ze(n){return n[1]}function Le(n){for(var t=n.length,e=[0,1],r=2,u=2;t>u;u++){for(;r>1&&Q(n[e[r-2]],n[e[r-1]],n[u])<=0;)--r;e[r++]=u}return e.slice(0,r)}function qe(n,t){return n[0]-t[0]||n[1]-t[1]}function Te(n,t,e){return(e[0]-t[0])*(n[1]-t[1])<(e[1]-t[1])*(n[0]-t[0])}function Re(n,t,e,r){var u=n[0],i=e[0],a=t[0]-u,o=r[0]-i,l=n[1],c=e[1],s=t[1]-l,f=r[1]-c,h=(o*(l-c)-f*(u-i))/(f*a-o*s);return[u+h*a,l+h*s]}function De(n){var t=n[0],e=n[n.length-1];return!(t[0]-e[0]||t[1]-e[1])}function Pe(){rr(this),this.edge=this.site=this.circle=null}function je(n){var t=ll.pop()||new Pe;return t.site=n,t}function Ue(n){Be(n),il.remove(n),ll.push(n),rr(n)}function Fe(n){var t=n.circle,e=t.x,r=t.cy,u={x:e,y:r},i=n.P,a=n.N,o=[n];Ue(n);for(var l=i;l.circle&&Ma(e-l.circle.x)<Da&&Ma(r-l.circle.cy)<Da;)i=l.P,o.unshift(l),Ue(l),l=i;o.unshift(l),Be(l);for(var c=a;c.circle&&Ma(e-c.circle.x)<Da&&Ma(r-c.circle.cy)<Da;)a=c.N,o.push(c),Ue(c),c=a;o.push(c),Be(c);var s,f=o.length;for(s=1;f>s;++s)c=o[s],l=o[s-1],nr(c.edge,l.site,c.site,u);l=o[0],c=o[f-1],c.edge=Ke(l.site,c.site,null,u),$e(l),$e(c)}function He(n){for(var t,e,r,u,i=n.x,a=n.y,o=il._;o;)if(r=Oe(o,a)-i,r>Da)o=o.L;else{if(u=i-Ie(o,a),!(u>Da)){r>-Da?(t=o.P,e=o):u>-Da?(t=o,e=o.N):t=e=o;break}if(!o.R){t=o;break}o=o.R}var l=je(n);if(il.insert(t,l),t||e){if(t===e)return Be(t),e=je(t.site),il.insert(l,e),l.edge=e.edge=Ke(t.site,l.site),$e(t),void $e(e);if(!e)return void(l.edge=Ke(t.site,l.site));Be(t),Be(e);var c=t.site,s=c.x,f=c.y,h=n.x-s,g=n.y-f,p=e.site,v=p.x-s,d=p.y-f,m=2*(h*d-g*v),y=h*h+g*g,M=v*v+d*d,x={x:(d*y-g*M)/m+s,y:(h*M-v*y)/m+f};nr(e.edge,c,p,x),l.edge=Ke(c,n,null,x),e.edge=Ke(n,p,null,x),$e(t),$e(e)}}function Oe(n,t){var e=n.site,r=e.x,u=e.y,i=u-t;if(!i)return r;var a=n.P;if(!a)return-(1/0);e=a.site;var o=e.x,l=e.y,c=l-t;if(!c)return o;var s=o-r,f=1/i-1/c,h=s/c;return f?(-h+Math.sqrt(h*h-2*f*(s*s/(-2*c)-l+c/2+u-i/2)))/f+r:(r+o)/2}function Ie(n,t){var e=n.N;if(e)return Oe(e,t);var r=n.site;return r.y===t?r.x:1/0}function Ye(n){this.site=n,this.edges=[]}function Ze(n){for(var t,e,r,u,i,a,o,l,c,s,f=n[0][0],h=n[1][0],g=n[0][1],p=n[1][1],v=ul,d=v.length;d--;)if(i=v[d],i&&i.prepare())for(o=i.edges,l=o.length,a=0;l>a;)s=o[a].end(),r=s.x,u=s.y,c=o[++a%l].start(),t=c.x,e=c.y,(Ma(r-t)>Da||Ma(u-e)>Da)&&(o.splice(a,0,new tr(Qe(i.site,s,Ma(r-f)<Da&&p-u>Da?{x:f,y:Ma(t-f)<Da?e:p}:Ma(u-p)<Da&&h-r>Da?{x:Ma(e-p)<Da?t:h,y:p}:Ma(r-h)<Da&&u-g>Da?{x:h,y:Ma(t-h)<Da?e:g}:Ma(u-g)<Da&&r-f>Da?{x:Ma(e-g)<Da?t:f,y:g}:null),i.site,null)),++l)}function Ve(n,t){return t.angle-n.angle}function Xe(){rr(this),this.x=this.y=this.arc=this.site=this.cy=null}function $e(n){var t=n.P,e=n.N;if(t&&e){var r=t.site,u=n.site,i=e.site;if(r!==i){var a=u.x,o=u.y,l=r.x-a,c=r.y-o,s=i.x-a,f=i.y-o,h=2*(l*f-c*s);if(!(h>=-Pa)){var g=l*l+c*c,p=s*s+f*f,v=(f*g-c*p)/h,d=(l*p-s*g)/h,f=d+o,m=cl.pop()||new Xe;m.arc=n,m.site=u,m.x=v+a,m.y=f+Math.sqrt(v*v+d*d),m.cy=f,n.circle=m;for(var y=null,M=ol._;M;)if(m.y<M.y||m.y===M.y&&m.x<=M.x){if(!M.L){y=M.P;break}M=M.L}else{if(!M.R){y=M;break}M=M.R}ol.insert(y,m),y||(al=m)}}}}function Be(n){var t=n.circle;t&&(t.P||(al=t.N),ol.remove(t),cl.push(t),rr(t),n.circle=null)}function We(n){for(var t,e=rl,r=Yt(n[0][0],n[0][1],n[1][0],n[1][1]),u=e.length;u--;)t=e[u],(!Je(t,n)||!r(t)||Ma(t.a.x-t.b.x)<Da&&Ma(t.a.y-t.b.y)<Da)&&(t.a=t.b=null,e.splice(u,1))}function Je(n,t){var e=n.b;if(e)return!0;var r,u,i=n.a,a=t[0][0],o=t[1][0],l=t[0][1],c=t[1][1],s=n.l,f=n.r,h=s.x,g=s.y,p=f.x,v=f.y,d=(h+p)/2,m=(g+v)/2;if(v===g){if(a>d||d>=o)return;if(h>p){if(i){if(i.y>=c)return}else i={x:d,y:l};e={x:d,y:c}}else{if(i){if(i.y<l)return}else i={x:d,y:c};e={x:d,y:l}}}else if(r=(h-p)/(v-g),u=m-r*d,-1>r||r>1)if(h>p){if(i){if(i.y>=c)return}else i={x:(l-u)/r,y:l};e={x:(c-u)/r,y:c}}else{if(i){if(i.y<l)return}else i={x:(c-u)/r,y:c};e={x:(l-u)/r,y:l}}else if(v>g){if(i){if(i.x>=o)return}else i={x:a,y:r*a+u};e={x:o,y:r*o+u}}else{if(i){if(i.x<a)return}else i={x:o,y:r*o+u};e={x:a,y:r*a+u}}return n.a=i,n.b=e,!0}function Ge(n,t){this.l=n,this.r=t,this.a=this.b=null}function Ke(n,t,e,r){var u=new Ge(n,t);return rl.push(u),e&&nr(u,n,t,e),r&&nr(u,t,n,r),ul[n.i].edges.push(new tr(u,n,t)),ul[t.i].edges.push(new tr(u,t,n)),u}function Qe(n,t,e){var r=new Ge(n,null);return r.a=t,r.b=e,rl.push(r),r}function nr(n,t,e,r){n.a||n.b?n.l===e?n.b=r:n.a=r:(n.a=r,n.l=t,n.r=e)}function tr(n,t,e){var r=n.a,u=n.b;this.edge=n,this.site=t,this.angle=e?Math.atan2(e.y-t.y,e.x-t.x):n.l===t?Math.atan2(u.x-r.x,r.y-u.y):Math.atan2(r.x-u.x,u.y-r.y)}function er(){this._=null}function rr(n){n.U=n.C=n.L=n.R=n.P=n.N=null}function ur(n,t){var e=t,r=t.R,u=e.U;u?u.L===e?u.L=r:u.R=r:n._=r,r.U=u,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function ir(n,t){var e=t,r=t.L,u=e.U;u?u.L===e?u.L=r:u.R=r:n._=r,r.U=u,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function ar(n){for(;n.L;)n=n.L;return n}function or(n,t){var e,r,u,i=n.sort(lr).pop();for(rl=[],ul=new Array(n.length),il=new er,ol=new er;;)if(u=al,i&&(!u||i.y<u.y||i.y===u.y&&i.x<u.x))(i.x!==e||i.y!==r)&&(ul[i.i]=new Ye(i),He(i),e=i.x,r=i.y),i=n.pop();else{if(!u)break;Fe(u.arc)}t&&(We(t),Ze(t));var a={cells:ul,edges:rl};return il=ol=rl=ul=null,a}function lr(n,t){return t.y-n.y||t.x-n.x}function cr(n,t,e){return(n.x-e.x)*(t.y-n.y)-(n.x-t.x)*(e.y-n.y)}function sr(n){return n.x}function fr(n){return n.y}function hr(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function gr(n,t,e,r,u,i){if(!n(t,e,r,u,i)){var a=.5*(e+u),o=.5*(r+i),l=t.nodes;l[0]&&gr(n,l[0],e,r,a,o),l[1]&&gr(n,l[1],a,r,u,o),l[2]&&gr(n,l[2],e,o,a,i),l[3]&&gr(n,l[3],a,o,u,i)}}function pr(n,t,e,r,u,i,a){var o,l=1/0;return function c(n,s,f,h,g){if(!(s>i||f>a||r>h||u>g)){if(p=n.point){var p,v=t-n.x,d=e-n.y,m=v*v+d*d;if(l>m){var y=Math.sqrt(l=m);r=t-y,u=e-y,i=t+y,a=e+y,o=p}}for(var M=n.nodes,x=.5*(s+h),b=.5*(f+g),_=t>=x,w=e>=b,S=w<<1|_,k=S+4;k>S;++S)if(n=M[3&S])switch(3&S){case 0:c(n,s,f,x,b);break;case 1:c(n,x,f,h,b);break;case 2:c(n,s,b,x,g);break;case 3:c(n,x,b,h,g)}}}(n,r,u,i,a),o}function vr(n,t){n=oa.rgb(n),t=oa.rgb(t);var e=n.r,r=n.g,u=n.b,i=t.r-e,a=t.g-r,o=t.b-u;return function(n){return"#"+bn(Math.round(e+i*n))+bn(Math.round(r+a*n))+bn(Math.round(u+o*n))}}function dr(n,t){var e,r={},u={};for(e in n)e in t?r[e]=Mr(n[e],t[e]):u[e]=n[e];for(e in t)e in n||(u[e]=t[e]);return function(n){for(e in r)u[e]=r[e](n);return u}}function mr(n,t){return n=+n,t=+t,function(e){return n*(1-e)+t*e}}function yr(n,t){var e,r,u,i=fl.lastIndex=hl.lastIndex=0,a=-1,o=[],l=[];for(n+="",t+="";(e=fl.exec(n))&&(r=hl.exec(t));)(u=r.index)>i&&(u=t.slice(i,u),o[a]?o[a]+=u:o[++a]=u),(e=e[0])===(r=r[0])?o[a]?o[a]+=r:o[++a]=r:(o[++a]=null,l.push({i:a,x:mr(e,r)})),i=hl.lastIndex;return i<t.length&&(u=t.slice(i),o[a]?o[a]+=u:o[++a]=u),o.length<2?l[0]?(t=l[0].x,function(n){return t(n)+""}):function(){return t}:(t=l.length,function(n){for(var e,r=0;t>r;++r)o[(e=l[r]).i]=e.x(n);return o.join("")})}function Mr(n,t){for(var e,r=oa.interpolators.length;--r>=0&&!(e=oa.interpolators[r](n,t)););return e}function xr(n,t){var e,r=[],u=[],i=n.length,a=t.length,o=Math.min(n.length,t.length);for(e=0;o>e;++e)r.push(Mr(n[e],t[e]));for(;i>e;++e)u[e]=n[e];for(;a>e;++e)u[e]=t[e];return function(n){for(e=0;o>e;++e)u[e]=r[e](n);return u}}function br(n){return function(t){return 0>=t?0:t>=1?1:n(t)}}function _r(n){return function(t){return 1-n(1-t)}}function wr(n){return function(t){return.5*(.5>t?n(2*t):2-n(2-2*t))}}function Sr(n){return n*n}function kr(n){return n*n*n}function Nr(n){if(0>=n)return 0;if(n>=1)return 1;var t=n*n,e=t*n;return 4*(.5>n?e:3*(n-t)+e-.75)}function Er(n){return function(t){return Math.pow(t,n)}}function Ar(n){return 1-Math.cos(n*Ha)}function Cr(n){return Math.pow(2,10*(n-1))}function zr(n){return 1-Math.sqrt(1-n*n)}function Lr(n,t){var e;return arguments.length<2&&(t=.45),arguments.length?e=t/Ua*Math.asin(1/n):(n=1,e=t/4),function(r){return 1+n*Math.pow(2,-10*r)*Math.sin((r-e)*Ua/t)}}function qr(n){return n||(n=1.70158),function(t){return t*t*((n+1)*t-n)}}function Tr(n){return 1/2.75>n?7.5625*n*n:2/2.75>n?7.5625*(n-=1.5/2.75)*n+.75:2.5/2.75>n?7.5625*(n-=2.25/2.75)*n+.9375:7.5625*(n-=2.625/2.75)*n+.984375}function Rr(n,t){n=oa.hcl(n),t=oa.hcl(t);var e=n.h,r=n.c,u=n.l,i=t.h-e,a=t.c-r,o=t.l-u;return isNaN(a)&&(a=0,r=isNaN(r)?t.c:r),isNaN(i)?(i=0,e=isNaN(e)?t.h:e):i>180?i-=360:-180>i&&(i+=360),function(n){return fn(e+i*n,r+a*n,u+o*n)+""}}function Dr(n,t){n=oa.hsl(n),t=oa.hsl(t);var e=n.h,r=n.s,u=n.l,i=t.h-e,a=t.s-r,o=t.l-u;return isNaN(a)&&(a=0,r=isNaN(r)?t.s:r),isNaN(i)?(i=0,e=isNaN(e)?t.h:e):i>180?i-=360:-180>i&&(i+=360),function(n){return cn(e+i*n,r+a*n,u+o*n)+""}}function Pr(n,t){n=oa.lab(n),t=oa.lab(t);var e=n.l,r=n.a,u=n.b,i=t.l-e,a=t.a-r,o=t.b-u;return function(n){return gn(e+i*n,r+a*n,u+o*n)+""}}function jr(n,t){return t-=n,function(e){return Math.round(n+t*e)}}function Ur(n){var t=[n.a,n.b],e=[n.c,n.d],r=Hr(t),u=Fr(t,e),i=Hr(Or(e,t,-u))||0;t[0]*e[1]<e[0]*t[1]&&(t[0]*=-1,t[1]*=-1,r*=-1,u*=-1),this.rotate=(r?Math.atan2(t[1],t[0]):Math.atan2(-e[0],e[1]))*Ia,this.translate=[n.e,n.f],this.scale=[r,i],this.skew=i?Math.atan2(u,i)*Ia:0}function Fr(n,t){return n[0]*t[0]+n[1]*t[1]}function Hr(n){var t=Math.sqrt(Fr(n,n));return t&&(n[0]/=t,n[1]/=t),t}function Or(n,t,e){return n[0]+=e*t[0],n[1]+=e*t[1],n}function Ir(n){return n.length?n.pop()+",":""}function Yr(n,t,e,r){if(n[0]!==t[0]||n[1]!==t[1]){var u=e.push("translate(",null,",",null,")");r.push({i:u-4,x:mr(n[0],t[0])},{i:u-2,x:mr(n[1],t[1])})}else(t[0]||t[1])&&e.push("translate("+t+")")}function Zr(n,t,e,r){n!==t?(n-t>180?t+=360:t-n>180&&(n+=360),r.push({i:e.push(Ir(e)+"rotate(",null,")")-2,x:mr(n,t)})):t&&e.push(Ir(e)+"rotate("+t+")")}function Vr(n,t,e,r){n!==t?r.push({i:e.push(Ir(e)+"skewX(",null,")")-2,x:mr(n,t)}):t&&e.push(Ir(e)+"skewX("+t+")")}function Xr(n,t,e,r){if(n[0]!==t[0]||n[1]!==t[1]){var u=e.push(Ir(e)+"scale(",null,",",null,")");r.push({i:u-4,x:mr(n[0],t[0])},{i:u-2,x:mr(n[1],t[1])})}else(1!==t[0]||1!==t[1])&&e.push(Ir(e)+"scale("+t+")")}function $r(n,t){var e=[],r=[];return n=oa.transform(n),t=oa.transform(t),Yr(n.translate,t.translate,e,r),Zr(n.rotate,t.rotate,e,r),Vr(n.skew,t.skew,e,r),Xr(n.scale,t.scale,e,r),n=t=null,function(n){for(var t,u=-1,i=r.length;++u<i;)e[(t=r[u]).i]=t.x(n);return e.join("")}}function Br(n,t){return t=(t-=n=+n)||1/t,function(e){return(e-n)/t}}function Wr(n,t){return t=(t-=n=+n)||1/t,function(e){return Math.max(0,Math.min(1,(e-n)/t))}}function Jr(n){for(var t=n.source,e=n.target,r=Kr(t,e),u=[t];t!==r;)t=t.parent,u.push(t);for(var i=u.length;e!==r;)u.splice(i,0,e),e=e.parent;return u}function Gr(n){for(var t=[],e=n.parent;null!=e;)t.push(n),n=e,e=e.parent;return t.push(n),t}function Kr(n,t){if(n===t)return n;for(var e=Gr(n),r=Gr(t),u=e.pop(),i=r.pop(),a=null;u===i;)a=u,u=e.pop(),i=r.pop();return a}function Qr(n){n.fixed|=2}function nu(n){n.fixed&=-7}function tu(n){n.fixed|=4,n.px=n.x,n.py=n.y}function eu(n){n.fixed&=-5}function ru(n,t,e){var r=0,u=0;if(n.charge=0,!n.leaf)for(var i,a=n.nodes,o=a.length,l=-1;++l<o;)i=a[l],null!=i&&(ru(i,t,e),n.charge+=i.charge,r+=i.charge*i.cx,u+=i.charge*i.cy);if(n.point){n.leaf||(n.point.x+=Math.random()-.5,n.point.y+=Math.random()-.5);var c=t*e[n.point.index];n.charge+=n.pointCharge=c,r+=c*n.point.x,u+=c*n.point.y}n.cx=r/n.charge,n.cy=u/n.charge}function uu(n,t){return oa.rebind(n,t,"sort","children","value"),n.nodes=n,n.links=su,n}function iu(n,t){for(var e=[n];null!=(n=e.pop());)if(t(n),(u=n.children)&&(r=u.length))for(var r,u;--r>=0;)e.push(u[r])}function au(n,t){for(var e=[n],r=[];null!=(n=e.pop());)if(r.push(n),(i=n.children)&&(u=i.length))for(var u,i,a=-1;++a<u;)e.push(i[a]);for(;null!=(n=r.pop());)t(n)}function ou(n){return n.children}function lu(n){return n.value}function cu(n,t){return t.value-n.value}function su(n){return oa.merge(n.map(function(n){return(n.children||[]).map(function(t){return{source:n,target:t}})}))}function fu(n){return n.x}function hu(n){return n.y}function gu(n,t,e){n.y0=t,n.y=e}function pu(n){return oa.range(n.length)}function vu(n){for(var t=-1,e=n[0].length,r=[];++t<e;)r[t]=0;return r}function du(n){for(var t,e=1,r=0,u=n[0][1],i=n.length;i>e;++e)(t=n[e][1])>u&&(r=e,u=t);return r}function mu(n){return n.reduce(yu,0)}function yu(n,t){return n+t[1]}function Mu(n,t){return xu(n,Math.ceil(Math.log(t.length)/Math.LN2+1))}function xu(n,t){for(var e=-1,r=+n[0],u=(n[1]-r)/t,i=[];++e<=t;)i[e]=u*e+r;return i}function bu(n){return[oa.min(n),oa.max(n)]}function _u(n,t){return n.value-t.value}function wu(n,t){var e=n._pack_next;n._pack_next=t,t._pack_prev=n,t._pack_next=e,e._pack_prev=t}function Su(n,t){n._pack_next=t,t._pack_prev=n}function ku(n,t){var e=t.x-n.x,r=t.y-n.y,u=n.r+t.r;return.999*u*u>e*e+r*r}function Nu(n){function t(n){s=Math.min(n.x-n.r,s),f=Math.max(n.x+n.r,f),h=Math.min(n.y-n.r,h),g=Math.max(n.y+n.r,g)}if((e=n.children)&&(c=e.length)){var e,r,u,i,a,o,l,c,s=1/0,f=-(1/0),h=1/0,g=-(1/0);if(e.forEach(Eu),r=e[0],r.x=-r.r,r.y=0,t(r),c>1&&(u=e[1],u.x=u.r,u.y=0,t(u),c>2))for(i=e[2],zu(r,u,i),t(i),wu(r,i),r._pack_prev=i,wu(i,u),u=r._pack_next,a=3;c>a;a++){zu(r,u,i=e[a]);var p=0,v=1,d=1;for(o=u._pack_next;o!==u;o=o._pack_next,v++)if(ku(o,i)){p=1;break}if(1==p)for(l=r._pack_prev;l!==o._pack_prev&&!ku(l,i);l=l._pack_prev,d++);p?(d>v||v==d&&u.r<r.r?Su(r,u=o):Su(r=l,u),a--):(wu(r,i),u=i,t(i))}var m=(s+f)/2,y=(h+g)/2,M=0;for(a=0;c>a;a++)i=e[a],i.x-=m,i.y-=y,M=Math.max(M,i.r+Math.sqrt(i.x*i.x+i.y*i.y));n.r=M,e.forEach(Au)}}function Eu(n){n._pack_next=n._pack_prev=n}function Au(n){delete n._pack_next,delete n._pack_prev}function Cu(n,t,e,r){var u=n.children;if(n.x=t+=r*n.x,n.y=e+=r*n.y,n.r*=r,u)for(var i=-1,a=u.length;++i<a;)Cu(u[i],t,e,r)}function zu(n,t,e){var r=n.r+e.r,u=t.x-n.x,i=t.y-n.y;if(r&&(u||i)){var a=t.r+e.r,o=u*u+i*i;a*=a,r*=r;var l=.5+(r-a)/(2*o),c=Math.sqrt(Math.max(0,2*a*(r+o)-(r-=o)*r-a*a))/(2*o);e.x=n.x+l*u+c*i,e.y=n.y+l*i-c*u}else e.x=n.x+r,e.y=n.y}function Lu(n,t){return n.parent==t.parent?1:2}function qu(n){var t=n.children;return t.length?t[0]:n.t}function Tu(n){var t,e=n.children;return(t=e.length)?e[t-1]:n.t}function Ru(n,t,e){var r=e/(t.i-n.i);t.c-=r,t.s+=e,n.c+=r,t.z+=e,t.m+=e}function Du(n){for(var t,e=0,r=0,u=n.children,i=u.length;--i>=0;)t=u[i],t.z+=e,t.m+=e,e+=t.s+(r+=t.c)}function Pu(n,t,e){return n.a.parent===t.parent?n.a:e}function ju(n){return 1+oa.max(n,function(n){return n.y})}function Uu(n){return n.reduce(function(n,t){return n+t.x},0)/n.length}function Fu(n){var t=n.children;return t&&t.length?Fu(t[0]):n}function Hu(n){var t,e=n.children;return e&&(t=e.length)?Hu(e[t-1]):n}function Ou(n){return{x:n.x,y:n.y,dx:n.dx,dy:n.dy}}function Iu(n,t){var e=n.x+t[3],r=n.y+t[0],u=n.dx-t[1]-t[3],i=n.dy-t[0]-t[2];return 0>u&&(e+=u/2,u=0),0>i&&(r+=i/2,i=0),{x:e,y:r,dx:u,dy:i}}function Yu(n){var t=n[0],e=n[n.length-1];return e>t?[t,e]:[e,t]}function Zu(n){return n.rangeExtent?n.rangeExtent():Yu(n.range())}function Vu(n,t,e,r){var u=e(n[0],n[1]),i=r(t[0],t[1]);return function(n){return i(u(n))}}function Xu(n,t){var e,r=0,u=n.length-1,i=n[r],a=n[u];return i>a&&(e=r,r=u,u=e,e=i,i=a,a=e),n[r]=t.floor(i),n[u]=t.ceil(a),n}function $u(n){return n?{floor:function(t){return Math.floor(t/n)*n},ceil:function(t){return Math.ceil(t/n)*n}}:wl}function Bu(n,t,e,r){var u=[],i=[],a=0,o=Math.min(n.length,t.length)-1;for(n[o]<n[0]&&(n=n.slice().reverse(),t=t.slice().reverse());++a<=o;)u.push(e(n[a-1],n[a])),i.push(r(t[a-1],t[a]));return function(t){var e=oa.bisect(n,t,1,o)-1;return i[e](u[e](t))}}function Wu(n,t,e,r){function u(){var u=Math.min(n.length,t.length)>2?Bu:Vu,l=r?Wr:Br;return a=u(n,t,l,e),o=u(t,n,l,Mr),i}function i(n){return a(n)}var a,o;return i.invert=function(n){return o(n)},i.domain=function(t){return arguments.length?(n=t.map(Number),u()):n},i.range=function(n){return arguments.length?(t=n,u()):t},i.rangeRound=function(n){return i.range(n).interpolate(jr)},i.clamp=function(n){return arguments.length?(r=n,u()):r},i.interpolate=function(n){return arguments.length?(e=n,u()):e},i.ticks=function(t){return Qu(n,t)},i.tickFormat=function(t,e){return ni(n,t,e)},i.nice=function(t){return Gu(n,t),u()},i.copy=function(){return Wu(n,t,e,r)},u()}function Ju(n,t){return oa.rebind(n,t,"range","rangeRound","interpolate","clamp")}function Gu(n,t){return Xu(n,$u(Ku(n,t)[2]))}function Ku(n,t){null==t&&(t=10);var e=Yu(n),r=e[1]-e[0],u=Math.pow(10,Math.floor(Math.log(r/t)/Math.LN10)),i=t/r*u;return.15>=i?u*=10:.35>=i?u*=5:.75>=i&&(u*=2),e[0]=Math.ceil(e[0]/u)*u,e[1]=Math.floor(e[1]/u)*u+.5*u,e[2]=u,e}function Qu(n,t){return oa.range.apply(oa,Ku(n,t))}function ni(n,t,e){var r=Ku(n,t);if(e){var u=so.exec(e);if(u.shift(),"s"===u[8]){var i=oa.formatPrefix(Math.max(Ma(r[0]),Ma(r[1])));return u[7]||(u[7]="."+ti(i.scale(r[2]))),u[8]="f",e=oa.format(u.join("")),function(n){return e(i.scale(n))+i.symbol}}u[7]||(u[7]="."+ei(u[8],r)),e=u.join("")}else e=",."+ti(r[2])+"f";return oa.format(e)}function ti(n){return-Math.floor(Math.log(n)/Math.LN10+.01)}function ei(n,t){var e=ti(t[2]);return n in Sl?Math.abs(e-ti(Math.max(Ma(t[0]),Ma(t[1]))))+ +("e"!==n):e-2*("%"===n)}function ri(n,t,e,r){function u(n){return(e?Math.log(0>n?0:n):-Math.log(n>0?0:-n))/Math.log(t)}function i(n){return e?Math.pow(t,n):-Math.pow(t,-n)}function a(t){return n(u(t))}return a.invert=function(t){return i(n.invert(t))},a.domain=function(t){return arguments.length?(e=t[0]>=0,n.domain((r=t.map(Number)).map(u)),a):r},a.base=function(e){return arguments.length?(t=+e,n.domain(r.map(u)),a):t},a.nice=function(){var t=Xu(r.map(u),e?Math:Nl);return n.domain(t),r=t.map(i),a},a.ticks=function(){var n=Yu(r),a=[],o=n[0],l=n[1],c=Math.floor(u(o)),s=Math.ceil(u(l)),f=t%1?2:t;if(isFinite(s-c)){if(e){for(;s>c;c++)for(var h=1;f>h;h++)a.push(i(c)*h);a.push(i(c))}else for(a.push(i(c));c++<s;)for(var h=f-1;h>0;h--)a.push(i(c)*h);for(c=0;a[c]<o;c++);for(s=a.length;a[s-1]>l;s--);a=a.slice(c,s)}return a},a.tickFormat=function(n,t){if(!arguments.length)return kl;arguments.length<2?t=kl:"function"!=typeof t&&(t=oa.format(t));var r,o=Math.max(.1,n/a.ticks().length),l=e?(r=1e-12,Math.ceil):(r=-1e-12,Math.floor);return function(n){return n/i(l(u(n)+r))<=o?t(n):""}},a.copy=function(){return ri(n.copy(),t,e,r)},Ju(a,n)}function ui(n,t,e){function r(t){return n(u(t))}var u=ii(t),i=ii(1/t);return r.invert=function(t){return i(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain((e=t.map(Number)).map(u)),r):e},r.ticks=function(n){return Qu(e,n)},r.tickFormat=function(n,t){return ni(e,n,t)},r.nice=function(n){return r.domain(Gu(e,n))},r.exponent=function(a){return arguments.length?(u=ii(t=a),i=ii(1/t),n.domain(e.map(u)),r):t},r.copy=function(){return ui(n.copy(),t,e)},Ju(r,n)}function ii(n){return function(t){return 0>t?-Math.pow(-t,n):Math.pow(t,n)}}function ai(n,t){function e(e){return i[((u.get(e)||("range"===t.t?u.set(e,n.push(e)):NaN))-1)%i.length]}function r(t,e){return oa.range(n.length).map(function(n){return t+e*n})}var u,i,a;return e.domain=function(r){if(!arguments.length)return n;n=[],u=new c;for(var i,a=-1,o=r.length;++a<o;)u.has(i=r[a])||u.set(i,n.push(i));return e[t.t].apply(e,t.a)},e.range=function(n){return arguments.length?(i=n,a=0,t={t:"range",a:arguments},e):i},e.rangePoints=function(u,o){arguments.length<2&&(o=0);var l=u[0],c=u[1],s=n.length<2?(l=(l+c)/2,0):(c-l)/(n.length-1+o);return i=r(l+s*o/2,s),a=0,t={t:"rangePoints",a:arguments},e},e.rangeRoundPoints=function(u,o){arguments.length<2&&(o=0);var l=u[0],c=u[1],s=n.length<2?(l=c=Math.round((l+c)/2),0):(c-l)/(n.length-1+o)|0;return i=r(l+Math.round(s*o/2+(c-l-(n.length-1+o)*s)/2),s),a=0,t={t:"rangeRoundPoints",a:arguments},e},e.rangeBands=function(u,o,l){arguments.length<2&&(o=0),arguments.length<3&&(l=o);var c=u[1]<u[0],s=u[c-0],f=u[1-c],h=(f-s)/(n.length-o+2*l);return i=r(s+h*l,h),c&&i.reverse(),a=h*(1-o),t={t:"rangeBands",a:arguments},e},e.rangeRoundBands=function(u,o,l){arguments.length<2&&(o=0),arguments.length<3&&(l=o);var c=u[1]<u[0],s=u[c-0],f=u[1-c],h=Math.floor((f-s)/(n.length-o+2*l));return i=r(s+Math.round((f-s-(n.length-o)*h)/2),h),c&&i.reverse(),a=Math.round(h*(1-o)),t={t:"rangeRoundBands",a:arguments},e},e.rangeBand=function(){return a},e.rangeExtent=function(){return Yu(t.a[0])},e.copy=function(){return ai(n,t)},e.domain(n)}function oi(n,t){function i(){var e=0,r=t.length;for(o=[];++e<r;)o[e-1]=oa.quantile(n,e/r);return a}function a(n){return isNaN(n=+n)?void 0:t[oa.bisect(o,n)]}var o;return a.domain=function(t){return arguments.length?(n=t.map(r).filter(u).sort(e),i()):n},a.range=function(n){return arguments.length?(t=n,i()):t},a.quantiles=function(){return o},a.invertExtent=function(e){return e=t.indexOf(e),0>e?[NaN,NaN]:[e>0?o[e-1]:n[0],e<o.length?o[e]:n[n.length-1]]},a.copy=function(){return oi(n,t)},i()}function li(n,t,e){function r(t){return e[Math.max(0,Math.min(a,Math.floor(i*(t-n))))]}function u(){return i=e.length/(t-n),a=e.length-1,r}var i,a;return r.domain=function(e){return arguments.length?(n=+e[0],t=+e[e.length-1],u()):[n,t]},r.range=function(n){return arguments.length?(e=n,u()):e},r.invertExtent=function(t){return t=e.indexOf(t),t=0>t?NaN:t/i+n,[t,t+1/i]},r.copy=function(){return li(n,t,e)},u()}function ci(n,t){function e(e){return e>=e?t[oa.bisect(n,e)]:void 0}return e.domain=function(t){return arguments.length?(n=t,e):n},e.range=function(n){return arguments.length?(t=n,e):t},e.invertExtent=function(e){return e=t.indexOf(e),[n[e-1],n[e]]},e.copy=function(){return ci(n,t)},e}function si(n){function t(n){return+n}return t.invert=t,t.domain=t.range=function(e){return arguments.length?(n=e.map(t),t):n},t.ticks=function(t){return Qu(n,t)},t.tickFormat=function(t,e){return ni(n,t,e)},t.copy=function(){return si(n)},t}function fi(){return 0}function hi(n){return n.innerRadius}function gi(n){return n.outerRadius}function pi(n){return n.startAngle}function vi(n){return n.endAngle}function di(n){return n&&n.padAngle}function mi(n,t,e,r){return(n-e)*t-(t-r)*n>0?0:1}function yi(n,t,e,r,u){var i=n[0]-t[0],a=n[1]-t[1],o=(u?r:-r)/Math.sqrt(i*i+a*a),l=o*a,c=-o*i,s=n[0]+l,f=n[1]+c,h=t[0]+l,g=t[1]+c,p=(s+h)/2,v=(f+g)/2,d=h-s,m=g-f,y=d*d+m*m,M=e-r,x=s*g-h*f,b=(0>m?-1:1)*Math.sqrt(Math.max(0,M*M*y-x*x)),_=(x*m-d*b)/y,w=(-x*d-m*b)/y,S=(x*m+d*b)/y,k=(-x*d+m*b)/y,N=_-p,E=w-v,A=S-p,C=k-v;return N*N+E*E>A*A+C*C&&(_=S,w=k),[[_-l,w-c],[_*e/M,w*e/M]]}function Mi(n){function t(t){function a(){c.push("M",i(n(s),o))}for(var l,c=[],s=[],f=-1,h=t.length,g=En(e),p=En(r);++f<h;)u.call(this,l=t[f],f)?s.push([+g.call(this,l,f),+p.call(this,l,f)]):s.length&&(a(),s=[]);return s.length&&a(),c.length?c.join(""):null}var e=Ce,r=ze,u=zt,i=xi,a=i.key,o=.7;return t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t.defined=function(n){return arguments.length?(u=n,t):u},t.interpolate=function(n){return arguments.length?(a="function"==typeof n?i=n:(i=ql.get(n)||xi).key,t):a},t.tension=function(n){return arguments.length?(o=n,t):o},t}function xi(n){return n.length>1?n.join("L"):n+"Z"}function bi(n){return n.join("L")+"Z"}function _i(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("H",(r[0]+(r=n[t])[0])/2,"V",r[1]);return e>1&&u.push("H",r[0]),u.join("")}function wi(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("V",(r=n[t])[1],"H",r[0]);return u.join("")}function Si(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("H",(r=n[t])[0],"V",r[1]);return u.join("")}function ki(n,t){return n.length<4?xi(n):n[1]+Ai(n.slice(1,-1),Ci(n,t))}function Ni(n,t){return n.length<3?bi(n):n[0]+Ai((n.push(n[0]),n),Ci([n[n.length-2]].concat(n,[n[1]]),t))}function Ei(n,t){return n.length<3?xi(n):n[0]+Ai(n,Ci(n,t))}function Ai(n,t){if(t.length<1||n.length!=t.length&&n.length!=t.length+2)return xi(n);var e=n.length!=t.length,r="",u=n[0],i=n[1],a=t[0],o=a,l=1;if(e&&(r+="Q"+(i[0]-2*a[0]/3)+","+(i[1]-2*a[1]/3)+","+i[0]+","+i[1],u=n[1],l=2),t.length>1){o=t[1],i=n[l],l++,r+="C"+(u[0]+a[0])+","+(u[1]+a[1])+","+(i[0]-o[0])+","+(i[1]-o[1])+","+i[0]+","+i[1];for(var c=2;c<t.length;c++,l++)i=n[l],o=t[c],r+="S"+(i[0]-o[0])+","+(i[1]-o[1])+","+i[0]+","+i[1]}if(e){var s=n[l];r+="Q"+(i[0]+2*o[0]/3)+","+(i[1]+2*o[1]/3)+","+s[0]+","+s[1]}return r}function Ci(n,t){for(var e,r=[],u=(1-t)/2,i=n[0],a=n[1],o=1,l=n.length;++o<l;)e=i,i=a,a=n[o],r.push([u*(a[0]-e[0]),u*(a[1]-e[1])]);return r}function zi(n){if(n.length<3)return xi(n);var t=1,e=n.length,r=n[0],u=r[0],i=r[1],a=[u,u,u,(r=n[1])[0]],o=[i,i,i,r[1]],l=[u,",",i,"L",Ri(Dl,a),",",Ri(Dl,o)];for(n.push(n[e-1]);++t<=e;)r=n[t],a.shift(),a.push(r[0]),o.shift(),o.push(r[1]),Di(l,a,o);return n.pop(),l.push("L",r),l.join("")}function Li(n){if(n.length<4)return xi(n);for(var t,e=[],r=-1,u=n.length,i=[0],a=[0];++r<3;)t=n[r],i.push(t[0]),a.push(t[1]);for(e.push(Ri(Dl,i)+","+Ri(Dl,a)),--r;++r<u;)t=n[r],i.shift(),i.push(t[0]),a.shift(),a.push(t[1]),Di(e,i,a);return e.join("")}function qi(n){for(var t,e,r=-1,u=n.length,i=u+4,a=[],o=[];++r<4;)e=n[r%u],a.push(e[0]),o.push(e[1]);for(t=[Ri(Dl,a),",",Ri(Dl,o)],--r;++r<i;)e=n[r%u],a.shift(),a.push(e[0]),o.shift(),o.push(e[1]),Di(t,a,o);return t.join("")}function Ti(n,t){var e=n.length-1;if(e)for(var r,u,i=n[0][0],a=n[0][1],o=n[e][0]-i,l=n[e][1]-a,c=-1;++c<=e;)r=n[c],u=c/e,r[0]=t*r[0]+(1-t)*(i+u*o),r[1]=t*r[1]+(1-t)*(a+u*l);return zi(n)}function Ri(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]+n[3]*t[3]}function Di(n,t,e){n.push("C",Ri(Tl,t),",",Ri(Tl,e),",",Ri(Rl,t),",",Ri(Rl,e),",",Ri(Dl,t),",",Ri(Dl,e))}function Pi(n,t){return(t[1]-n[1])/(t[0]-n[0])}function ji(n){for(var t=0,e=n.length-1,r=[],u=n[0],i=n[1],a=r[0]=Pi(u,i);++t<e;)r[t]=(a+(a=Pi(u=i,i=n[t+1])))/2;return r[t]=a,r}function Ui(n){for(var t,e,r,u,i=[],a=ji(n),o=-1,l=n.length-1;++o<l;)t=Pi(n[o],n[o+1]),Ma(t)<Da?a[o]=a[o+1]=0:(e=a[o]/t,r=a[o+1]/t,u=e*e+r*r,u>9&&(u=3*t/Math.sqrt(u),a[o]=u*e,a[o+1]=u*r));for(o=-1;++o<=l;)u=(n[Math.min(l,o+1)][0]-n[Math.max(0,o-1)][0])/(6*(1+a[o]*a[o])),i.push([u||0,a[o]*u||0]);return i}function Fi(n){return n.length<3?xi(n):n[0]+Ai(n,Ui(n))}function Hi(n){for(var t,e,r,u=-1,i=n.length;++u<i;)t=n[u],e=t[0],r=t[1]-Ha,t[0]=e*Math.cos(r),t[1]=e*Math.sin(r);return n}function Oi(n){function t(t){function l(){v.push("M",o(n(m),f),s,c(n(d.reverse()),f),"Z")}for(var h,g,p,v=[],d=[],m=[],y=-1,M=t.length,x=En(e),b=En(u),_=e===r?function(){return g;
}:En(r),w=u===i?function(){return p}:En(i);++y<M;)a.call(this,h=t[y],y)?(d.push([g=+x.call(this,h,y),p=+b.call(this,h,y)]),m.push([+_.call(this,h,y),+w.call(this,h,y)])):d.length&&(l(),d=[],m=[]);return d.length&&l(),v.length?v.join(""):null}var e=Ce,r=Ce,u=0,i=ze,a=zt,o=xi,l=o.key,c=o,s="L",f=.7;return t.x=function(n){return arguments.length?(e=r=n,t):r},t.x0=function(n){return arguments.length?(e=n,t):e},t.x1=function(n){return arguments.length?(r=n,t):r},t.y=function(n){return arguments.length?(u=i=n,t):i},t.y0=function(n){return arguments.length?(u=n,t):u},t.y1=function(n){return arguments.length?(i=n,t):i},t.defined=function(n){return arguments.length?(a=n,t):a},t.interpolate=function(n){return arguments.length?(l="function"==typeof n?o=n:(o=ql.get(n)||xi).key,c=o.reverse||o,s=o.closed?"M":"L",t):l},t.tension=function(n){return arguments.length?(f=n,t):f},t}function Ii(n){return n.radius}function Yi(n){return[n.x,n.y]}function Zi(n){return function(){var t=n.apply(this,arguments),e=t[0],r=t[1]-Ha;return[e*Math.cos(r),e*Math.sin(r)]}}function Vi(){return 64}function Xi(){return"circle"}function $i(n){var t=Math.sqrt(n/ja);return"M0,"+t+"A"+t+","+t+" 0 1,1 0,"+-t+"A"+t+","+t+" 0 1,1 0,"+t+"Z"}function Bi(n){return function(){var t,e,r;(t=this[n])&&(r=t[e=t.active])&&(r.timer.c=null,r.timer.t=NaN,--t.count?delete t[e]:delete this[n],t.active+=.5,r.event&&r.event.interrupt.call(this,this.__data__,r.index))}}function Wi(n,t,e){return Sa(n,Il),n.namespace=t,n.id=e,n}function Ji(n,t,e,r){var u=n.id,i=n.namespace;return Y(n,"function"==typeof e?function(n,a,o){n[i][u].tween.set(t,r(e.call(n,n.__data__,a,o)))}:(e=r(e),function(n){n[i][u].tween.set(t,e)}))}function Gi(n){return null==n&&(n=""),function(){this.textContent=n}}function Ki(n){return null==n?"__transition__":"__transition_"+n+"__"}function Qi(n,t,e,r,u){function i(n){var t=v.delay;return s.t=t+l,n>=t?a(n-t):void(s.c=a)}function a(e){var u=p.active,i=p[u];i&&(i.timer.c=null,i.timer.t=NaN,--p.count,delete p[u],i.event&&i.event.interrupt.call(n,n.__data__,i.index));for(var a in p)if(r>+a){var c=p[a];c.timer.c=null,c.timer.t=NaN,--p.count,delete p[a]}s.c=o,qn(function(){return s.c&&o(e||1)&&(s.c=null,s.t=NaN),1},0,l),p.active=r,v.event&&v.event.start.call(n,n.__data__,t),g=[],v.tween.forEach(function(e,r){(r=r.call(n,n.__data__,t))&&g.push(r)}),h=v.ease,f=v.duration}function o(u){for(var i=u/f,a=h(i),o=g.length;o>0;)g[--o].call(n,a);return i>=1?(v.event&&v.event.end.call(n,n.__data__,t),--p.count?delete p[r]:delete n[e],1):void 0}var l,s,f,h,g,p=n[e]||(n[e]={active:0,count:0}),v=p[r];v||(l=u.time,s=qn(i,0,l),v=p[r]={tween:new c,time:l,timer:s,delay:u.delay,duration:u.duration,ease:u.ease,index:t},u=null,++p.count)}function na(n,t,e){n.attr("transform",function(n){var r=t(n);return"translate("+(isFinite(r)?r:e(n))+",0)"})}function ta(n,t,e){n.attr("transform",function(n){var r=t(n);return"translate(0,"+(isFinite(r)?r:e(n))+")"})}function ea(n){return n.toISOString()}function ra(n,t,e){function r(t){return n(t)}function u(n,e){var r=n[1]-n[0],u=r/e,i=oa.bisect(Gl,u);return i==Gl.length?[t.year,Ku(n.map(function(n){return n/31536e6}),e)[2]]:i?t[u/Gl[i-1]<Gl[i]/u?i-1:i]:[nc,Ku(n,e)[2]]}return r.invert=function(t){return ua(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain(t),r):n.domain().map(ua)},r.nice=function(n,t){function e(e){return!isNaN(e)&&!n.range(e,ua(+e+1),t).length}var i=r.domain(),a=Yu(i),o=null==n?u(a,10):"number"==typeof n&&u(a,n);return o&&(n=o[0],t=o[1]),r.domain(Xu(i,t>1?{floor:function(t){for(;e(t=n.floor(t));)t=ua(t-1);return t},ceil:function(t){for(;e(t=n.ceil(t));)t=ua(+t+1);return t}}:n))},r.ticks=function(n,t){var e=Yu(r.domain()),i=null==n?u(e,10):"number"==typeof n?u(e,n):!n.range&&[{range:n},t];return i&&(n=i[0],t=i[1]),n.range(e[0],ua(+e[1]+1),1>t?1:t)},r.tickFormat=function(){return e},r.copy=function(){return ra(n.copy(),t,e)},Ju(r,n)}function ua(n){return new Date(n)}function ia(n){return JSON.parse(n.responseText)}function aa(n){var t=sa.createRange();return t.selectNode(sa.body),t.createContextualFragment(n.responseText)}var oa={version:"3.5.10"},la=[].slice,ca=function(n){return la.call(n)},sa=this.document;if(sa)try{ca(sa.documentElement.childNodes)[0].nodeType}catch(fa){ca=function(n){for(var t=n.length,e=new Array(t);t--;)e[t]=n[t];return e}}if(Date.now||(Date.now=function(){return+new Date}),sa)try{sa.createElement("DIV").style.setProperty("opacity",0,"")}catch(ha){var ga=this.Element.prototype,pa=ga.setAttribute,va=ga.setAttributeNS,da=this.CSSStyleDeclaration.prototype,ma=da.setProperty;ga.setAttribute=function(n,t){pa.call(this,n,t+"")},ga.setAttributeNS=function(n,t,e){va.call(this,n,t,e+"")},da.setProperty=function(n,t,e){ma.call(this,n,t+"",e)}}oa.ascending=e,oa.descending=function(n,t){return n>t?-1:t>n?1:t>=n?0:NaN},oa.min=function(n,t){var e,r,u=-1,i=n.length;if(1===arguments.length){for(;++u<i;)if(null!=(r=n[u])&&r>=r){e=r;break}for(;++u<i;)null!=(r=n[u])&&e>r&&(e=r)}else{for(;++u<i;)if(null!=(r=t.call(n,n[u],u))&&r>=r){e=r;break}for(;++u<i;)null!=(r=t.call(n,n[u],u))&&e>r&&(e=r)}return e},oa.max=function(n,t){var e,r,u=-1,i=n.length;if(1===arguments.length){for(;++u<i;)if(null!=(r=n[u])&&r>=r){e=r;break}for(;++u<i;)null!=(r=n[u])&&r>e&&(e=r)}else{for(;++u<i;)if(null!=(r=t.call(n,n[u],u))&&r>=r){e=r;break}for(;++u<i;)null!=(r=t.call(n,n[u],u))&&r>e&&(e=r)}return e},oa.extent=function(n,t){var e,r,u,i=-1,a=n.length;if(1===arguments.length){for(;++i<a;)if(null!=(r=n[i])&&r>=r){e=u=r;break}for(;++i<a;)null!=(r=n[i])&&(e>r&&(e=r),r>u&&(u=r))}else{for(;++i<a;)if(null!=(r=t.call(n,n[i],i))&&r>=r){e=u=r;break}for(;++i<a;)null!=(r=t.call(n,n[i],i))&&(e>r&&(e=r),r>u&&(u=r))}return[e,u]},oa.sum=function(n,t){var e,r=0,i=n.length,a=-1;if(1===arguments.length)for(;++a<i;)u(e=+n[a])&&(r+=e);else for(;++a<i;)u(e=+t.call(n,n[a],a))&&(r+=e);return r},oa.mean=function(n,t){var e,i=0,a=n.length,o=-1,l=a;if(1===arguments.length)for(;++o<a;)u(e=r(n[o]))?i+=e:--l;else for(;++o<a;)u(e=r(t.call(n,n[o],o)))?i+=e:--l;return l?i/l:void 0},oa.quantile=function(n,t){var e=(n.length-1)*t+1,r=Math.floor(e),u=+n[r-1],i=e-r;return i?u+i*(n[r]-u):u},oa.median=function(n,t){var i,a=[],o=n.length,l=-1;if(1===arguments.length)for(;++l<o;)u(i=r(n[l]))&&a.push(i);else for(;++l<o;)u(i=r(t.call(n,n[l],l)))&&a.push(i);return a.length?oa.quantile(a.sort(e),.5):void 0},oa.variance=function(n,t){var e,i,a=n.length,o=0,l=0,c=-1,s=0;if(1===arguments.length)for(;++c<a;)u(e=r(n[c]))&&(i=e-o,o+=i/++s,l+=i*(e-o));else for(;++c<a;)u(e=r(t.call(n,n[c],c)))&&(i=e-o,o+=i/++s,l+=i*(e-o));return s>1?l/(s-1):void 0},oa.deviation=function(){var n=oa.variance.apply(this,arguments);return n?Math.sqrt(n):n};var ya=i(e);oa.bisectLeft=ya.left,oa.bisect=oa.bisectRight=ya.right,oa.bisector=function(n){return i(1===n.length?function(t,r){return e(n(t),r)}:n)},oa.shuffle=function(n,t,e){(i=arguments.length)<3&&(e=n.length,2>i&&(t=0));for(var r,u,i=e-t;i;)u=Math.random()*i--|0,r=n[i+t],n[i+t]=n[u+t],n[u+t]=r;return n},oa.permute=function(n,t){for(var e=t.length,r=new Array(e);e--;)r[e]=n[t[e]];return r},oa.pairs=function(n){for(var t,e=0,r=n.length-1,u=n[0],i=new Array(0>r?0:r);r>e;)i[e]=[t=u,u=n[++e]];return i},oa.zip=function(){if(!(r=arguments.length))return[];for(var n=-1,t=oa.min(arguments,a),e=new Array(t);++n<t;)for(var r,u=-1,i=e[n]=new Array(r);++u<r;)i[u]=arguments[u][n];return e},oa.transpose=function(n){return oa.zip.apply(oa,n)},oa.keys=function(n){var t=[];for(var e in n)t.push(e);return t},oa.values=function(n){var t=[];for(var e in n)t.push(n[e]);return t},oa.entries=function(n){var t=[];for(var e in n)t.push({key:e,value:n[e]});return t},oa.merge=function(n){for(var t,e,r,u=n.length,i=-1,a=0;++i<u;)a+=n[i].length;for(e=new Array(a);--u>=0;)for(r=n[u],t=r.length;--t>=0;)e[--a]=r[t];return e};var Ma=Math.abs;oa.range=function(n,t,e){if(arguments.length<3&&(e=1,arguments.length<2&&(t=n,n=0)),(t-n)/e===1/0)throw new Error("infinite range");var r,u=[],i=o(Ma(e)),a=-1;if(n*=i,t*=i,e*=i,0>e)for(;(r=n+e*++a)>t;)u.push(r/i);else for(;(r=n+e*++a)<t;)u.push(r/i);return u},oa.map=function(n,t){var e=new c;if(n instanceof c)n.forEach(function(n,t){e.set(n,t)});else if(Array.isArray(n)){var r,u=-1,i=n.length;if(1===arguments.length)for(;++u<i;)e.set(u,n[u]);else for(;++u<i;)e.set(t.call(n,r=n[u],u),r)}else for(var a in n)e.set(a,n[a]);return e};var xa="__proto__",ba="\x00";l(c,{has:h,get:function(n){return this._[s(n)]},set:function(n,t){return this._[s(n)]=t},remove:g,keys:p,values:function(){var n=[];for(var t in this._)n.push(this._[t]);return n},entries:function(){var n=[];for(var t in this._)n.push({key:f(t),value:this._[t]});return n},size:v,empty:d,forEach:function(n){for(var t in this._)n.call(this,f(t),this._[t])}}),oa.nest=function(){function n(t,a,o){if(o>=i.length)return r?r.call(u,a):e?a.sort(e):a;for(var l,s,f,h,g=-1,p=a.length,v=i[o++],d=new c;++g<p;)(h=d.get(l=v(s=a[g])))?h.push(s):d.set(l,[s]);return t?(s=t(),f=function(e,r){s.set(e,n(t,r,o))}):(s={},f=function(e,r){s[e]=n(t,r,o)}),d.forEach(f),s}function t(n,e){if(e>=i.length)return n;var r=[],u=a[e++];return n.forEach(function(n,u){r.push({key:n,values:t(u,e)})}),u?r.sort(function(n,t){return u(n.key,t.key)}):r}var e,r,u={},i=[],a=[];return u.map=function(t,e){return n(e,t,0)},u.entries=function(e){return t(n(oa.map,e,0),0)},u.key=function(n){return i.push(n),u},u.sortKeys=function(n){return a[i.length-1]=n,u},u.sortValues=function(n){return e=n,u},u.rollup=function(n){return r=n,u},u},oa.set=function(n){var t=new m;if(n)for(var e=0,r=n.length;r>e;++e)t.add(n[e]);return t},l(m,{has:h,add:function(n){return this._[s(n+="")]=!0,n},remove:g,values:p,size:v,empty:d,forEach:function(n){for(var t in this._)n.call(this,f(t))}}),oa.behavior={},oa.rebind=function(n,t){for(var e,r=1,u=arguments.length;++r<u;)n[e=arguments[r]]=M(n,t,t[e]);return n};var _a=["webkit","ms","moz","Moz","o","O"];oa.dispatch=function(){for(var n=new _,t=-1,e=arguments.length;++t<e;)n[arguments[t]]=w(n);return n},_.prototype.on=function(n,t){var e=n.indexOf("."),r="";if(e>=0&&(r=n.slice(e+1),n=n.slice(0,e)),n)return arguments.length<2?this[n].on(r):this[n].on(r,t);if(2===arguments.length){if(null==t)for(n in this)this.hasOwnProperty(n)&&this[n].on(r,null);return this}},oa.event=null,oa.requote=function(n){return n.replace(wa,"\\$&")};var wa=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,Sa={}.__proto__?function(n,t){n.__proto__=t}:function(n,t){for(var e in t)n[e]=t[e]},ka=function(n,t){return t.querySelector(n)},Na=function(n,t){return t.querySelectorAll(n)},Ea=function(n,t){var e=n.matches||n[x(n,"matchesSelector")];return(Ea=function(n,t){return e.call(n,t)})(n,t)};"function"==typeof Sizzle&&(ka=function(n,t){return Sizzle(n,t)[0]||null},Na=Sizzle,Ea=Sizzle.matchesSelector),oa.selection=function(){return oa.select(sa.documentElement)};var Aa=oa.selection.prototype=[];Aa.select=function(n){var t,e,r,u,i=[];n=A(n);for(var a=-1,o=this.length;++a<o;){i.push(t=[]),t.parentNode=(r=this[a]).parentNode;for(var l=-1,c=r.length;++l<c;)(u=r[l])?(t.push(e=n.call(u,u.__data__,l,a)),e&&"__data__"in u&&(e.__data__=u.__data__)):t.push(null)}return E(i)},Aa.selectAll=function(n){var t,e,r=[];n=C(n);for(var u=-1,i=this.length;++u<i;)for(var a=this[u],o=-1,l=a.length;++o<l;)(e=a[o])&&(r.push(t=ca(n.call(e,e.__data__,o,u))),t.parentNode=e);return E(r)};var Ca={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};oa.ns={prefix:Ca,qualify:function(n){var t=n.indexOf(":"),e=n;return t>=0&&"xmlns"!==(e=n.slice(0,t))&&(n=n.slice(t+1)),Ca.hasOwnProperty(e)?{space:Ca[e],local:n}:n}},Aa.attr=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node();return n=oa.ns.qualify(n),n.local?e.getAttributeNS(n.space,n.local):e.getAttribute(n)}for(t in n)this.each(z(t,n[t]));return this}return this.each(z(n,t))},Aa.classed=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node(),r=(n=T(n)).length,u=-1;if(t=e.classList){for(;++u<r;)if(!t.contains(n[u]))return!1}else for(t=e.getAttribute("class");++u<r;)if(!q(n[u]).test(t))return!1;return!0}for(t in n)this.each(R(t,n[t]));return this}return this.each(R(n,t))},Aa.style=function(n,e,r){var u=arguments.length;if(3>u){if("string"!=typeof n){2>u&&(e="");for(r in n)this.each(P(r,n[r],e));return this}if(2>u){var i=this.node();return t(i).getComputedStyle(i,null).getPropertyValue(n)}r=""}return this.each(P(n,e,r))},Aa.property=function(n,t){if(arguments.length<2){if("string"==typeof n)return this.node()[n];for(t in n)this.each(j(t,n[t]));return this}return this.each(j(n,t))},Aa.text=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.textContent=null==t?"":t}:null==n?function(){this.textContent=""}:function(){this.textContent=n}):this.node().textContent},Aa.html=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.innerHTML=null==t?"":t}:null==n?function(){this.innerHTML=""}:function(){this.innerHTML=n}):this.node().innerHTML},Aa.append=function(n){return n=U(n),this.select(function(){return this.appendChild(n.apply(this,arguments))})},Aa.insert=function(n,t){return n=U(n),t=A(t),this.select(function(){return this.insertBefore(n.apply(this,arguments),t.apply(this,arguments)||null)})},Aa.remove=function(){return this.each(F)},Aa.data=function(n,t){function e(n,e){var r,u,i,a=n.length,f=e.length,h=Math.min(a,f),g=new Array(f),p=new Array(f),v=new Array(a);if(t){var d,m=new c,y=new Array(a);for(r=-1;++r<a;)(u=n[r])&&(m.has(d=t.call(u,u.__data__,r))?v[r]=u:m.set(d,u),y[r]=d);for(r=-1;++r<f;)(u=m.get(d=t.call(e,i=e[r],r)))?u!==!0&&(g[r]=u,u.__data__=i):p[r]=H(i),m.set(d,!0);for(r=-1;++r<a;)r in y&&m.get(y[r])!==!0&&(v[r]=n[r])}else{for(r=-1;++r<h;)u=n[r],i=e[r],u?(u.__data__=i,g[r]=u):p[r]=H(i);for(;f>r;++r)p[r]=H(e[r]);for(;a>r;++r)v[r]=n[r]}p.update=g,p.parentNode=g.parentNode=v.parentNode=n.parentNode,o.push(p),l.push(g),s.push(v)}var r,u,i=-1,a=this.length;if(!arguments.length){for(n=new Array(a=(r=this[0]).length);++i<a;)(u=r[i])&&(n[i]=u.__data__);return n}var o=Z([]),l=E([]),s=E([]);if("function"==typeof n)for(;++i<a;)e(r=this[i],n.call(r,r.parentNode.__data__,i));else for(;++i<a;)e(r=this[i],n);return l.enter=function(){return o},l.exit=function(){return s},l},Aa.datum=function(n){return arguments.length?this.property("__data__",n):this.property("__data__")},Aa.filter=function(n){var t,e,r,u=[];"function"!=typeof n&&(n=O(n));for(var i=0,a=this.length;a>i;i++){u.push(t=[]),t.parentNode=(e=this[i]).parentNode;for(var o=0,l=e.length;l>o;o++)(r=e[o])&&n.call(r,r.__data__,o,i)&&t.push(r)}return E(u)},Aa.order=function(){for(var n=-1,t=this.length;++n<t;)for(var e,r=this[n],u=r.length-1,i=r[u];--u>=0;)(e=r[u])&&(i&&i!==e.nextSibling&&i.parentNode.insertBefore(e,i),i=e);return this},Aa.sort=function(n){n=I.apply(this,arguments);for(var t=-1,e=this.length;++t<e;)this[t].sort(n);return this.order()},Aa.each=function(n){return Y(this,function(t,e,r){n.call(t,t.__data__,e,r)})},Aa.call=function(n){var t=ca(arguments);return n.apply(t[0]=this,t),this},Aa.empty=function(){return!this.node()},Aa.node=function(){for(var n=0,t=this.length;t>n;n++)for(var e=this[n],r=0,u=e.length;u>r;r++){var i=e[r];if(i)return i}return null},Aa.size=function(){var n=0;return Y(this,function(){++n}),n};var za=[];oa.selection.enter=Z,oa.selection.enter.prototype=za,za.append=Aa.append,za.empty=Aa.empty,za.node=Aa.node,za.call=Aa.call,za.size=Aa.size,za.select=function(n){for(var t,e,r,u,i,a=[],o=-1,l=this.length;++o<l;){r=(u=this[o]).update,a.push(t=[]),t.parentNode=u.parentNode;for(var c=-1,s=u.length;++c<s;)(i=u[c])?(t.push(r[c]=e=n.call(u.parentNode,i.__data__,c,o)),e.__data__=i.__data__):t.push(null)}return E(a)},za.insert=function(n,t){return arguments.length<2&&(t=V(this)),Aa.insert.call(this,n,t)},oa.select=function(t){var e;return"string"==typeof t?(e=[ka(t,sa)],e.parentNode=sa.documentElement):(e=[t],e.parentNode=n(t)),E([e])},oa.selectAll=function(n){var t;return"string"==typeof n?(t=ca(Na(n,sa)),t.parentNode=sa.documentElement):(t=ca(n),t.parentNode=null),E([t])},Aa.on=function(n,t,e){var r=arguments.length;if(3>r){if("string"!=typeof n){2>r&&(t=!1);for(e in n)this.each(X(e,n[e],t));return this}if(2>r)return(r=this.node()["__on"+n])&&r._;e=!1}return this.each(X(n,t,e))};var La=oa.map({mouseenter:"mouseover",mouseleave:"mouseout"});sa&&La.forEach(function(n){"on"+n in sa&&La.remove(n)});var qa,Ta=0;oa.mouse=function(n){return J(n,k())};var Ra=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;oa.touch=function(n,t,e){if(arguments.length<3&&(e=t,t=k().changedTouches),t)for(var r,u=0,i=t.length;i>u;++u)if((r=t[u]).identifier===e)return J(n,r)},oa.behavior.drag=function(){function n(){this.on("mousedown.drag",i).on("touchstart.drag",a)}function e(n,t,e,i,a){return function(){function o(){var n,e,r=t(h,v);r&&(n=r[0]-M[0],e=r[1]-M[1],p|=n|e,M=r,g({type:"drag",x:r[0]+c[0],y:r[1]+c[1],dx:n,dy:e}))}function l(){t(h,v)&&(m.on(i+d,null).on(a+d,null),y(p),g({type:"dragend"}))}var c,s=this,f=oa.event.target,h=s.parentNode,g=r.of(s,arguments),p=0,v=n(),d=".drag"+(null==v?"":"-"+v),m=oa.select(e(f)).on(i+d,o).on(a+d,l),y=W(f),M=t(h,v);u?(c=u.apply(s,arguments),c=[c.x-M[0],c.y-M[1]]):c=[0,0],g({type:"dragstart"})}}var r=N(n,"drag","dragstart","dragend"),u=null,i=e(b,oa.mouse,t,"mousemove","mouseup"),a=e(G,oa.touch,y,"touchmove","touchend");return n.origin=function(t){return arguments.length?(u=t,n):u},oa.rebind(n,r,"on")},oa.touches=function(n,t){return arguments.length<2&&(t=k().touches),t?ca(t).map(function(t){var e=J(n,t);return e.identifier=t.identifier,e}):[]};var Da=1e-6,Pa=Da*Da,ja=Math.PI,Ua=2*ja,Fa=Ua-Da,Ha=ja/2,Oa=ja/180,Ia=180/ja,Ya=Math.SQRT2,Za=2,Va=4;oa.interpolateZoom=function(n,t){var e,r,u=n[0],i=n[1],a=n[2],o=t[0],l=t[1],c=t[2],s=o-u,f=l-i,h=s*s+f*f;if(Pa>h)r=Math.log(c/a)/Ya,e=function(n){return[u+n*s,i+n*f,a*Math.exp(Ya*n*r)]};else{var g=Math.sqrt(h),p=(c*c-a*a+Va*h)/(2*a*Za*g),v=(c*c-a*a-Va*h)/(2*c*Za*g),d=Math.log(Math.sqrt(p*p+1)-p),m=Math.log(Math.sqrt(v*v+1)-v);r=(m-d)/Ya,e=function(n){var t=n*r,e=rn(d),o=a/(Za*g)*(e*un(Ya*t+d)-en(d));return[u+o*s,i+o*f,a*e/rn(Ya*t+d)]}}return e.duration=1e3*r,e},oa.behavior.zoom=function(){function n(n){n.on(L,f).on($a+".zoom",g).on("dblclick.zoom",p).on(R,h)}function e(n){return[(n[0]-k.x)/k.k,(n[1]-k.y)/k.k]}function r(n){return[n[0]*k.k+k.x,n[1]*k.k+k.y]}function u(n){k.k=Math.max(A[0],Math.min(A[1],n))}function i(n,t){t=r(t),k.x+=n[0]-t[0],k.y+=n[1]-t[1]}function a(t,e,r,a){t.__chart__={x:k.x,y:k.y,k:k.k},u(Math.pow(2,a)),i(d=e,r),t=oa.select(t),C>0&&(t=t.transition().duration(C)),t.call(n.event)}function o(){b&&b.domain(x.range().map(function(n){return(n-k.x)/k.k}).map(x.invert)),w&&w.domain(_.range().map(function(n){return(n-k.y)/k.k}).map(_.invert))}function l(n){z++||n({type:"zoomstart"})}function c(n){o(),n({type:"zoom",scale:k.k,translate:[k.x,k.y]})}function s(n){--z||(n({type:"zoomend"}),d=null)}function f(){function n(){o=1,i(oa.mouse(u),h),c(a)}function r(){f.on(q,null).on(T,null),g(o),s(a)}var u=this,a=D.of(u,arguments),o=0,f=oa.select(t(u)).on(q,n).on(T,r),h=e(oa.mouse(u)),g=W(u);Ol.call(u),l(a)}function h(){function n(){var n=oa.touches(p);return g=k.k,n.forEach(function(n){n.identifier in d&&(d[n.identifier]=e(n))}),n}function t(){var t=oa.event.target;oa.select(t).on(x,r).on(b,o),_.push(t);for(var e=oa.event.changedTouches,u=0,i=e.length;i>u;++u)d[e[u].identifier]=null;var l=n(),c=Date.now();if(1===l.length){if(500>c-M){var s=l[0];a(p,s,d[s.identifier],Math.floor(Math.log(k.k)/Math.LN2)+1),S()}M=c}else if(l.length>1){var s=l[0],f=l[1],h=s[0]-f[0],g=s[1]-f[1];m=h*h+g*g}}function r(){var n,t,e,r,a=oa.touches(p);Ol.call(p);for(var o=0,l=a.length;l>o;++o,r=null)if(e=a[o],r=d[e.identifier]){if(t)break;n=e,t=r}if(r){var s=(s=e[0]-n[0])*s+(s=e[1]-n[1])*s,f=m&&Math.sqrt(s/m);n=[(n[0]+e[0])/2,(n[1]+e[1])/2],t=[(t[0]+r[0])/2,(t[1]+r[1])/2],u(f*g)}M=null,i(n,t),c(v)}function o(){if(oa.event.touches.length){for(var t=oa.event.changedTouches,e=0,r=t.length;r>e;++e)delete d[t[e].identifier];for(var u in d)return void n()}oa.selectAll(_).on(y,null),w.on(L,f).on(R,h),N(),s(v)}var g,p=this,v=D.of(p,arguments),d={},m=0,y=".zoom-"+oa.event.changedTouches[0].identifier,x="touchmove"+y,b="touchend"+y,_=[],w=oa.select(p),N=W(p);t(),l(v),w.on(L,null).on(R,t)}function g(){var n=D.of(this,arguments);y?clearTimeout(y):(Ol.call(this),v=e(d=m||oa.mouse(this)),l(n)),y=setTimeout(function(){y=null,s(n)},50),S(),u(Math.pow(2,.002*Xa())*k.k),i(d,v),c(n)}function p(){var n=oa.mouse(this),t=Math.log(k.k)/Math.LN2;a(this,n,e(n),oa.event.shiftKey?Math.ceil(t)-1:Math.floor(t)+1)}var v,d,m,y,M,x,b,_,w,k={x:0,y:0,k:1},E=[960,500],A=Ba,C=250,z=0,L="mousedown.zoom",q="mousemove.zoom",T="mouseup.zoom",R="touchstart.zoom",D=N(n,"zoomstart","zoom","zoomend");return $a||($a="onwheel"in sa?(Xa=function(){return-oa.event.deltaY*(oa.event.deltaMode?120:1)},"wheel"):"onmousewheel"in sa?(Xa=function(){return oa.event.wheelDelta},"mousewheel"):(Xa=function(){return-oa.event.detail},"MozMousePixelScroll")),n.event=function(n){n.each(function(){var n=D.of(this,arguments),t=k;Fl?oa.select(this).transition().each("start.zoom",function(){k=this.__chart__||{x:0,y:0,k:1},l(n)}).tween("zoom:zoom",function(){var e=E[0],r=E[1],u=d?d[0]:e/2,i=d?d[1]:r/2,a=oa.interpolateZoom([(u-k.x)/k.k,(i-k.y)/k.k,e/k.k],[(u-t.x)/t.k,(i-t.y)/t.k,e/t.k]);return function(t){var r=a(t),o=e/r[2];this.__chart__=k={x:u-r[0]*o,y:i-r[1]*o,k:o},c(n)}}).each("interrupt.zoom",function(){s(n)}).each("end.zoom",function(){s(n)}):(this.__chart__=k,l(n),c(n),s(n))})},n.translate=function(t){return arguments.length?(k={x:+t[0],y:+t[1],k:k.k},o(),n):[k.x,k.y]},n.scale=function(t){return arguments.length?(k={x:k.x,y:k.y,k:null},u(+t),o(),n):k.k},n.scaleExtent=function(t){return arguments.length?(A=null==t?Ba:[+t[0],+t[1]],n):A},n.center=function(t){return arguments.length?(m=t&&[+t[0],+t[1]],n):m},n.size=function(t){return arguments.length?(E=t&&[+t[0],+t[1]],n):E},n.duration=function(t){return arguments.length?(C=+t,n):C},n.x=function(t){return arguments.length?(b=t,x=t.copy(),k={x:0,y:0,k:1},n):b},n.y=function(t){return arguments.length?(w=t,_=t.copy(),k={x:0,y:0,k:1},n):w},oa.rebind(n,D,"on")};var Xa,$a,Ba=[0,1/0];oa.color=on,on.prototype.toString=function(){return this.rgb()+""},oa.hsl=ln;var Wa=ln.prototype=new on;Wa.brighter=function(n){return n=Math.pow(.7,arguments.length?n:1),new ln(this.h,this.s,this.l/n)},Wa.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),new ln(this.h,this.s,n*this.l)},Wa.rgb=function(){return cn(this.h,this.s,this.l)},oa.hcl=sn;var Ja=sn.prototype=new on;Ja.brighter=function(n){return new sn(this.h,this.c,Math.min(100,this.l+Ga*(arguments.length?n:1)))},Ja.darker=function(n){return new sn(this.h,this.c,Math.max(0,this.l-Ga*(arguments.length?n:1)))},Ja.rgb=function(){return fn(this.h,this.c,this.l).rgb()},oa.lab=hn;var Ga=18,Ka=.95047,Qa=1,no=1.08883,to=hn.prototype=new on;to.brighter=function(n){return new hn(Math.min(100,this.l+Ga*(arguments.length?n:1)),this.a,this.b)},to.darker=function(n){return new hn(Math.max(0,this.l-Ga*(arguments.length?n:1)),this.a,this.b)},to.rgb=function(){return gn(this.l,this.a,this.b)},oa.rgb=yn;var eo=yn.prototype=new on;eo.brighter=function(n){n=Math.pow(.7,arguments.length?n:1);var t=this.r,e=this.g,r=this.b,u=30;return t||e||r?(t&&u>t&&(t=u),e&&u>e&&(e=u),r&&u>r&&(r=u),new yn(Math.min(255,t/n),Math.min(255,e/n),Math.min(255,r/n))):new yn(u,u,u)},eo.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),new yn(n*this.r,n*this.g,n*this.b)},eo.hsl=function(){return wn(this.r,this.g,this.b)},eo.toString=function(){return"#"+bn(this.r)+bn(this.g)+bn(this.b)};var ro=oa.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});ro.forEach(function(n,t){ro.set(n,Mn(t))}),oa.functor=En,oa.xhr=An(y),oa.dsv=function(n,t){function e(n,e,i){arguments.length<3&&(i=e,e=null);var a=Cn(n,t,null==e?r:u(e),i);return a.row=function(n){return arguments.length?a.response(null==(e=n)?r:u(n)):e},a}function r(n){return e.parse(n.responseText)}function u(n){return function(t){return e.parse(t.responseText,n)}}function i(t){return t.map(a).join(n)}function a(n){return o.test(n)?'"'+n.replace(/\"/g,'""')+'"':n}var o=new RegExp('["'+n+"\n]"),l=n.charCodeAt(0);return e.parse=function(n,t){var r;return e.parseRows(n,function(n,e){if(r)return r(n,e-1);var u=new Function("d","return {"+n.map(function(n,t){return JSON.stringify(n)+": d["+t+"]"}).join(",")+"}");r=t?function(n,e){return t(u(n),e)}:u})},e.parseRows=function(n,t){function e(){if(s>=c)return a;if(u)return u=!1,i;var t=s;if(34===n.charCodeAt(t)){for(var e=t;e++<c;)if(34===n.charCodeAt(e)){if(34!==n.charCodeAt(e+1))break;++e}s=e+2;var r=n.charCodeAt(e+1);return 13===r?(u=!0,10===n.charCodeAt(e+2)&&++s):10===r&&(u=!0),n.slice(t+1,e).replace(/""/g,'"')}for(;c>s;){var r=n.charCodeAt(s++),o=1;if(10===r)u=!0;else if(13===r)u=!0,10===n.charCodeAt(s)&&(++s,++o);else if(r!==l)continue;return n.slice(t,s-o)}return n.slice(t)}for(var r,u,i={},a={},o=[],c=n.length,s=0,f=0;(r=e())!==a;){for(var h=[];r!==i&&r!==a;)h.push(r),r=e();t&&null==(h=t(h,f++))||o.push(h)}return o},e.format=function(t){if(Array.isArray(t[0]))return e.formatRows(t);var r=new m,u=[];return t.forEach(function(n){for(var t in n)r.has(t)||u.push(r.add(t))}),[u.map(a).join(n)].concat(t.map(function(t){return u.map(function(n){return a(t[n])}).join(n)})).join("\n")},e.formatRows=function(n){return n.map(i).join("\n")},e},oa.csv=oa.dsv(",","text/csv"),oa.tsv=oa.dsv("	","text/tab-separated-values");var uo,io,ao,oo,lo=this[x(this,"requestAnimationFrame")]||function(n){setTimeout(n,17)};oa.timer=function(){qn.apply(this,arguments)},oa.timer.flush=function(){Rn(),Dn()},oa.round=function(n,t){return t?Math.round(n*(t=Math.pow(10,t)))/t:Math.round(n)};var co=["y","z","a","f","p","n","\xb5","m","","k","M","G","T","P","E","Z","Y"].map(jn);oa.formatPrefix=function(n,t){var e=0;return(n=+n)&&(0>n&&(n*=-1),t&&(n=oa.round(n,Pn(n,t))),e=1+Math.floor(1e-12+Math.log(n)/Math.LN10),e=Math.max(-24,Math.min(24,3*Math.floor((e-1)/3)))),co[8+e/3]};var so=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,fo=oa.map({b:function(n){return n.toString(2)},c:function(n){return String.fromCharCode(n)},o:function(n){return n.toString(8)},x:function(n){return n.toString(16)},X:function(n){return n.toString(16).toUpperCase()},g:function(n,t){return n.toPrecision(t)},e:function(n,t){return n.toExponential(t)},f:function(n,t){return n.toFixed(t)},r:function(n,t){return(n=oa.round(n,Pn(n,t))).toFixed(Math.max(0,Math.min(20,Pn(n*(1+1e-15),t))))}}),ho=oa.time={},go=Date;Hn.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){po.setUTCDate.apply(this._,arguments)},setDay:function(){po.setUTCDay.apply(this._,arguments)},setFullYear:function(){po.setUTCFullYear.apply(this._,arguments)},setHours:function(){po.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){po.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){po.setUTCMinutes.apply(this._,arguments)},setMonth:function(){po.setUTCMonth.apply(this._,arguments)},setSeconds:function(){po.setUTCSeconds.apply(this._,arguments)},setTime:function(){po.setTime.apply(this._,arguments)}};var po=Date.prototype;ho.year=On(function(n){return n=ho.day(n),n.setMonth(0,1),n},function(n,t){n.setFullYear(n.getFullYear()+t)},function(n){return n.getFullYear()}),ho.years=ho.year.range,ho.years.utc=ho.year.utc.range,ho.day=On(function(n){var t=new go(2e3,0);return t.setFullYear(n.getFullYear(),n.getMonth(),n.getDate()),t},function(n,t){n.setDate(n.getDate()+t)},function(n){return n.getDate()-1}),ho.days=ho.day.range,ho.days.utc=ho.day.utc.range,ho.dayOfYear=function(n){var t=ho.year(n);return Math.floor((n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(n,t){t=7-t;var e=ho[n]=On(function(n){return(n=ho.day(n)).setDate(n.getDate()-(n.getDay()+t)%7),n},function(n,t){n.setDate(n.getDate()+7*Math.floor(t))},function(n){var e=ho.year(n).getDay();return Math.floor((ho.dayOfYear(n)+(e+t)%7)/7)-(e!==t)});ho[n+"s"]=e.range,ho[n+"s"].utc=e.utc.range,ho[n+"OfYear"]=function(n){var e=ho.year(n).getDay();return Math.floor((ho.dayOfYear(n)+(e+t)%7)/7)}}),ho.week=ho.sunday,ho.weeks=ho.sunday.range,ho.weeks.utc=ho.sunday.utc.range,ho.weekOfYear=ho.sundayOfYear;var vo={"-":"",_:" ",0:"0"},mo=/^\s*\d+/,yo=/^%/;oa.locale=function(n){return{numberFormat:Un(n),timeFormat:Yn(n)}};var Mo=oa.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],
shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});oa.format=Mo.numberFormat,oa.geo={},st.prototype={s:0,t:0,add:function(n){ft(n,this.t,xo),ft(xo.s,this.s,this),this.s?this.t+=xo.t:this.s=xo.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var xo=new st;oa.geo.stream=function(n,t){n&&bo.hasOwnProperty(n.type)?bo[n.type](n,t):ht(n,t)};var bo={Feature:function(n,t){ht(n.geometry,t)},FeatureCollection:function(n,t){for(var e=n.features,r=-1,u=e.length;++r<u;)ht(e[r].geometry,t)}},_o={Sphere:function(n,t){t.sphere()},Point:function(n,t){n=n.coordinates,t.point(n[0],n[1],n[2])},MultiPoint:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)n=e[r],t.point(n[0],n[1],n[2])},LineString:function(n,t){gt(n.coordinates,t,0)},MultiLineString:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)gt(e[r],t,0)},Polygon:function(n,t){pt(n.coordinates,t)},MultiPolygon:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)pt(e[r],t)},GeometryCollection:function(n,t){for(var e=n.geometries,r=-1,u=e.length;++r<u;)ht(e[r],t)}};oa.geo.area=function(n){return wo=0,oa.geo.stream(n,ko),wo};var wo,So=new st,ko={sphere:function(){wo+=4*ja},point:b,lineStart:b,lineEnd:b,polygonStart:function(){So.reset(),ko.lineStart=vt},polygonEnd:function(){var n=2*So;wo+=0>n?4*ja+n:n,ko.lineStart=ko.lineEnd=ko.point=b}};oa.geo.bounds=function(){function n(n,t){M.push(x=[s=n,h=n]),f>t&&(f=t),t>g&&(g=t)}function t(t,e){var r=dt([t*Oa,e*Oa]);if(m){var u=yt(m,r),i=[u[1],-u[0],0],a=yt(i,u);bt(a),a=_t(a);var l=t-p,c=l>0?1:-1,v=a[0]*Ia*c,d=Ma(l)>180;if(d^(v>c*p&&c*t>v)){var y=a[1]*Ia;y>g&&(g=y)}else if(v=(v+360)%360-180,d^(v>c*p&&c*t>v)){var y=-a[1]*Ia;f>y&&(f=y)}else f>e&&(f=e),e>g&&(g=e);d?p>t?o(s,t)>o(s,h)&&(h=t):o(t,h)>o(s,h)&&(s=t):h>=s?(s>t&&(s=t),t>h&&(h=t)):t>p?o(s,t)>o(s,h)&&(h=t):o(t,h)>o(s,h)&&(s=t)}else n(t,e);m=r,p=t}function e(){b.point=t}function r(){x[0]=s,x[1]=h,b.point=n,m=null}function u(n,e){if(m){var r=n-p;y+=Ma(r)>180?r+(r>0?360:-360):r}else v=n,d=e;ko.point(n,e),t(n,e)}function i(){ko.lineStart()}function a(){u(v,d),ko.lineEnd(),Ma(y)>Da&&(s=-(h=180)),x[0]=s,x[1]=h,m=null}function o(n,t){return(t-=n)<0?t+360:t}function l(n,t){return n[0]-t[0]}function c(n,t){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var s,f,h,g,p,v,d,m,y,M,x,b={point:n,lineStart:e,lineEnd:r,polygonStart:function(){b.point=u,b.lineStart=i,b.lineEnd=a,y=0,ko.polygonStart()},polygonEnd:function(){ko.polygonEnd(),b.point=n,b.lineStart=e,b.lineEnd=r,0>So?(s=-(h=180),f=-(g=90)):y>Da?g=90:-Da>y&&(f=-90),x[0]=s,x[1]=h}};return function(n){g=h=-(s=f=1/0),M=[],oa.geo.stream(n,b);var t=M.length;if(t){M.sort(l);for(var e,r=1,u=M[0],i=[u];t>r;++r)e=M[r],c(e[0],u)||c(e[1],u)?(o(u[0],e[1])>o(u[0],u[1])&&(u[1]=e[1]),o(e[0],u[1])>o(u[0],u[1])&&(u[0]=e[0])):i.push(u=e);for(var a,e,p=-(1/0),t=i.length-1,r=0,u=i[t];t>=r;u=e,++r)e=i[r],(a=o(u[1],e[0]))>p&&(p=a,s=e[0],h=u[1])}return M=x=null,s===1/0||f===1/0?[[NaN,NaN],[NaN,NaN]]:[[s,f],[h,g]]}}(),oa.geo.centroid=function(n){No=Eo=Ao=Co=zo=Lo=qo=To=Ro=Do=Po=0,oa.geo.stream(n,jo);var t=Ro,e=Do,r=Po,u=t*t+e*e+r*r;return Pa>u&&(t=Lo,e=qo,r=To,Da>Eo&&(t=Ao,e=Co,r=zo),u=t*t+e*e+r*r,Pa>u)?[NaN,NaN]:[Math.atan2(e,t)*Ia,tn(r/Math.sqrt(u))*Ia]};var No,Eo,Ao,Co,zo,Lo,qo,To,Ro,Do,Po,jo={sphere:b,point:St,lineStart:Nt,lineEnd:Et,polygonStart:function(){jo.lineStart=At},polygonEnd:function(){jo.lineStart=Nt}},Uo=Rt(zt,Ut,Ht,[-ja,-ja/2]),Fo=1e9;oa.geo.clipExtent=function(){var n,t,e,r,u,i,a={stream:function(n){return u&&(u.valid=!1),u=i(n),u.valid=!0,u},extent:function(o){return arguments.length?(i=Zt(n=+o[0][0],t=+o[0][1],e=+o[1][0],r=+o[1][1]),u&&(u.valid=!1,u=null),a):[[n,t],[e,r]]}};return a.extent([[0,0],[960,500]])},(oa.geo.conicEqualArea=function(){return Vt(Xt)}).raw=Xt,oa.geo.albers=function(){return oa.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},oa.geo.albersUsa=function(){function n(n){var i=n[0],a=n[1];return t=null,e(i,a),t||(r(i,a),t)||u(i,a),t}var t,e,r,u,i=oa.geo.albers(),a=oa.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),o=oa.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),l={point:function(n,e){t=[n,e]}};return n.invert=function(n){var t=i.scale(),e=i.translate(),r=(n[0]-e[0])/t,u=(n[1]-e[1])/t;return(u>=.12&&.234>u&&r>=-.425&&-.214>r?a:u>=.166&&.234>u&&r>=-.214&&-.115>r?o:i).invert(n)},n.stream=function(n){var t=i.stream(n),e=a.stream(n),r=o.stream(n);return{point:function(n,u){t.point(n,u),e.point(n,u),r.point(n,u)},sphere:function(){t.sphere(),e.sphere(),r.sphere()},lineStart:function(){t.lineStart(),e.lineStart(),r.lineStart()},lineEnd:function(){t.lineEnd(),e.lineEnd(),r.lineEnd()},polygonStart:function(){t.polygonStart(),e.polygonStart(),r.polygonStart()},polygonEnd:function(){t.polygonEnd(),e.polygonEnd(),r.polygonEnd()}}},n.precision=function(t){return arguments.length?(i.precision(t),a.precision(t),o.precision(t),n):i.precision()},n.scale=function(t){return arguments.length?(i.scale(t),a.scale(.35*t),o.scale(t),n.translate(i.translate())):i.scale()},n.translate=function(t){if(!arguments.length)return i.translate();var c=i.scale(),s=+t[0],f=+t[1];return e=i.translate(t).clipExtent([[s-.455*c,f-.238*c],[s+.455*c,f+.238*c]]).stream(l).point,r=a.translate([s-.307*c,f+.201*c]).clipExtent([[s-.425*c+Da,f+.12*c+Da],[s-.214*c-Da,f+.234*c-Da]]).stream(l).point,u=o.translate([s-.205*c,f+.212*c]).clipExtent([[s-.214*c+Da,f+.166*c+Da],[s-.115*c-Da,f+.234*c-Da]]).stream(l).point,n},n.scale(1070)};var Ho,Oo,Io,Yo,Zo,Vo,Xo={point:b,lineStart:b,lineEnd:b,polygonStart:function(){Oo=0,Xo.lineStart=$t},polygonEnd:function(){Xo.lineStart=Xo.lineEnd=Xo.point=b,Ho+=Ma(Oo/2)}},$o={point:Bt,lineStart:b,lineEnd:b,polygonStart:b,polygonEnd:b},Bo={point:Gt,lineStart:Kt,lineEnd:Qt,polygonStart:function(){Bo.lineStart=ne},polygonEnd:function(){Bo.point=Gt,Bo.lineStart=Kt,Bo.lineEnd=Qt}};oa.geo.path=function(){function n(n){return n&&("function"==typeof o&&i.pointRadius(+o.apply(this,arguments)),a&&a.valid||(a=u(i)),oa.geo.stream(n,a)),i.result()}function t(){return a=null,n}var e,r,u,i,a,o=4.5;return n.area=function(n){return Ho=0,oa.geo.stream(n,u(Xo)),Ho},n.centroid=function(n){return Ao=Co=zo=Lo=qo=To=Ro=Do=Po=0,oa.geo.stream(n,u(Bo)),Po?[Ro/Po,Do/Po]:To?[Lo/To,qo/To]:zo?[Ao/zo,Co/zo]:[NaN,NaN]},n.bounds=function(n){return Zo=Vo=-(Io=Yo=1/0),oa.geo.stream(n,u($o)),[[Io,Yo],[Zo,Vo]]},n.projection=function(n){return arguments.length?(u=(e=n)?n.stream||re(n):y,t()):e},n.context=function(n){return arguments.length?(i=null==(r=n)?new Wt:new te(n),"function"!=typeof o&&i.pointRadius(o),t()):r},n.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(i.pointRadius(+t),+t),n):o},n.projection(oa.geo.albersUsa()).context(null)},oa.geo.transform=function(n){return{stream:function(t){var e=new ue(t);for(var r in n)e[r]=n[r];return e}}},ue.prototype={point:function(n,t){this.stream.point(n,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},oa.geo.projection=ae,oa.geo.projectionMutator=oe,(oa.geo.equirectangular=function(){return ae(ce)}).raw=ce.invert=ce,oa.geo.rotation=function(n){function t(t){return t=n(t[0]*Oa,t[1]*Oa),t[0]*=Ia,t[1]*=Ia,t}return n=fe(n[0]%360*Oa,n[1]*Oa,n.length>2?n[2]*Oa:0),t.invert=function(t){return t=n.invert(t[0]*Oa,t[1]*Oa),t[0]*=Ia,t[1]*=Ia,t},t},se.invert=ce,oa.geo.circle=function(){function n(){var n="function"==typeof r?r.apply(this,arguments):r,t=fe(-n[0]*Oa,-n[1]*Oa,0).invert,u=[];return e(null,null,1,{point:function(n,e){u.push(n=t(n,e)),n[0]*=Ia,n[1]*=Ia}}),{type:"Polygon",coordinates:[u]}}var t,e,r=[0,0],u=6;return n.origin=function(t){return arguments.length?(r=t,n):r},n.angle=function(r){return arguments.length?(e=ve((t=+r)*Oa,u*Oa),n):t},n.precision=function(r){return arguments.length?(e=ve(t*Oa,(u=+r)*Oa),n):u},n.angle(90)},oa.geo.distance=function(n,t){var e,r=(t[0]-n[0])*Oa,u=n[1]*Oa,i=t[1]*Oa,a=Math.sin(r),o=Math.cos(r),l=Math.sin(u),c=Math.cos(u),s=Math.sin(i),f=Math.cos(i);return Math.atan2(Math.sqrt((e=f*a)*e+(e=c*s-l*f*o)*e),l*s+c*f*o)},oa.geo.graticule=function(){function n(){return{type:"MultiLineString",coordinates:t()}}function t(){return oa.range(Math.ceil(i/d)*d,u,d).map(h).concat(oa.range(Math.ceil(c/m)*m,l,m).map(g)).concat(oa.range(Math.ceil(r/p)*p,e,p).filter(function(n){return Ma(n%d)>Da}).map(s)).concat(oa.range(Math.ceil(o/v)*v,a,v).filter(function(n){return Ma(n%m)>Da}).map(f))}var e,r,u,i,a,o,l,c,s,f,h,g,p=10,v=p,d=90,m=360,y=2.5;return n.lines=function(){return t().map(function(n){return{type:"LineString",coordinates:n}})},n.outline=function(){return{type:"Polygon",coordinates:[h(i).concat(g(l).slice(1),h(u).reverse().slice(1),g(c).reverse().slice(1))]}},n.extent=function(t){return arguments.length?n.majorExtent(t).minorExtent(t):n.minorExtent()},n.majorExtent=function(t){return arguments.length?(i=+t[0][0],u=+t[1][0],c=+t[0][1],l=+t[1][1],i>u&&(t=i,i=u,u=t),c>l&&(t=c,c=l,l=t),n.precision(y)):[[i,c],[u,l]]},n.minorExtent=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],o=+t[0][1],a=+t[1][1],r>e&&(t=r,r=e,e=t),o>a&&(t=o,o=a,a=t),n.precision(y)):[[r,o],[e,a]]},n.step=function(t){return arguments.length?n.majorStep(t).minorStep(t):n.minorStep()},n.majorStep=function(t){return arguments.length?(d=+t[0],m=+t[1],n):[d,m]},n.minorStep=function(t){return arguments.length?(p=+t[0],v=+t[1],n):[p,v]},n.precision=function(t){return arguments.length?(y=+t,s=me(o,a,90),f=ye(r,e,y),h=me(c,l,90),g=ye(i,u,y),n):y},n.majorExtent([[-180,-90+Da],[180,90-Da]]).minorExtent([[-180,-80-Da],[180,80+Da]])},oa.geo.greatArc=function(){function n(){return{type:"LineString",coordinates:[t||r.apply(this,arguments),e||u.apply(this,arguments)]}}var t,e,r=Me,u=xe;return n.distance=function(){return oa.geo.distance(t||r.apply(this,arguments),e||u.apply(this,arguments))},n.source=function(e){return arguments.length?(r=e,t="function"==typeof e?null:e,n):r},n.target=function(t){return arguments.length?(u=t,e="function"==typeof t?null:t,n):u},n.precision=function(){return arguments.length?n:0},n},oa.geo.interpolate=function(n,t){return be(n[0]*Oa,n[1]*Oa,t[0]*Oa,t[1]*Oa)},oa.geo.length=function(n){return Wo=0,oa.geo.stream(n,Jo),Wo};var Wo,Jo={sphere:b,point:b,lineStart:_e,lineEnd:b,polygonStart:b,polygonEnd:b},Go=we(function(n){return Math.sqrt(2/(1+n))},function(n){return 2*Math.asin(n/2)});(oa.geo.azimuthalEqualArea=function(){return ae(Go)}).raw=Go;var Ko=we(function(n){var t=Math.acos(n);return t&&t/Math.sin(t)},y);(oa.geo.azimuthalEquidistant=function(){return ae(Ko)}).raw=Ko,(oa.geo.conicConformal=function(){return Vt(Se)}).raw=Se,(oa.geo.conicEquidistant=function(){return Vt(ke)}).raw=ke;var Qo=we(function(n){return 1/n},Math.atan);(oa.geo.gnomonic=function(){return ae(Qo)}).raw=Qo,Ne.invert=function(n,t){return[n,2*Math.atan(Math.exp(t))-Ha]},(oa.geo.mercator=function(){return Ee(Ne)}).raw=Ne;var nl=we(function(){return 1},Math.asin);(oa.geo.orthographic=function(){return ae(nl)}).raw=nl;var tl=we(function(n){return 1/(1+n)},function(n){return 2*Math.atan(n)});(oa.geo.stereographic=function(){return ae(tl)}).raw=tl,Ae.invert=function(n,t){return[-t,2*Math.atan(Math.exp(n))-Ha]},(oa.geo.transverseMercator=function(){var n=Ee(Ae),t=n.center,e=n.rotate;return n.center=function(n){return n?t([-n[1],n[0]]):(n=t(),[n[1],-n[0]])},n.rotate=function(n){return n?e([n[0],n[1],n.length>2?n[2]+90:90]):(n=e(),[n[0],n[1],n[2]-90])},e([0,0,90])}).raw=Ae,oa.geom={},oa.geom.hull=function(n){function t(n){if(n.length<3)return[];var t,u=En(e),i=En(r),a=n.length,o=[],l=[];for(t=0;a>t;t++)o.push([+u.call(this,n[t],t),+i.call(this,n[t],t),t]);for(o.sort(qe),t=0;a>t;t++)l.push([o[t][0],-o[t][1]]);var c=Le(o),s=Le(l),f=s[0]===c[0],h=s[s.length-1]===c[c.length-1],g=[];for(t=c.length-1;t>=0;--t)g.push(n[o[c[t]][2]]);for(t=+f;t<s.length-h;++t)g.push(n[o[s[t]][2]]);return g}var e=Ce,r=ze;return arguments.length?t(n):(t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t)},oa.geom.polygon=function(n){return Sa(n,el),n};var el=oa.geom.polygon.prototype=[];el.area=function(){for(var n,t=-1,e=this.length,r=this[e-1],u=0;++t<e;)n=r,r=this[t],u+=n[1]*r[0]-n[0]*r[1];return.5*u},el.centroid=function(n){var t,e,r=-1,u=this.length,i=0,a=0,o=this[u-1];for(arguments.length||(n=-1/(6*this.area()));++r<u;)t=o,o=this[r],e=t[0]*o[1]-o[0]*t[1],i+=(t[0]+o[0])*e,a+=(t[1]+o[1])*e;return[i*n,a*n]},el.clip=function(n){for(var t,e,r,u,i,a,o=De(n),l=-1,c=this.length-De(this),s=this[c-1];++l<c;){for(t=n.slice(),n.length=0,u=this[l],i=t[(r=t.length-o)-1],e=-1;++e<r;)a=t[e],Te(a,s,u)?(Te(i,s,u)||n.push(Re(i,a,s,u)),n.push(a)):Te(i,s,u)&&n.push(Re(i,a,s,u)),i=a;o&&n.push(n[0]),s=u}return n};var rl,ul,il,al,ol,ll=[],cl=[];Ye.prototype.prepare=function(){for(var n,t=this.edges,e=t.length;e--;)n=t[e].edge,n.b&&n.a||t.splice(e,1);return t.sort(Ve),t.length},tr.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},er.prototype={insert:function(n,t){var e,r,u;if(n){if(t.P=n,t.N=n.N,n.N&&(n.N.P=t),n.N=t,n.R){for(n=n.R;n.L;)n=n.L;n.L=t}else n.R=t;e=n}else this._?(n=ar(this._),t.P=null,t.N=n,n.P=n.L=t,e=n):(t.P=t.N=null,this._=t,e=null);for(t.L=t.R=null,t.U=e,t.C=!0,n=t;e&&e.C;)r=e.U,e===r.L?(u=r.R,u&&u.C?(e.C=u.C=!1,r.C=!0,n=r):(n===e.R&&(ur(this,e),n=e,e=n.U),e.C=!1,r.C=!0,ir(this,r))):(u=r.L,u&&u.C?(e.C=u.C=!1,r.C=!0,n=r):(n===e.L&&(ir(this,e),n=e,e=n.U),e.C=!1,r.C=!0,ur(this,r))),e=n.U;this._.C=!1},remove:function(n){n.N&&(n.N.P=n.P),n.P&&(n.P.N=n.N),n.N=n.P=null;var t,e,r,u=n.U,i=n.L,a=n.R;if(e=i?a?ar(a):i:a,u?u.L===n?u.L=e:u.R=e:this._=e,i&&a?(r=e.C,e.C=n.C,e.L=i,i.U=e,e!==a?(u=e.U,e.U=n.U,n=e.R,u.L=n,e.R=a,a.U=e):(e.U=u,u=e,n=e.R)):(r=n.C,n=e),n&&(n.U=u),!r){if(n&&n.C)return void(n.C=!1);do{if(n===this._)break;if(n===u.L){if(t=u.R,t.C&&(t.C=!1,u.C=!0,ur(this,u),t=u.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,ir(this,t),t=u.R),t.C=u.C,u.C=t.R.C=!1,ur(this,u),n=this._;break}}else if(t=u.L,t.C&&(t.C=!1,u.C=!0,ir(this,u),t=u.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,ur(this,t),t=u.L),t.C=u.C,u.C=t.L.C=!1,ir(this,u),n=this._;break}t.C=!0,n=u,u=u.U}while(!n.C);n&&(n.C=!1)}}},oa.geom.voronoi=function(n){function t(n){var t=new Array(n.length),r=o[0][0],u=o[0][1],i=o[1][0],a=o[1][1];return or(e(n),o).cells.forEach(function(e,o){var l=e.edges,c=e.site,s=t[o]=l.length?l.map(function(n){var t=n.start();return[t.x,t.y]}):c.x>=r&&c.x<=i&&c.y>=u&&c.y<=a?[[r,a],[i,a],[i,u],[r,u]]:[];s.point=n[o]}),t}function e(n){return n.map(function(n,t){return{x:Math.round(i(n,t)/Da)*Da,y:Math.round(a(n,t)/Da)*Da,i:t}})}var r=Ce,u=ze,i=r,a=u,o=sl;return n?t(n):(t.links=function(n){return or(e(n)).edges.filter(function(n){return n.l&&n.r}).map(function(t){return{source:n[t.l.i],target:n[t.r.i]}})},t.triangles=function(n){var t=[];return or(e(n)).cells.forEach(function(e,r){for(var u,i,a=e.site,o=e.edges.sort(Ve),l=-1,c=o.length,s=o[c-1].edge,f=s.l===a?s.r:s.l;++l<c;)u=s,i=f,s=o[l].edge,f=s.l===a?s.r:s.l,r<i.i&&r<f.i&&cr(a,i,f)<0&&t.push([n[r],n[i.i],n[f.i]])}),t},t.x=function(n){return arguments.length?(i=En(r=n),t):r},t.y=function(n){return arguments.length?(a=En(u=n),t):u},t.clipExtent=function(n){return arguments.length?(o=null==n?sl:n,t):o===sl?null:o},t.size=function(n){return arguments.length?t.clipExtent(n&&[[0,0],n]):o===sl?null:o&&o[1]},t)};var sl=[[-1e6,-1e6],[1e6,1e6]];oa.geom.delaunay=function(n){return oa.geom.voronoi().triangles(n)},oa.geom.quadtree=function(n,t,e,r,u){function i(n){function i(n,t,e,r,u,i,a,o){if(!isNaN(e)&&!isNaN(r))if(n.leaf){var l=n.x,s=n.y;if(null!=l)if(Ma(l-e)+Ma(s-r)<.01)c(n,t,e,r,u,i,a,o);else{var f=n.point;n.x=n.y=n.point=null,c(n,f,l,s,u,i,a,o),c(n,t,e,r,u,i,a,o)}else n.x=e,n.y=r,n.point=t}else c(n,t,e,r,u,i,a,o)}function c(n,t,e,r,u,a,o,l){var c=.5*(u+o),s=.5*(a+l),f=e>=c,h=r>=s,g=h<<1|f;n.leaf=!1,n=n.nodes[g]||(n.nodes[g]=hr()),f?u=c:o=c,h?a=s:l=s,i(n,t,e,r,u,a,o,l)}var s,f,h,g,p,v,d,m,y,M=En(o),x=En(l);if(null!=t)v=t,d=e,m=r,y=u;else if(m=y=-(v=d=1/0),f=[],h=[],p=n.length,a)for(g=0;p>g;++g)s=n[g],s.x<v&&(v=s.x),s.y<d&&(d=s.y),s.x>m&&(m=s.x),s.y>y&&(y=s.y),f.push(s.x),h.push(s.y);else for(g=0;p>g;++g){var b=+M(s=n[g],g),_=+x(s,g);v>b&&(v=b),d>_&&(d=_),b>m&&(m=b),_>y&&(y=_),f.push(b),h.push(_)}var w=m-v,S=y-d;w>S?y=d+w:m=v+S;var k=hr();if(k.add=function(n){i(k,n,+M(n,++g),+x(n,g),v,d,m,y)},k.visit=function(n){gr(n,k,v,d,m,y)},k.find=function(n){return pr(k,n[0],n[1],v,d,m,y)},g=-1,null==t){for(;++g<p;)i(k,n[g],f[g],h[g],v,d,m,y);--g}else n.forEach(k.add);return f=h=n=s=null,k}var a,o=Ce,l=ze;return(a=arguments.length)?(o=sr,l=fr,3===a&&(u=e,r=t,e=t=0),i(n)):(i.x=function(n){return arguments.length?(o=n,i):o},i.y=function(n){return arguments.length?(l=n,i):l},i.extent=function(n){return arguments.length?(null==n?t=e=r=u=null:(t=+n[0][0],e=+n[0][1],r=+n[1][0],u=+n[1][1]),i):null==t?null:[[t,e],[r,u]]},i.size=function(n){return arguments.length?(null==n?t=e=r=u=null:(t=e=0,r=+n[0],u=+n[1]),i):null==t?null:[r-t,u-e]},i)},oa.interpolateRgb=vr,oa.interpolateObject=dr,oa.interpolateNumber=mr,oa.interpolateString=yr;var fl=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,hl=new RegExp(fl.source,"g");oa.interpolate=Mr,oa.interpolators=[function(n,t){var e=typeof t;return("string"===e?ro.has(t.toLowerCase())||/^(#|rgb\(|hsl\()/i.test(t)?vr:yr:t instanceof on?vr:Array.isArray(t)?xr:"object"===e&&isNaN(t)?dr:mr)(n,t)}],oa.interpolateArray=xr;var gl=function(){return y},pl=oa.map({linear:gl,poly:Er,quad:function(){return Sr},cubic:function(){return kr},sin:function(){return Ar},exp:function(){return Cr},circle:function(){return zr},elastic:Lr,back:qr,bounce:function(){return Tr}}),vl=oa.map({"in":y,out:_r,"in-out":wr,"out-in":function(n){return wr(_r(n))}});oa.ease=function(n){var t=n.indexOf("-"),e=t>=0?n.slice(0,t):n,r=t>=0?n.slice(t+1):"in";return e=pl.get(e)||gl,r=vl.get(r)||y,br(r(e.apply(null,la.call(arguments,1))))},oa.interpolateHcl=Rr,oa.interpolateHsl=Dr,oa.interpolateLab=Pr,oa.interpolateRound=jr,oa.transform=function(n){var t=sa.createElementNS(oa.ns.prefix.svg,"g");return(oa.transform=function(n){if(null!=n){t.setAttribute("transform",n);var e=t.transform.baseVal.consolidate()}return new Ur(e?e.matrix:dl)})(n)},Ur.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var dl={a:1,b:0,c:0,d:1,e:0,f:0};oa.interpolateTransform=$r,oa.layout={},oa.layout.bundle=function(){return function(n){for(var t=[],e=-1,r=n.length;++e<r;)t.push(Jr(n[e]));return t}},oa.layout.chord=function(){function n(){var n,c,f,h,g,p={},v=[],d=oa.range(i),m=[];for(e=[],r=[],n=0,h=-1;++h<i;){for(c=0,g=-1;++g<i;)c+=u[h][g];v.push(c),m.push(oa.range(i)),n+=c}for(a&&d.sort(function(n,t){return a(v[n],v[t])}),o&&m.forEach(function(n,t){n.sort(function(n,e){return o(u[t][n],u[t][e])})}),n=(Ua-s*i)/n,c=0,h=-1;++h<i;){for(f=c,g=-1;++g<i;){var y=d[h],M=m[y][g],x=u[y][M],b=c,_=c+=x*n;p[y+"-"+M]={index:y,subindex:M,startAngle:b,endAngle:_,value:x}}r[y]={index:y,startAngle:f,endAngle:c,value:(c-f)/n},c+=s}for(h=-1;++h<i;)for(g=h-1;++g<i;){var w=p[h+"-"+g],S=p[g+"-"+h];(w.value||S.value)&&e.push(w.value<S.value?{source:S,target:w}:{source:w,target:S})}l&&t()}function t(){e.sort(function(n,t){return l((n.source.value+n.target.value)/2,(t.source.value+t.target.value)/2)})}var e,r,u,i,a,o,l,c={},s=0;return c.matrix=function(n){return arguments.length?(i=(u=n)&&u.length,e=r=null,c):u},c.padding=function(n){return arguments.length?(s=n,e=r=null,c):s},c.sortGroups=function(n){return arguments.length?(a=n,e=r=null,c):a},c.sortSubgroups=function(n){return arguments.length?(o=n,e=null,c):o},c.sortChords=function(n){return arguments.length?(l=n,e&&t(),c):l},c.chords=function(){return e||n(),e},c.groups=function(){return r||n(),r},c},oa.layout.force=function(){function n(n){return function(t,e,r,u){if(t.point!==n){var i=t.cx-n.x,a=t.cy-n.y,o=u-e,l=i*i+a*a;if(l>o*o/m){if(v>l){var c=t.charge/l;n.px-=i*c,n.py-=a*c}return!0}if(t.point&&l&&v>l){var c=t.pointCharge/l;n.px-=i*c,n.py-=a*c}}return!t.charge}}function t(n){n.px=oa.event.x,n.py=oa.event.y,l.resume()}var e,r,u,i,a,o,l={},c=oa.dispatch("start","tick","end"),s=[1,1],f=.9,h=ml,g=yl,p=-30,v=Ml,d=.1,m=.64,M=[],x=[];return l.tick=function(){if((u*=.99)<.005)return e=null,c.end({type:"end",alpha:u=0}),!0;var t,r,l,h,g,v,m,y,b,_=M.length,w=x.length;for(r=0;w>r;++r)l=x[r],h=l.source,g=l.target,y=g.x-h.x,b=g.y-h.y,(v=y*y+b*b)&&(v=u*a[r]*((v=Math.sqrt(v))-i[r])/v,y*=v,b*=v,g.x-=y*(m=h.weight+g.weight?h.weight/(h.weight+g.weight):.5),g.y-=b*m,h.x+=y*(m=1-m),h.y+=b*m);if((m=u*d)&&(y=s[0]/2,b=s[1]/2,r=-1,m))for(;++r<_;)l=M[r],l.x+=(y-l.x)*m,l.y+=(b-l.y)*m;if(p)for(ru(t=oa.geom.quadtree(M),u,o),r=-1;++r<_;)(l=M[r]).fixed||t.visit(n(l));for(r=-1;++r<_;)l=M[r],l.fixed?(l.x=l.px,l.y=l.py):(l.x-=(l.px-(l.px=l.x))*f,l.y-=(l.py-(l.py=l.y))*f);c.tick({type:"tick",alpha:u})},l.nodes=function(n){return arguments.length?(M=n,l):M},l.links=function(n){return arguments.length?(x=n,l):x},l.size=function(n){return arguments.length?(s=n,l):s},l.linkDistance=function(n){return arguments.length?(h="function"==typeof n?n:+n,l):h},l.distance=l.linkDistance,l.linkStrength=function(n){return arguments.length?(g="function"==typeof n?n:+n,l):g},l.friction=function(n){return arguments.length?(f=+n,l):f},l.charge=function(n){return arguments.length?(p="function"==typeof n?n:+n,l):p},l.chargeDistance=function(n){return arguments.length?(v=n*n,l):Math.sqrt(v)},l.gravity=function(n){return arguments.length?(d=+n,l):d},l.theta=function(n){return arguments.length?(m=n*n,l):Math.sqrt(m)},l.alpha=function(n){return arguments.length?(n=+n,u?n>0?u=n:(e.c=null,e.t=NaN,e=null,c.end({type:"end",alpha:u=0})):n>0&&(c.start({type:"start",alpha:u=n}),e=qn(l.tick)),l):u},l.start=function(){function n(n,r){if(!e){for(e=new Array(u),l=0;u>l;++l)e[l]=[];for(l=0;c>l;++l){var i=x[l];e[i.source.index].push(i.target),e[i.target.index].push(i.source)}}for(var a,o=e[t],l=-1,s=o.length;++l<s;)if(!isNaN(a=o[l][n]))return a;return Math.random()*r}var t,e,r,u=M.length,c=x.length,f=s[0],v=s[1];for(t=0;u>t;++t)(r=M[t]).index=t,r.weight=0;for(t=0;c>t;++t)r=x[t],"number"==typeof r.source&&(r.source=M[r.source]),"number"==typeof r.target&&(r.target=M[r.target]),++r.source.weight,++r.target.weight;for(t=0;u>t;++t)r=M[t],isNaN(r.x)&&(r.x=n("x",f)),isNaN(r.y)&&(r.y=n("y",v)),isNaN(r.px)&&(r.px=r.x),isNaN(r.py)&&(r.py=r.y);if(i=[],"function"==typeof h)for(t=0;c>t;++t)i[t]=+h.call(this,x[t],t);else for(t=0;c>t;++t)i[t]=h;if(a=[],"function"==typeof g)for(t=0;c>t;++t)a[t]=+g.call(this,x[t],t);else for(t=0;c>t;++t)a[t]=g;if(o=[],"function"==typeof p)for(t=0;u>t;++t)o[t]=+p.call(this,M[t],t);else for(t=0;u>t;++t)o[t]=p;return l.resume()},l.resume=function(){return l.alpha(.1)},l.stop=function(){return l.alpha(0)},l.drag=function(){return r||(r=oa.behavior.drag().origin(y).on("dragstart.force",Qr).on("drag.force",t).on("dragend.force",nu)),arguments.length?void this.on("mouseover.force",tu).on("mouseout.force",eu).call(r):r},oa.rebind(l,c,"on")};var ml=20,yl=1,Ml=1/0;oa.layout.hierarchy=function(){function n(u){var i,a=[u],o=[];for(u.depth=0;null!=(i=a.pop());)if(o.push(i),(c=e.call(n,i,i.depth))&&(l=c.length)){for(var l,c,s;--l>=0;)a.push(s=c[l]),s.parent=i,s.depth=i.depth+1;r&&(i.value=0),i.children=c}else r&&(i.value=+r.call(n,i,i.depth)||0),delete i.children;return au(u,function(n){var e,u;t&&(e=n.children)&&e.sort(t),r&&(u=n.parent)&&(u.value+=n.value)}),o}var t=cu,e=ou,r=lu;return n.sort=function(e){return arguments.length?(t=e,n):t},n.children=function(t){return arguments.length?(e=t,n):e},n.value=function(t){return arguments.length?(r=t,n):r},n.revalue=function(t){return r&&(iu(t,function(n){n.children&&(n.value=0)}),au(t,function(t){var e;t.children||(t.value=+r.call(n,t,t.depth)||0),(e=t.parent)&&(e.value+=t.value)})),t},n},oa.layout.partition=function(){function n(t,e,r,u){var i=t.children;if(t.x=e,t.y=t.depth*u,t.dx=r,t.dy=u,i&&(a=i.length)){var a,o,l,c=-1;for(r=t.value?r/t.value:0;++c<a;)n(o=i[c],e,l=o.value*r,u),e+=l}}function t(n){var e=n.children,r=0;if(e&&(u=e.length))for(var u,i=-1;++i<u;)r=Math.max(r,t(e[i]));return 1+r}function e(e,i){var a=r.call(this,e,i);return n(a[0],0,u[0],u[1]/t(a[0])),a}var r=oa.layout.hierarchy(),u=[1,1];return e.size=function(n){return arguments.length?(u=n,e):u},uu(e,r)},oa.layout.pie=function(){function n(a){var o,l=a.length,c=a.map(function(e,r){return+t.call(n,e,r)}),s=+("function"==typeof r?r.apply(this,arguments):r),f=("function"==typeof u?u.apply(this,arguments):u)-s,h=Math.min(Math.abs(f)/l,+("function"==typeof i?i.apply(this,arguments):i)),g=h*(0>f?-1:1),p=oa.sum(c),v=p?(f-l*g)/p:0,d=oa.range(l),m=[];return null!=e&&d.sort(e===xl?function(n,t){return c[t]-c[n]}:function(n,t){return e(a[n],a[t])}),d.forEach(function(n){m[n]={data:a[n],value:o=c[n],startAngle:s,endAngle:s+=o*v+g,padAngle:h}}),m}var t=Number,e=xl,r=0,u=Ua,i=0;return n.value=function(e){return arguments.length?(t=e,n):t},n.sort=function(t){return arguments.length?(e=t,n):e},n.startAngle=function(t){return arguments.length?(r=t,n):r},n.endAngle=function(t){return arguments.length?(u=t,n):u},n.padAngle=function(t){return arguments.length?(i=t,n):i},n};var xl={};oa.layout.stack=function(){function n(o,l){if(!(h=o.length))return o;var c=o.map(function(e,r){return t.call(n,e,r)}),s=c.map(function(t){return t.map(function(t,e){return[i.call(n,t,e),a.call(n,t,e)]})}),f=e.call(n,s,l);c=oa.permute(c,f),s=oa.permute(s,f);var h,g,p,v,d=r.call(n,s,l),m=c[0].length;for(p=0;m>p;++p)for(u.call(n,c[0][p],v=d[p],s[0][p][1]),g=1;h>g;++g)u.call(n,c[g][p],v+=s[g-1][p][1],s[g][p][1]);return o}var t=y,e=pu,r=vu,u=gu,i=fu,a=hu;return n.values=function(e){return arguments.length?(t=e,n):t},n.order=function(t){return arguments.length?(e="function"==typeof t?t:bl.get(t)||pu,n):e},n.offset=function(t){return arguments.length?(r="function"==typeof t?t:_l.get(t)||vu,n):r},n.x=function(t){return arguments.length?(i=t,n):i},n.y=function(t){return arguments.length?(a=t,n):a},n.out=function(t){return arguments.length?(u=t,n):u},n};var bl=oa.map({"inside-out":function(n){var t,e,r=n.length,u=n.map(du),i=n.map(mu),a=oa.range(r).sort(function(n,t){return u[n]-u[t]}),o=0,l=0,c=[],s=[];for(t=0;r>t;++t)e=a[t],l>o?(o+=i[e],c.push(e)):(l+=i[e],s.push(e));return s.reverse().concat(c)},reverse:function(n){return oa.range(n.length).reverse()},"default":pu}),_l=oa.map({silhouette:function(n){var t,e,r,u=n.length,i=n[0].length,a=[],o=0,l=[];for(e=0;i>e;++e){for(t=0,r=0;u>t;t++)r+=n[t][e][1];r>o&&(o=r),a.push(r)}for(e=0;i>e;++e)l[e]=(o-a[e])/2;return l},wiggle:function(n){var t,e,r,u,i,a,o,l,c,s=n.length,f=n[0],h=f.length,g=[];for(g[0]=l=c=0,e=1;h>e;++e){for(t=0,u=0;s>t;++t)u+=n[t][e][1];for(t=0,i=0,o=f[e][0]-f[e-1][0];s>t;++t){for(r=0,a=(n[t][e][1]-n[t][e-1][1])/(2*o);t>r;++r)a+=(n[r][e][1]-n[r][e-1][1])/o;i+=a*n[t][e][1]}g[e]=l-=u?i/u*o:0,c>l&&(c=l)}for(e=0;h>e;++e)g[e]-=c;return g},expand:function(n){var t,e,r,u=n.length,i=n[0].length,a=1/u,o=[];for(e=0;i>e;++e){for(t=0,r=0;u>t;t++)r+=n[t][e][1];if(r)for(t=0;u>t;t++)n[t][e][1]/=r;else for(t=0;u>t;t++)n[t][e][1]=a}for(e=0;i>e;++e)o[e]=0;return o},zero:vu});oa.layout.histogram=function(){function n(n,i){for(var a,o,l=[],c=n.map(e,this),s=r.call(this,c,i),f=u.call(this,s,c,i),i=-1,h=c.length,g=f.length-1,p=t?1:1/h;++i<g;)a=l[i]=[],a.dx=f[i+1]-(a.x=f[i]),a.y=0;if(g>0)for(i=-1;++i<h;)o=c[i],o>=s[0]&&o<=s[1]&&(a=l[oa.bisect(f,o,1,g)-1],a.y+=p,a.push(n[i]));return l}var t=!0,e=Number,r=bu,u=Mu;return n.value=function(t){return arguments.length?(e=t,n):e},n.range=function(t){return arguments.length?(r=En(t),n):r},n.bins=function(t){return arguments.length?(u="number"==typeof t?function(n){return xu(n,t)}:En(t),n):u},n.frequency=function(e){return arguments.length?(t=!!e,n):t},n},oa.layout.pack=function(){function n(n,i){var a=e.call(this,n,i),o=a[0],l=u[0],c=u[1],s=null==t?Math.sqrt:"function"==typeof t?t:function(){return t};if(o.x=o.y=0,au(o,function(n){n.r=+s(n.value)}),au(o,Nu),r){var f=r*(t?1:Math.max(2*o.r/l,2*o.r/c))/2;au(o,function(n){n.r+=f}),au(o,Nu),au(o,function(n){n.r-=f})}return Cu(o,l/2,c/2,t?1:1/Math.max(2*o.r/l,2*o.r/c)),a}var t,e=oa.layout.hierarchy().sort(_u),r=0,u=[1,1];return n.size=function(t){return arguments.length?(u=t,n):u},n.radius=function(e){return arguments.length?(t=null==e||"function"==typeof e?e:+e,n):t},n.padding=function(t){return arguments.length?(r=+t,n):r},uu(n,e)},oa.layout.tree=function(){function n(n,u){var s=a.call(this,n,u),f=s[0],h=t(f);if(au(h,e),h.parent.m=-h.z,iu(h,r),c)iu(f,i);else{var g=f,p=f,v=f;iu(f,function(n){n.x<g.x&&(g=n),n.x>p.x&&(p=n),n.depth>v.depth&&(v=n)});var d=o(g,p)/2-g.x,m=l[0]/(p.x+o(p,g)/2+d),y=l[1]/(v.depth||1);iu(f,function(n){n.x=(n.x+d)*m,n.y=n.depth*y})}return s}function t(n){for(var t,e={A:null,children:[n]},r=[e];null!=(t=r.pop());)for(var u,i=t.children,a=0,o=i.length;o>a;++a)r.push((i[a]=u={_:i[a],parent:t,children:(u=i[a].children)&&u.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:a}).a=u);return e.children[0]}function e(n){var t=n.children,e=n.parent.children,r=n.i?e[n.i-1]:null;if(t.length){Du(n);var i=(t[0].z+t[t.length-1].z)/2;r?(n.z=r.z+o(n._,r._),n.m=n.z-i):n.z=i}else r&&(n.z=r.z+o(n._,r._));n.parent.A=u(n,r,n.parent.A||e[0])}function r(n){n._.x=n.z+n.parent.m,n.m+=n.parent.m}function u(n,t,e){if(t){for(var r,u=n,i=n,a=t,l=u.parent.children[0],c=u.m,s=i.m,f=a.m,h=l.m;a=Tu(a),u=qu(u),a&&u;)l=qu(l),i=Tu(i),i.a=n,r=a.z+f-u.z-c+o(a._,u._),r>0&&(Ru(Pu(a,n,e),n,r),c+=r,s+=r),f+=a.m,c+=u.m,h+=l.m,s+=i.m;a&&!Tu(i)&&(i.t=a,i.m+=f-s),u&&!qu(l)&&(l.t=u,l.m+=c-h,e=n)}return e}function i(n){n.x*=l[0],n.y=n.depth*l[1]}var a=oa.layout.hierarchy().sort(null).value(null),o=Lu,l=[1,1],c=null;return n.separation=function(t){return arguments.length?(o=t,n):o},n.size=function(t){return arguments.length?(c=null==(l=t)?i:null,n):c?null:l},n.nodeSize=function(t){return arguments.length?(c=null==(l=t)?null:i,n):c?l:null},uu(n,a)},oa.layout.cluster=function(){function n(n,i){var a,o=t.call(this,n,i),l=o[0],c=0;au(l,function(n){var t=n.children;t&&t.length?(n.x=Uu(t),n.y=ju(t)):(n.x=a?c+=e(n,a):0,n.y=0,a=n)});var s=Fu(l),f=Hu(l),h=s.x-e(s,f)/2,g=f.x+e(f,s)/2;return au(l,u?function(n){n.x=(n.x-l.x)*r[0],n.y=(l.y-n.y)*r[1]}:function(n){n.x=(n.x-h)/(g-h)*r[0],n.y=(1-(l.y?n.y/l.y:1))*r[1]}),o}var t=oa.layout.hierarchy().sort(null).value(null),e=Lu,r=[1,1],u=!1;return n.separation=function(t){return arguments.length?(e=t,n):e},n.size=function(t){return arguments.length?(u=null==(r=t),n):u?null:r},n.nodeSize=function(t){return arguments.length?(u=null!=(r=t),n):u?r:null},uu(n,t)},oa.layout.treemap=function(){function n(n,t){for(var e,r,u=-1,i=n.length;++u<i;)r=(e=n[u]).value*(0>t?0:t),e.area=isNaN(r)||0>=r?0:r}function t(e){var i=e.children;if(i&&i.length){var a,o,l,c=f(e),s=[],h=i.slice(),p=1/0,v="slice"===g?c.dx:"dice"===g?c.dy:"slice-dice"===g?1&e.depth?c.dy:c.dx:Math.min(c.dx,c.dy);for(n(h,c.dx*c.dy/e.value),s.area=0;(l=h.length)>0;)s.push(a=h[l-1]),s.area+=a.area,"squarify"!==g||(o=r(s,v))<=p?(h.pop(),p=o):(s.area-=s.pop().area,u(s,v,c,!1),v=Math.min(c.dx,c.dy),s.length=s.area=0,p=1/0);s.length&&(u(s,v,c,!0),s.length=s.area=0),i.forEach(t)}}function e(t){var r=t.children;if(r&&r.length){var i,a=f(t),o=r.slice(),l=[];for(n(o,a.dx*a.dy/t.value),l.area=0;i=o.pop();)l.push(i),l.area+=i.area,null!=i.z&&(u(l,i.z?a.dx:a.dy,a,!o.length),l.length=l.area=0);r.forEach(e)}}function r(n,t){for(var e,r=n.area,u=0,i=1/0,a=-1,o=n.length;++a<o;)(e=n[a].area)&&(i>e&&(i=e),e>u&&(u=e));return r*=r,t*=t,r?Math.max(t*u*p/r,r/(t*i*p)):1/0}function u(n,t,e,r){var u,i=-1,a=n.length,o=e.x,c=e.y,s=t?l(n.area/t):0;
if(t==e.dx){for((r||s>e.dy)&&(s=e.dy);++i<a;)u=n[i],u.x=o,u.y=c,u.dy=s,o+=u.dx=Math.min(e.x+e.dx-o,s?l(u.area/s):0);u.z=!0,u.dx+=e.x+e.dx-o,e.y+=s,e.dy-=s}else{for((r||s>e.dx)&&(s=e.dx);++i<a;)u=n[i],u.x=o,u.y=c,u.dx=s,c+=u.dy=Math.min(e.y+e.dy-c,s?l(u.area/s):0);u.z=!1,u.dy+=e.y+e.dy-c,e.x+=s,e.dx-=s}}function i(r){var u=a||o(r),i=u[0];return i.x=i.y=0,i.value?(i.dx=c[0],i.dy=c[1]):i.dx=i.dy=0,a&&o.revalue(i),n([i],i.dx*i.dy/i.value),(a?e:t)(i),h&&(a=u),u}var a,o=oa.layout.hierarchy(),l=Math.round,c=[1,1],s=null,f=Ou,h=!1,g="squarify",p=.5*(1+Math.sqrt(5));return i.size=function(n){return arguments.length?(c=n,i):c},i.padding=function(n){function t(t){var e=n.call(i,t,t.depth);return null==e?Ou(t):Iu(t,"number"==typeof e?[e,e,e,e]:e)}function e(t){return Iu(t,n)}if(!arguments.length)return s;var r;return f=null==(s=n)?Ou:"function"==(r=typeof n)?t:"number"===r?(n=[n,n,n,n],e):e,i},i.round=function(n){return arguments.length?(l=n?Math.round:Number,i):l!=Number},i.sticky=function(n){return arguments.length?(h=n,a=null,i):h},i.ratio=function(n){return arguments.length?(p=n,i):p},i.mode=function(n){return arguments.length?(g=n+"",i):g},uu(i,o)},oa.random={normal:function(n,t){var e=arguments.length;return 2>e&&(t=1),1>e&&(n=0),function(){var e,r,u;do e=2*Math.random()-1,r=2*Math.random()-1,u=e*e+r*r;while(!u||u>1);return n+t*e*Math.sqrt(-2*Math.log(u)/u)}},logNormal:function(){var n=oa.random.normal.apply(oa,arguments);return function(){return Math.exp(n())}},bates:function(n){var t=oa.random.irwinHall(n);return function(){return t()/n}},irwinHall:function(n){return function(){for(var t=0,e=0;n>e;e++)t+=Math.random();return t}}},oa.scale={};var wl={floor:y,ceil:y};oa.scale.linear=function(){return Wu([0,1],[0,1],Mr,!1)};var Sl={s:1,g:1,p:1,r:1,e:1};oa.scale.log=function(){return ri(oa.scale.linear().domain([0,1]),10,!0,[1,10])};var kl=oa.format(".0e"),Nl={floor:function(n){return-Math.ceil(-n)},ceil:function(n){return-Math.floor(-n)}};oa.scale.pow=function(){return ui(oa.scale.linear(),1,[0,1])},oa.scale.sqrt=function(){return oa.scale.pow().exponent(.5)},oa.scale.ordinal=function(){return ai([],{t:"range",a:[[]]})},oa.scale.category10=function(){return oa.scale.ordinal().range(El)},oa.scale.category20=function(){return oa.scale.ordinal().range(Al)},oa.scale.category20b=function(){return oa.scale.ordinal().range(Cl)},oa.scale.category20c=function(){return oa.scale.ordinal().range(zl)};var El=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(xn),Al=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(xn),Cl=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(xn),zl=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(xn);oa.scale.quantile=function(){return oi([],[])},oa.scale.quantize=function(){return li(0,1,[0,1])},oa.scale.threshold=function(){return ci([.5],[0,1])},oa.scale.identity=function(){return si([0,1])},oa.svg={},oa.svg.arc=function(){function n(){var n=Math.max(0,+e.apply(this,arguments)),c=Math.max(0,+r.apply(this,arguments)),s=a.apply(this,arguments)-Ha,f=o.apply(this,arguments)-Ha,h=Math.abs(f-s),g=s>f?0:1;if(n>c&&(p=c,c=n,n=p),h>=Fa)return t(c,g)+(n?t(n,1-g):"")+"Z";var p,v,d,m,y,M,x,b,_,w,S,k,N=0,E=0,A=[];if((m=(+l.apply(this,arguments)||0)/2)&&(d=i===Ll?Math.sqrt(n*n+c*c):+i.apply(this,arguments),g||(E*=-1),c&&(E=tn(d/c*Math.sin(m))),n&&(N=tn(d/n*Math.sin(m)))),c){y=c*Math.cos(s+E),M=c*Math.sin(s+E),x=c*Math.cos(f-E),b=c*Math.sin(f-E);var C=Math.abs(f-s-2*E)<=ja?0:1;if(E&&mi(y,M,x,b)===g^C){var z=(s+f)/2;y=c*Math.cos(z),M=c*Math.sin(z),x=b=null}}else y=M=0;if(n){_=n*Math.cos(f-N),w=n*Math.sin(f-N),S=n*Math.cos(s+N),k=n*Math.sin(s+N);var L=Math.abs(s-f+2*N)<=ja?0:1;if(N&&mi(_,w,S,k)===1-g^L){var q=(s+f)/2;_=n*Math.cos(q),w=n*Math.sin(q),S=k=null}}else _=w=0;if(h>Da&&(p=Math.min(Math.abs(c-n)/2,+u.apply(this,arguments)))>.001){v=c>n^g?0:1;var T=p,R=p;if(ja>h){var D=null==S?[_,w]:null==x?[y,M]:Re([y,M],[S,k],[x,b],[_,w]),P=y-D[0],j=M-D[1],U=x-D[0],F=b-D[1],H=1/Math.sin(Math.acos((P*U+j*F)/(Math.sqrt(P*P+j*j)*Math.sqrt(U*U+F*F)))/2),O=Math.sqrt(D[0]*D[0]+D[1]*D[1]);R=Math.min(p,(n-O)/(H-1)),T=Math.min(p,(c-O)/(H+1))}if(null!=x){var I=yi(null==S?[_,w]:[S,k],[y,M],c,T,g),Y=yi([x,b],[_,w],c,T,g);p===T?A.push("M",I[0],"A",T,",",T," 0 0,",v," ",I[1],"A",c,",",c," 0 ",1-g^mi(I[1][0],I[1][1],Y[1][0],Y[1][1]),",",g," ",Y[1],"A",T,",",T," 0 0,",v," ",Y[0]):A.push("M",I[0],"A",T,",",T," 0 1,",v," ",Y[0])}else A.push("M",y,",",M);if(null!=S){var Z=yi([y,M],[S,k],n,-R,g),V=yi([_,w],null==x?[y,M]:[x,b],n,-R,g);p===R?A.push("L",V[0],"A",R,",",R," 0 0,",v," ",V[1],"A",n,",",n," 0 ",g^mi(V[1][0],V[1][1],Z[1][0],Z[1][1]),",",1-g," ",Z[1],"A",R,",",R," 0 0,",v," ",Z[0]):A.push("L",V[0],"A",R,",",R," 0 0,",v," ",Z[0])}else A.push("L",_,",",w)}else A.push("M",y,",",M),null!=x&&A.push("A",c,",",c," 0 ",C,",",g," ",x,",",b),A.push("L",_,",",w),null!=S&&A.push("A",n,",",n," 0 ",L,",",1-g," ",S,",",k);return A.push("Z"),A.join("")}function t(n,t){return"M0,"+n+"A"+n+","+n+" 0 1,"+t+" 0,"+-n+"A"+n+","+n+" 0 1,"+t+" 0,"+n}var e=hi,r=gi,u=fi,i=Ll,a=pi,o=vi,l=di;return n.innerRadius=function(t){return arguments.length?(e=En(t),n):e},n.outerRadius=function(t){return arguments.length?(r=En(t),n):r},n.cornerRadius=function(t){return arguments.length?(u=En(t),n):u},n.padRadius=function(t){return arguments.length?(i=t==Ll?Ll:En(t),n):i},n.startAngle=function(t){return arguments.length?(a=En(t),n):a},n.endAngle=function(t){return arguments.length?(o=En(t),n):o},n.padAngle=function(t){return arguments.length?(l=En(t),n):l},n.centroid=function(){var n=(+e.apply(this,arguments)+ +r.apply(this,arguments))/2,t=(+a.apply(this,arguments)+ +o.apply(this,arguments))/2-Ha;return[Math.cos(t)*n,Math.sin(t)*n]},n};var Ll="auto";oa.svg.line=function(){return Mi(y)};var ql=oa.map({linear:xi,"linear-closed":bi,step:_i,"step-before":wi,"step-after":Si,basis:zi,"basis-open":Li,"basis-closed":qi,bundle:Ti,cardinal:Ei,"cardinal-open":ki,"cardinal-closed":Ni,monotone:Fi});ql.forEach(function(n,t){t.key=n,t.closed=/-closed$/.test(n)});var Tl=[0,2/3,1/3,0],Rl=[0,1/3,2/3,0],Dl=[0,1/6,2/3,1/6];oa.svg.line.radial=function(){var n=Mi(Hi);return n.radius=n.x,delete n.x,n.angle=n.y,delete n.y,n},wi.reverse=Si,Si.reverse=wi,oa.svg.area=function(){return Oi(y)},oa.svg.area.radial=function(){var n=Oi(Hi);return n.radius=n.x,delete n.x,n.innerRadius=n.x0,delete n.x0,n.outerRadius=n.x1,delete n.x1,n.angle=n.y,delete n.y,n.startAngle=n.y0,delete n.y0,n.endAngle=n.y1,delete n.y1,n},oa.svg.chord=function(){function n(n,o){var l=t(this,i,n,o),c=t(this,a,n,o);return"M"+l.p0+r(l.r,l.p1,l.a1-l.a0)+(e(l,c)?u(l.r,l.p1,l.r,l.p0):u(l.r,l.p1,c.r,c.p0)+r(c.r,c.p1,c.a1-c.a0)+u(c.r,c.p1,l.r,l.p0))+"Z"}function t(n,t,e,r){var u=t.call(n,e,r),i=o.call(n,u,r),a=l.call(n,u,r)-Ha,s=c.call(n,u,r)-Ha;return{r:i,a0:a,a1:s,p0:[i*Math.cos(a),i*Math.sin(a)],p1:[i*Math.cos(s),i*Math.sin(s)]}}function e(n,t){return n.a0==t.a0&&n.a1==t.a1}function r(n,t,e){return"A"+n+","+n+" 0 "+ +(e>ja)+",1 "+t}function u(n,t,e,r){return"Q 0,0 "+r}var i=Me,a=xe,o=Ii,l=pi,c=vi;return n.radius=function(t){return arguments.length?(o=En(t),n):o},n.source=function(t){return arguments.length?(i=En(t),n):i},n.target=function(t){return arguments.length?(a=En(t),n):a},n.startAngle=function(t){return arguments.length?(l=En(t),n):l},n.endAngle=function(t){return arguments.length?(c=En(t),n):c},n},oa.svg.diagonal=function(){function n(n,u){var i=t.call(this,n,u),a=e.call(this,n,u),o=(i.y+a.y)/2,l=[i,{x:i.x,y:o},{x:a.x,y:o},a];return l=l.map(r),"M"+l[0]+"C"+l[1]+" "+l[2]+" "+l[3]}var t=Me,e=xe,r=Yi;return n.source=function(e){return arguments.length?(t=En(e),n):t},n.target=function(t){return arguments.length?(e=En(t),n):e},n.projection=function(t){return arguments.length?(r=t,n):r},n},oa.svg.diagonal.radial=function(){var n=oa.svg.diagonal(),t=Yi,e=n.projection;return n.projection=function(n){return arguments.length?e(Zi(t=n)):t},n},oa.svg.symbol=function(){function n(n,r){return(Pl.get(t.call(this,n,r))||$i)(e.call(this,n,r))}var t=Xi,e=Vi;return n.type=function(e){return arguments.length?(t=En(e),n):t},n.size=function(t){return arguments.length?(e=En(t),n):e},n};var Pl=oa.map({circle:$i,cross:function(n){var t=Math.sqrt(n/5)/2;return"M"+-3*t+","+-t+"H"+-t+"V"+-3*t+"H"+t+"V"+-t+"H"+3*t+"V"+t+"H"+t+"V"+3*t+"H"+-t+"V"+t+"H"+-3*t+"Z"},diamond:function(n){var t=Math.sqrt(n/(2*Ul)),e=t*Ul;return"M0,"+-t+"L"+e+",0 0,"+t+" "+-e+",0Z"},square:function(n){var t=Math.sqrt(n)/2;return"M"+-t+","+-t+"L"+t+","+-t+" "+t+","+t+" "+-t+","+t+"Z"},"triangle-down":function(n){var t=Math.sqrt(n/jl),e=t*jl/2;return"M0,"+e+"L"+t+","+-e+" "+-t+","+-e+"Z"},"triangle-up":function(n){var t=Math.sqrt(n/jl),e=t*jl/2;return"M0,"+-e+"L"+t+","+e+" "+-t+","+e+"Z"}});oa.svg.symbolTypes=Pl.keys();var jl=Math.sqrt(3),Ul=Math.tan(30*Oa);Aa.transition=function(n){for(var t,e,r=Fl||++Yl,u=Ki(n),i=[],a=Hl||{time:Date.now(),ease:Nr,delay:0,duration:250},o=-1,l=this.length;++o<l;){i.push(t=[]);for(var c=this[o],s=-1,f=c.length;++s<f;)(e=c[s])&&Qi(e,s,u,r,a),t.push(e)}return Wi(i,u,r)},Aa.interrupt=function(n){return this.each(null==n?Ol:Bi(Ki(n)))};var Fl,Hl,Ol=Bi(Ki()),Il=[],Yl=0;Il.call=Aa.call,Il.empty=Aa.empty,Il.node=Aa.node,Il.size=Aa.size,oa.transition=function(n,t){return n&&n.transition?Fl?n.transition(t):n:oa.selection().transition(n)},oa.transition.prototype=Il,Il.select=function(n){var t,e,r,u=this.id,i=this.namespace,a=[];n=A(n);for(var o=-1,l=this.length;++o<l;){a.push(t=[]);for(var c=this[o],s=-1,f=c.length;++s<f;)(r=c[s])&&(e=n.call(r,r.__data__,s,o))?("__data__"in r&&(e.__data__=r.__data__),Qi(e,s,i,u,r[i][u]),t.push(e)):t.push(null)}return Wi(a,i,u)},Il.selectAll=function(n){var t,e,r,u,i,a=this.id,o=this.namespace,l=[];n=C(n);for(var c=-1,s=this.length;++c<s;)for(var f=this[c],h=-1,g=f.length;++h<g;)if(r=f[h]){i=r[o][a],e=n.call(r,r.__data__,h,c),l.push(t=[]);for(var p=-1,v=e.length;++p<v;)(u=e[p])&&Qi(u,p,o,a,i),t.push(u)}return Wi(l,o,a)},Il.filter=function(n){var t,e,r,u=[];"function"!=typeof n&&(n=O(n));for(var i=0,a=this.length;a>i;i++){u.push(t=[]);for(var e=this[i],o=0,l=e.length;l>o;o++)(r=e[o])&&n.call(r,r.__data__,o,i)&&t.push(r)}return Wi(u,this.namespace,this.id)},Il.tween=function(n,t){var e=this.id,r=this.namespace;return arguments.length<2?this.node()[r][e].tween.get(n):Y(this,null==t?function(t){t[r][e].tween.remove(n)}:function(u){u[r][e].tween.set(n,t)})},Il.attr=function(n,t){function e(){this.removeAttribute(o)}function r(){this.removeAttributeNS(o.space,o.local)}function u(n){return null==n?e:(n+="",function(){var t,e=this.getAttribute(o);return e!==n&&(t=a(e,n),function(n){this.setAttribute(o,t(n))})})}function i(n){return null==n?r:(n+="",function(){var t,e=this.getAttributeNS(o.space,o.local);return e!==n&&(t=a(e,n),function(n){this.setAttributeNS(o.space,o.local,t(n))})})}if(arguments.length<2){for(t in n)this.attr(t,n[t]);return this}var a="transform"==n?$r:Mr,o=oa.ns.qualify(n);return Ji(this,"attr."+n,t,o.local?i:u)},Il.attrTween=function(n,t){function e(n,e){var r=t.call(this,n,e,this.getAttribute(u));return r&&function(n){this.setAttribute(u,r(n))}}function r(n,e){var r=t.call(this,n,e,this.getAttributeNS(u.space,u.local));return r&&function(n){this.setAttributeNS(u.space,u.local,r(n))}}var u=oa.ns.qualify(n);return this.tween("attr."+n,u.local?r:e)},Il.style=function(n,e,r){function u(){this.style.removeProperty(n)}function i(e){return null==e?u:(e+="",function(){var u,i=t(this).getComputedStyle(this,null).getPropertyValue(n);return i!==e&&(u=Mr(i,e),function(t){this.style.setProperty(n,u(t),r)})})}var a=arguments.length;if(3>a){if("string"!=typeof n){2>a&&(e="");for(r in n)this.style(r,n[r],e);return this}r=""}return Ji(this,"style."+n,e,i)},Il.styleTween=function(n,e,r){function u(u,i){var a=e.call(this,u,i,t(this).getComputedStyle(this,null).getPropertyValue(n));return a&&function(t){this.style.setProperty(n,a(t),r)}}return arguments.length<3&&(r=""),this.tween("style."+n,u)},Il.text=function(n){return Ji(this,"text",n,Gi)},Il.remove=function(){var n=this.namespace;return this.each("end.transition",function(){var t;this[n].count<2&&(t=this.parentNode)&&t.removeChild(this)})},Il.ease=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].ease:("function"!=typeof n&&(n=oa.ease.apply(oa,arguments)),Y(this,function(r){r[e][t].ease=n}))},Il.delay=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].delay:Y(this,"function"==typeof n?function(r,u,i){r[e][t].delay=+n.call(r,r.__data__,u,i)}:(n=+n,function(r){r[e][t].delay=n}))},Il.duration=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].duration:Y(this,"function"==typeof n?function(r,u,i){r[e][t].duration=Math.max(1,n.call(r,r.__data__,u,i))}:(n=Math.max(1,n),function(r){r[e][t].duration=n}))},Il.each=function(n,t){var e=this.id,r=this.namespace;if(arguments.length<2){var u=Hl,i=Fl;try{Fl=e,Y(this,function(t,u,i){Hl=t[r][e],n.call(t,t.__data__,u,i)})}finally{Hl=u,Fl=i}}else Y(this,function(u){var i=u[r][e];(i.event||(i.event=oa.dispatch("start","end","interrupt"))).on(n,t)});return this},Il.transition=function(){for(var n,t,e,r,u=this.id,i=++Yl,a=this.namespace,o=[],l=0,c=this.length;c>l;l++){o.push(n=[]);for(var t=this[l],s=0,f=t.length;f>s;s++)(e=t[s])&&(r=e[a][u],Qi(e,s,a,i,{time:r.time,ease:r.ease,delay:r.delay+r.duration,duration:r.duration})),n.push(e)}return Wi(o,a,i)},oa.svg.axis=function(){function n(n){n.each(function(){var n,c=oa.select(this),s=this.__chart__||e,f=this.__chart__=e.copy(),h=null==l?f.ticks?f.ticks.apply(f,o):f.domain():l,g=null==t?f.tickFormat?f.tickFormat.apply(f,o):y:t,p=c.selectAll(".tick").data(h,f),v=p.enter().insert("g",".domain").attr("class","tick").style("opacity",Da),d=oa.transition(p.exit()).style("opacity",Da).remove(),m=oa.transition(p.order()).style("opacity",1),M=Math.max(u,0)+a,x=Zu(f),b=c.selectAll(".domain").data([0]),_=(b.enter().append("path").attr("class","domain"),oa.transition(b));v.append("line"),v.append("text");var w,S,k,N,E=v.select("line"),A=m.select("line"),C=p.select("text").text(g),z=v.select("text"),L=m.select("text"),q="top"===r||"left"===r?-1:1;if("bottom"===r||"top"===r?(n=na,w="x",k="y",S="x2",N="y2",C.attr("dy",0>q?"0em":".71em").style("text-anchor","middle"),_.attr("d","M"+x[0]+","+q*i+"V0H"+x[1]+"V"+q*i)):(n=ta,w="y",k="x",S="y2",N="x2",C.attr("dy",".32em").style("text-anchor",0>q?"end":"start"),_.attr("d","M"+q*i+","+x[0]+"H0V"+x[1]+"H"+q*i)),E.attr(N,q*u),z.attr(k,q*M),A.attr(S,0).attr(N,q*u),L.attr(w,0).attr(k,q*M),f.rangeBand){var T=f,R=T.rangeBand()/2;s=f=function(n){return T(n)+R}}else s.rangeBand?s=f:d.call(n,f,s);v.call(n,s,f),m.call(n,f,f)})}var t,e=oa.scale.linear(),r=Zl,u=6,i=6,a=3,o=[10],l=null;return n.scale=function(t){return arguments.length?(e=t,n):e},n.orient=function(t){return arguments.length?(r=t in Vl?t+"":Zl,n):r},n.ticks=function(){return arguments.length?(o=ca(arguments),n):o},n.tickValues=function(t){return arguments.length?(l=t,n):l},n.tickFormat=function(e){return arguments.length?(t=e,n):t},n.tickSize=function(t){var e=arguments.length;return e?(u=+t,i=+arguments[e-1],n):u},n.innerTickSize=function(t){return arguments.length?(u=+t,n):u},n.outerTickSize=function(t){return arguments.length?(i=+t,n):i},n.tickPadding=function(t){return arguments.length?(a=+t,n):a},n.tickSubdivide=function(){return arguments.length&&n},n};var Zl="bottom",Vl={top:1,right:1,bottom:1,left:1};oa.svg.brush=function(){function n(t){t.each(function(){var t=oa.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",i).on("touchstart.brush",i),a=t.selectAll(".background").data([0]);a.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),t.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var o=t.selectAll(".resize").data(v,y);o.exit().remove(),o.enter().append("g").attr("class",function(n){return"resize "+n}).style("cursor",function(n){return Xl[n]}).append("rect").attr("x",function(n){return/[ew]$/.test(n)?-3:null}).attr("y",function(n){return/^[ns]/.test(n)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),o.style("display",n.empty()?"none":null);var l,f=oa.transition(t),h=oa.transition(a);c&&(l=Zu(c),h.attr("x",l[0]).attr("width",l[1]-l[0]),r(f)),s&&(l=Zu(s),h.attr("y",l[0]).attr("height",l[1]-l[0]),u(f)),e(f)})}function e(n){n.selectAll(".resize").attr("transform",function(n){return"translate("+f[+/e$/.test(n)]+","+h[+/^s/.test(n)]+")"})}function r(n){n.select(".extent").attr("x",f[0]),n.selectAll(".extent,.n>rect,.s>rect").attr("width",f[1]-f[0])}function u(n){n.select(".extent").attr("y",h[0]),n.selectAll(".extent,.e>rect,.w>rect").attr("height",h[1]-h[0])}function i(){function i(){32==oa.event.keyCode&&(C||(M=null,L[0]-=f[1],L[1]-=h[1],C=2),S())}function v(){32==oa.event.keyCode&&2==C&&(L[0]+=f[1],L[1]+=h[1],C=0,S())}function d(){var n=oa.mouse(b),t=!1;x&&(n[0]+=x[0],n[1]+=x[1]),C||(oa.event.altKey?(M||(M=[(f[0]+f[1])/2,(h[0]+h[1])/2]),L[0]=f[+(n[0]<M[0])],L[1]=h[+(n[1]<M[1])]):M=null),E&&m(n,c,0)&&(r(k),t=!0),A&&m(n,s,1)&&(u(k),t=!0),t&&(e(k),w({type:"brush",mode:C?"move":"resize"}))}function m(n,t,e){var r,u,i=Zu(t),l=i[0],c=i[1],s=L[e],v=e?h:f,d=v[1]-v[0];return C&&(l-=s,c-=d+s),r=(e?p:g)?Math.max(l,Math.min(c,n[e])):n[e],C?u=(r+=s)+d:(M&&(s=Math.max(l,Math.min(c,2*M[e]-r))),r>s?(u=r,r=s):u=s),v[0]!=r||v[1]!=u?(e?o=null:a=null,v[0]=r,v[1]=u,!0):void 0}function y(){d(),k.style("pointer-events","all").selectAll(".resize").style("display",n.empty()?"none":null),oa.select("body").style("cursor",null),q.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),z(),w({type:"brushend"})}var M,x,b=this,_=oa.select(oa.event.target),w=l.of(b,arguments),k=oa.select(b),N=_.datum(),E=!/^(n|s)$/.test(N)&&c,A=!/^(e|w)$/.test(N)&&s,C=_.classed("extent"),z=W(b),L=oa.mouse(b),q=oa.select(t(b)).on("keydown.brush",i).on("keyup.brush",v);if(oa.event.changedTouches?q.on("touchmove.brush",d).on("touchend.brush",y):q.on("mousemove.brush",d).on("mouseup.brush",y),k.interrupt().selectAll("*").interrupt(),C)L[0]=f[0]-L[0],L[1]=h[0]-L[1];else if(N){var T=+/w$/.test(N),R=+/^n/.test(N);x=[f[1-T]-L[0],h[1-R]-L[1]],L[0]=f[T],L[1]=h[R]}else oa.event.altKey&&(M=L.slice());k.style("pointer-events","none").selectAll(".resize").style("display",null),oa.select("body").style("cursor",_.style("cursor")),w({type:"brushstart"}),d()}var a,o,l=N(n,"brushstart","brush","brushend"),c=null,s=null,f=[0,0],h=[0,0],g=!0,p=!0,v=$l[0];return n.event=function(n){n.each(function(){var n=l.of(this,arguments),t={x:f,y:h,i:a,j:o},e=this.__chart__||t;this.__chart__=t,Fl?oa.select(this).transition().each("start.brush",function(){a=e.i,o=e.j,f=e.x,h=e.y,n({type:"brushstart"})}).tween("brush:brush",function(){var e=xr(f,t.x),r=xr(h,t.y);return a=o=null,function(u){f=t.x=e(u),h=t.y=r(u),n({type:"brush",mode:"resize"})}}).each("end.brush",function(){a=t.i,o=t.j,n({type:"brush",mode:"resize"}),n({type:"brushend"})}):(n({type:"brushstart"}),n({type:"brush",mode:"resize"}),n({type:"brushend"}))})},n.x=function(t){return arguments.length?(c=t,v=$l[!c<<1|!s],n):c},n.y=function(t){return arguments.length?(s=t,v=$l[!c<<1|!s],n):s},n.clamp=function(t){return arguments.length?(c&&s?(g=!!t[0],p=!!t[1]):c?g=!!t:s&&(p=!!t),n):c&&s?[g,p]:c?g:s?p:null},n.extent=function(t){var e,r,u,i,l;return arguments.length?(c&&(e=t[0],r=t[1],s&&(e=e[0],r=r[0]),a=[e,r],c.invert&&(e=c(e),r=c(r)),e>r&&(l=e,e=r,r=l),(e!=f[0]||r!=f[1])&&(f=[e,r])),s&&(u=t[0],i=t[1],c&&(u=u[1],i=i[1]),o=[u,i],s.invert&&(u=s(u),i=s(i)),u>i&&(l=u,u=i,i=l),(u!=h[0]||i!=h[1])&&(h=[u,i])),n):(c&&(a?(e=a[0],r=a[1]):(e=f[0],r=f[1],c.invert&&(e=c.invert(e),r=c.invert(r)),e>r&&(l=e,e=r,r=l))),s&&(o?(u=o[0],i=o[1]):(u=h[0],i=h[1],s.invert&&(u=s.invert(u),i=s.invert(i)),u>i&&(l=u,u=i,i=l))),c&&s?[[e,u],[r,i]]:c?[e,r]:s&&[u,i])},n.clear=function(){return n.empty()||(f=[0,0],h=[0,0],a=o=null),n},n.empty=function(){return!!c&&f[0]==f[1]||!!s&&h[0]==h[1]},oa.rebind(n,l,"on")};var Xl={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},$l=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],Bl=ho.format=Mo.timeFormat,Wl=Bl.utc,Jl=Wl("%Y-%m-%dT%H:%M:%S.%LZ");Bl.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?ea:Jl,ea.parse=function(n){var t=new Date(n);return isNaN(t)?null:t},ea.toString=Jl.toString,ho.second=On(function(n){return new go(1e3*Math.floor(n/1e3))},function(n,t){n.setTime(n.getTime()+1e3*Math.floor(t))},function(n){return n.getSeconds()}),ho.seconds=ho.second.range,ho.seconds.utc=ho.second.utc.range,ho.minute=On(function(n){return new go(6e4*Math.floor(n/6e4))},function(n,t){n.setTime(n.getTime()+6e4*Math.floor(t))},function(n){return n.getMinutes()}),ho.minutes=ho.minute.range,ho.minutes.utc=ho.minute.utc.range,ho.hour=On(function(n){var t=n.getTimezoneOffset()/60;return new go(36e5*(Math.floor(n/36e5-t)+t))},function(n,t){n.setTime(n.getTime()+36e5*Math.floor(t))},function(n){return n.getHours()}),ho.hours=ho.hour.range,ho.hours.utc=ho.hour.utc.range,ho.month=On(function(n){return n=ho.day(n),n.setDate(1),n},function(n,t){n.setMonth(n.getMonth()+t)},function(n){return n.getMonth()}),ho.months=ho.month.range,ho.months.utc=ho.month.utc.range;var Gl=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],Kl=[[ho.second,1],[ho.second,5],[ho.second,15],[ho.second,30],[ho.minute,1],[ho.minute,5],[ho.minute,15],[ho.minute,30],[ho.hour,1],[ho.hour,3],[ho.hour,6],[ho.hour,12],[ho.day,1],[ho.day,2],[ho.week,1],[ho.month,1],[ho.month,3],[ho.year,1]],Ql=Bl.multi([[".%L",function(n){return n.getMilliseconds()}],[":%S",function(n){return n.getSeconds()}],["%I:%M",function(n){return n.getMinutes()}],["%I %p",function(n){return n.getHours()}],["%a %d",function(n){return n.getDay()&&1!=n.getDate()}],["%b %d",function(n){return 1!=n.getDate()}],["%B",function(n){return n.getMonth()}],["%Y",zt]]),nc={range:function(n,t,e){return oa.range(Math.ceil(n/e)*e,+t,e).map(ua)},floor:y,ceil:y};Kl.year=ho.year,ho.scale=function(){return ra(oa.scale.linear(),Kl,Ql)};var tc=Kl.map(function(n){return[n[0].utc,n[1]]}),ec=Wl.multi([[".%L",function(n){return n.getUTCMilliseconds()}],[":%S",function(n){return n.getUTCSeconds()}],["%I:%M",function(n){return n.getUTCMinutes()}],["%I %p",function(n){return n.getUTCHours()}],["%a %d",function(n){return n.getUTCDay()&&1!=n.getUTCDate()}],["%b %d",function(n){return 1!=n.getUTCDate()}],["%B",function(n){return n.getUTCMonth()}],["%Y",zt]]);tc.year=ho.year.utc,ho.scale.utc=function(){return ra(oa.scale.linear(),tc,ec)},oa.text=An(function(n){return n.responseText}),oa.json=function(n,t){return Cn(n,"application/json",ia,t)},oa.html=function(n,t){return Cn(n,"text/html",aa,t)},oa.xml=An(function(n){return n.responseXML}),"function"==typeof define&&define.amd?(this.d3=oa,define(oa)):"object"==typeof module&&module.exports?module.exports=oa:this.d3=oa}();

//d3.layout.cloud.js
(function(f) {
	
	define = undefined, 
	module = undefined, 
	exports = undefined;
	
    if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f()
    } else if (typeof define === "function" && define.amd) {
        define([], f)
    } else {
        var g;
        if (typeof window !== "undefined") {
            g = window
        } else if (typeof global !== "undefined") {
            g = global
        } else if (typeof self !== "undefined") {
            g = self
        } else {
            g = this
        }
        g = (g.d3 || (g.d3 = {}));
        g = (g.layout || (g.layout = {}));
        g.cloud = f()
    }
})(function() {
        var define, module, exports;
        return (function e(t, n, r) {
                function s(o, u) {
                    if (!n[o]) {
                        if (!t[o]) {
                            var a = typeof require == "function" && require;
                            if (!u && a) return a(o, !0);
                            if (i) return i(o, !0);
                            var f = new Error("Cannot find module '" + o + "'");
                            throw f.code = "MODULE_NOT_FOUND", f
                        }
                        var l = n[o] = {
                            exports: {}
                        };
                        t[o][0].call(l.exports, function(e) {
                            var n = t[o][1][e];
                            return s(n ? n : e)
                        }, l, l.exports, e, t, n, r)
                    }
                    return n[o].exports
                }
                var i = typeof require == "function" && require;
                for (var o = 0; o < r.length; o++) s(r[o]);
                return s
            })({
                    1: [function(require, module, exports) {// Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/
// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf

var dispatch = require("d3-dispatch").dispatch;
var cloudRadians = Math.PI / 180,
    cw = 1 << 11 >> 5,
    ch = 1 << 11;

module.exports = function() {
  var size = [256, 256],
      text = cloudText,
      font = cloudFont,
      fontSize = cloudFontSize,
      fontStyle = cloudFontNormal,
      fontWeight = cloudFontNormal,
      rotate = cloudRotate,
      padding = cloudPadding,
      spiral = archimedeanSpiral,
      words = [],
      timeInterval = Infinity,
      event = dispatch("word", "end"),
      timer = null,
      random = Math.random,
      cloud = {},
      canvas = cloudCanvas;

  cloud.canvas = function(_) {
    return arguments.length ? (canvas = functor(_), cloud) : canvas;
  };

  cloud.start = function() {
    var contextAndRatio = getContext(canvas()),
        board = zeroArray((size[0] >> 5) * size[1]),
        bounds = null,
        n = words.length,
        i = -1,
        tags = [],
        data = words.map(function(d, i) {
          d.text = text.call(this, d, i);
          d.font = font.call(this, d, i);
          d.style = fontStyle.call(this, d, i);
          d.weight = fontWeight.call(this, d, i);
          d.rotate = rotate.call(this, d, i);
          d.size = ~~fontSize.call(this, d, i);
          d.padding = padding.call(this, d, i);
          return d;
        }).sort(function(a, b) { return b.size - a.size; });

    if (timer) clearInterval(timer);
    timer = setInterval(step, 0);
    step();

    return cloud;

    function step() {
      var start = Date.now();
      while (Date.now() - start < timeInterval && ++i < n && timer) {
        var d = data[i];
        d.x = (size[0] * (random() + .5)) >> 1;
        d.y = (size[1] * (random() + .5)) >> 1;
        cloudSprite(contextAndRatio, d, data, i);
        if (d.hasText && place(board, d, bounds)) {
          tags.push(d);
          event.word(d);
          if (bounds) cloudBounds(bounds, d);
          else bounds = [{x: d.x + d.x0, y: d.y + d.y0}, {x: d.x + d.x1, y: d.y + d.y1}];
          // Temporary hack
          d.x -= size[0] >> 1;
          d.y -= size[1] >> 1;
        }
      }
      if (i >= n) {
        cloud.stop();
        event.end(tags, bounds);
      }
    }
  }

  cloud.stop = function() {
    if (timer) {
      clearInterval(timer);
      timer = null;
    }
    return cloud;
  };

  function getContext(canvas) {
    canvas.width = canvas.height = 1;
    var ratio = Math.sqrt(canvas.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2);
    canvas.width = (cw << 5) / ratio;
    canvas.height = ch / ratio;

    var context = canvas.getContext("2d");
    context.fillStyle = context.strokeStyle = "red";
    context.textAlign = "center";

    return {context: context, ratio: ratio};
  }

  function place(board, tag, bounds) {
    var perimeter = [{x: 0, y: 0}, {x: size[0], y: size[1]}],
        startX = tag.x,
        startY = tag.y,
        maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),
        s = spiral(size),
        dt = random() < .5 ? 1 : -1,
        t = -dt,
        dxdy,
        dx,
        dy;

    while (dxdy = s(t += dt)) {
      dx = ~~dxdy[0];
      dy = ~~dxdy[1];

      if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;

      tag.x = startX + dx;
      tag.y = startY + dy;

      if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 ||
          tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;
      // TODO only check for collisions within current bounds.
      if (!bounds || !cloudCollide(tag, board, size[0])) {
        if (!bounds || collideRects(tag, bounds)) {
          var sprite = tag.sprite,
              w = tag.width >> 5,
              sw = size[0] >> 5,
              lx = tag.x - (w << 4),
              sx = lx & 0x7f,
              msx = 32 - sx,
              h = tag.y1 - tag.y0,
              x = (tag.y + tag.y0) * sw + (lx >> 5),
              last;
          for (var j = 0; j < h; j++) {
            last = 0;
            for (var i = 0; i <= w; i++) {
              board[x + i] |= (last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);
            }
            x += sw;
          }
          delete tag.sprite;
          return true;
        }
      }
    }
    return false;
  }

  cloud.timeInterval = function(_) {
    return arguments.length ? (timeInterval = _ == null ? Infinity : _, cloud) : timeInterval;
  };

  cloud.words = function(_) {
    return arguments.length ? (words = _, cloud) : words;
  };

  cloud.size = function(_) {
    return arguments.length ? (size = [+_[0], +_[1]], cloud) : size;
  };

  cloud.font = function(_) {
    return arguments.length ? (font = functor(_), cloud) : font;
  };

  cloud.fontStyle = function(_) {
    return arguments.length ? (fontStyle = functor(_), cloud) : fontStyle;
  };

  cloud.fontWeight = function(_) {
    return arguments.length ? (fontWeight = functor(_), cloud) : fontWeight;
  };

  cloud.rotate = function(_) {
    return arguments.length ? (rotate = functor(_), cloud) : rotate;
  };

  cloud.text = function(_) {
    return arguments.length ? (text = functor(_), cloud) : text;
  };

  cloud.spiral = function(_) {
    return arguments.length ? (spiral = spirals[_] || _, cloud) : spiral;
  };

  cloud.fontSize = function(_) {
    return arguments.length ? (fontSize = functor(_), cloud) : fontSize;
  };

  cloud.padding = function(_) {
    return arguments.length ? (padding = functor(_), cloud) : padding;
  };

  cloud.random = function(_) {
    return arguments.length ? (random = _, cloud) : random;
  };

  cloud.on = function() {
    var value = event.on.apply(event, arguments);
    return value === event ? cloud : value;
  };

  return cloud;
};

function cloudText(d) {
  return d.text;
}

function cloudFont() {
  return "serif";
}

function cloudFontNormal() {
  return "normal";
}

function cloudFontSize(d) {
  return Math.sqrt(d.value);
}

function cloudRotate() {
  return (~~(Math.random() * 6) - 3) * 30;
}

function cloudPadding() {
  return 1;
}

// Fetches a monochrome sprite bitmap for the specified text.
// Load in batches for speed.
function cloudSprite(contextAndRatio, d, data, di) {
  if (d.sprite) return;
  var c = contextAndRatio.context,
      ratio = contextAndRatio.ratio;

  c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
  var x = 0,
      y = 0,
      maxh = 0,
      n = data.length;
  --di;
  while (++di < n) {
    d = data[di];
    c.save();
    c.font = d.style + " " + d.weight + " " + ~~((d.size + 1) / ratio) + "px " + d.font;
    var w = c.measureText(d.text + "m").width * ratio,
        h = d.size << 1;
    if (d.rotate) {
      var sr = Math.sin(d.rotate * cloudRadians),
          cr = Math.cos(d.rotate * cloudRadians),
          wcr = w * cr,
          wsr = w * sr,
          hcr = h * cr,
          hsr = h * sr;
      w = (Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f) >> 5 << 5;
      h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
    } else {
      w = (w + 0x1f) >> 5 << 5;
    }
    if (h > maxh) maxh = h;
    if (x + w >= (cw << 5)) {
      x = 0;
      y += maxh;
      maxh = 0;
    }
    if (y + h >= ch) break;
    c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);
    if (d.rotate) c.rotate(d.rotate * cloudRadians);
    c.fillText(d.text, 0, 0);
    if (d.padding) c.lineWidth = 2 * d.padding, c.strokeText(d.text, 0, 0);
    c.restore();
    d.width = w;
    d.height = h;
    d.xoff = x;
    d.yoff = y;
    d.x1 = w >> 1;
    d.y1 = h >> 1;
    d.x0 = -d.x1;
    d.y0 = -d.y1;
    d.hasText = true;
    x += w;
  }
  var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,
      sprite = [];
  while (--di >= 0) {
    d = data[di];
    if (!d.hasText) continue;
    var w = d.width,
        w32 = w >> 5,
        h = d.y1 - d.y0;
    // Zero the buffer
    for (var i = 0; i < h * w32; i++) sprite[i] = 0;
    x = d.xoff;
    if (x == null) return;
    y = d.yoff;
    var seen = 0,
        seenRow = -1;
    for (var j = 0; j < h; j++) {
      for (var i = 0; i < w; i++) {
        var k = w32 * j + (i >> 5),
            m = pixels[((y + j) * (cw << 5) + (x + i)) << 2] ? 1 << (31 - (i % 32)) : 0;
        sprite[k] |= m;
        seen |= m;
      }
      if (seen) seenRow = j;
      else {
        d.y0++;
        h--;
        j--;
        y++;
      }
    }
    d.y1 = d.y0 + seenRow;
    d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
  }
}

// Use mask-based collision detection.
function cloudCollide(tag, board, sw) {
  sw >>= 5;
  var sprite = tag.sprite,
      w = tag.width >> 5,
      lx = tag.x - (w << 4),
      sx = lx & 0x7f,
      msx = 32 - sx,
      h = tag.y1 - tag.y0,
      x = (tag.y + tag.y0) * sw + (lx >> 5),
      last;
  for (var j = 0; j < h; j++) {
    last = 0;
    for (var i = 0; i <= w; i++) {
      if (((last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0))
          & board[x + i]) return true;
    }
    x += sw;
  }
  return false;
}

function cloudBounds(bounds, d) {
  var b0 = bounds[0],
      b1 = bounds[1];
  if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;
  if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;
  if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;
  if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;
}

function collideRects(a, b) {
  return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;
}

function archimedeanSpiral(size) {
  var e = size[0] / size[1];
  return function(t) {
    return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];
  };
}

function rectangularSpiral(size) {
  var dy = 4,
      dx = dy * size[0] / size[1],
      x = 0,
      y = 0;
  return function(t) {
    var sign = t < 0 ? -1 : 1;
    // See triangular numbers: T_n = n * (n + 1) / 2.
    switch ((Math.sqrt(1 + 4 * sign * t) - sign) & 3) {
      case 0:  x += dx; break;
      case 1:  y += dy; break;
      case 2:  x -= dx; break;
      default: y -= dy; break;
    }
    return [x, y];
  };
}

// TODO reuse arrays?
function zeroArray(n) {
  var a = [],
      i = -1;
  while (++i < n) a[i] = 0;
  return a;
}

function cloudCanvas() {
  return document.createElement("canvas");
}

function functor(d) {
  return typeof d === "function" ? d : function() { return d; };
}

var spirals = {
  archimedean: archimedeanSpiral,
  rectangular: rectangularSpiral
};

},{"d3-dispatch":2}],2:[function(require,module,exports){
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  factory((global.dispatch = {}));
}(this, function (exports) { 'use strict';

  function Dispatch(types) {
    var i = -1,
        n = types.length,
        callbacksByType = {},
        callbackByName = {},
        type,
        that = this;

    that.on = function(type, callback) {
      type = parseType(type);

      // Return the current callback, if any.
      if (arguments.length < 2) {
        return (callback = callbackByName[type.name]) && callback.value;
      }

      // If a type was specified…
      if (type.type) {
        var callbacks = callbacksByType[type.type],
            callback0 = callbackByName[type.name],
            i;

        // Remove the current callback, if any, using copy-on-remove.
        if (callback0) {
          callback0.value = null;
          i = callbacks.indexOf(callback0);
          callbacksByType[type.type] = callbacks = callbacks.slice(0, i).concat(callbacks.slice(i + 1));
          delete callbackByName[type.name];
        }

        // Add the new callback, if any.
        if (callback) {
          callback = {value: callback};
          callbackByName[type.name] = callback;
          callbacks.push(callback);
        }
      }

      // Otherwise, if a null callback was specified, remove all callbacks with the given name.
      else if (callback == null) {
        for (var otherType in callbacksByType) {
          if (callback = callbackByName[otherType + type.name]) {
            callback.value = null;
            var callbacks = callbacksByType[otherType], i = callbacks.indexOf(callback);
            callbacksByType[otherType] = callbacks.slice(0, i).concat(callbacks.slice(i + 1));
            delete callbackByName[callback.name];
          }
        }
      }

      return that;
    };

    while (++i < n) {
      type = types[i] + "";
      if (!type || (type in that)) throw new Error("illegal or duplicate type: " + type);
      callbacksByType[type] = [];
      that[type] = applier(type);
    }

    function parseType(type) {
      var i = (type += "").indexOf("."), name = type;
      if (i >= 0) type = type.slice(0, i); else name += ".";
      if (type && !callbacksByType.hasOwnProperty(type)) throw new Error("unknown type: " + type);
      return {type: type, name: name};
    }

    function applier(type) {
      return function() {
        var callbacks = callbacksByType[type], // Defensive reference; copy-on-remove.
            callback,
            callbackValue,
            i = -1,
            n = callbacks.length;

        while (++i < n) {
          if (callbackValue = (callback = callbacks[i]).value) {
            callbackValue.apply(this, arguments);
          }
        }

        return that;
      };
    }
  }

  function dispatch() {
    return new Dispatch(arguments);
  }

  dispatch.prototype = Dispatch.prototype; // allow instanceof

  exports.dispatch = dispatch;

}));
},{}]},{},[1])(1)
});
//d3.layout.cloud.js


(function() {

	// Inspired by http://informationandvisualization.de/blog/box-plot
	d3.box = function() {
	  var width = 1,
	      height = 1,
	      duration = 0,
	      domain = null,
	      value = Number,
	      whiskers = boxWhiskers,
	      quartiles = boxQuartiles,
		  showLabels = true, // whether or not to show text labels
		  numBars = 4,
		  curBar = 1,
	      tickFormat = null;

	  // For each small multiple…
	  function box(g) {
	    g.each(function(data, i) {
	      //d = d.map(value).sort(d3.ascending);
		  //var boxIndex = data[0];
		  //var boxIndex = 1;
		  var d = data[1].sort(d3.ascending);
		  
	      var g = d3.select(this),
	          n = d.length,
	          min = d[0],
	          max = d[n - 1];

	      // Compute quartiles. Must return exactly 3 elements.
	      var quartileData = d.quartiles = quartiles(d);

	      // Compute whiskers. Must return exactly 2 elements, or null.
	      var whiskerIndices = whiskers && whiskers.call(this, d, i),
	          whiskerData = whiskerIndices && whiskerIndices.map(function(i) { return d[i]; });

	      // Compute outliers. If no whiskers are specified, all data are "outliers".
	      // We compute the outliers as indices, so that we can join across transitions!
	      var outlierIndices = whiskerIndices
	          ? d3.range(0, whiskerIndices[0]).concat(d3.range(whiskerIndices[1] + 1, n))
	          : d3.range(n);

	      // Compute the new x-scale.
	      var x1 = d3.scale.linear()
	          .domain(domain && domain.call(this, d, i) || [min, max])
	          .range([height, 0]);

	      // Retrieve the old x-scale, if this is an update.
	      var x0 = this.__chart__ || d3.scale.linear()
	          .domain([0, Infinity])
			 // .domain([0, max])
	          .range(x1.range());

	      // Stash the new scale.
	      this.__chart__ = x1;

	      // Note: the box, median, and box tick elements are fixed in number,
	      // so we only have to handle enter and update. In contrast, the outliers
	      // and other elements are variable, so we need to exit them! Variable
	      // elements also fade in and out.

	      // Update center line: the vertical line spanning the whiskers.
	      var center = g.selectAll("line.center")
	          .data(whiskerData ? [whiskerData] : []);

		 //vertical line
	      center.enter().insert("line", "rect")
	          .attr("class", "center")
	          .attr("x1", width / 2)
	          .attr("y1", function(d) { return x0(d[0]); })
	          .attr("x2", width / 2)
	          .attr("y2", function(d) { return x0(d[1]); })
	          .style("opacity", 1e-6)
	        .transition()
	          .duration(duration)
	          .style("opacity", 1)
	          .attr("y1", function(d) { return x1(d[0]); })
	          .attr("y2", function(d) { return x1(d[1]); });

	      center.transition()
	          .duration(duration)
	          .style("opacity", 1)
	          .attr("y1", function(d) { return x1(d[0]); })
	          .attr("y2", function(d) { return x1(d[1]); });

	      center.exit().transition()
	          .duration(duration)
	          .style("opacity", 1e-6)
	          .attr("y1", function(d) { return x1(d[0]); })
	          .attr("y2", function(d) { return x1(d[1]); })
	          .remove();

	      // Update innerquartile box.
	      var box = g.selectAll("rect.box")
	          .data([quartileData]);

	      box.enter().append("rect")
	          .attr("class", "box")
	          .attr("x", 0)
	          .attr("y", function(d) { return x0(d[2]); })
	          .attr("width", width)
	          .attr("height", function(d) { return x0(d[0]) - x0(d[2]); })
	        .transition()
	          .duration(duration)
	          .attr("y", function(d) { return x1(d[2]); })
	          .attr("height", function(d) { return x1(d[0]) - x1(d[2]); });

	      box.transition()
	          .duration(duration)
	          .attr("y", function(d) { return x1(d[2]); })
	          .attr("height", function(d) { return x1(d[0]) - x1(d[2]); });

	      // Update median line.
	      var medianLine = g.selectAll("line.median")
	          .data([quartileData[1]]);

	      medianLine.enter().append("line")
	          .attr("class", "median")
	          .attr("x1", 0)
	          .attr("y1", x0)
	          .attr("x2", width)
	          .attr("y2", x0)
	        .transition()
	          .duration(duration)
	          .attr("y1", x1)
	          .attr("y2", x1);

	      medianLine.transition()
	          .duration(duration)
	          .attr("y1", x1)
	          .attr("y2", x1);

	      // Update whiskers.
	      var whisker = g.selectAll("line.whisker")
	          .data(whiskerData || []);

	      whisker.enter().insert("line", "circle, text")
	          .attr("class", "whisker")
	          .attr("x1", 0)
	          .attr("y1", x0)
	          .attr("x2", 0 + width)
	          .attr("y2", x0)
	          .style("opacity", 1e-6)
	        .transition()
	          .duration(duration)
	          .attr("y1", x1)
	          .attr("y2", x1)
	          .style("opacity", 1);

	      whisker.transition()
	          .duration(duration)
	          .attr("y1", x1)
	          .attr("y2", x1)
	          .style("opacity", 1);

	      whisker.exit().transition()
	          .duration(duration)
	          .attr("y1", x1)
	          .attr("y2", x1)
	          .style("opacity", 1e-6)
	          .remove();

	      // Update outliers.
	      var outlier = g.selectAll("circle.outlier")
	          .data(outlierIndices, Number);

	      outlier.enter().insert("circle", "text")
	          .attr("class", "outlier")
	          .attr("r", 5)
	          .attr("cx", width / 2)
	          .attr("cy", function(i) { return x0(d[i]); })
	          .style("opacity", 1e-6)
	        .transition()
	          .duration(duration)
	          .attr("cy", function(i) { return x1(d[i]); })
	          .style("opacity", 1);

	      outlier.transition()
	          .duration(duration)
	          .attr("cy", function(i) { return x1(d[i]); })
	          .style("opacity", 1);

	      outlier.exit().transition()
	          .duration(duration)
	          .attr("cy", function(i) { return x1(d[i]); })
	          .style("opacity", 1e-6)
	          .remove();

	      // Compute the tick format.
	      var format = tickFormat || x1.tickFormat(8);

	      // Update box ticks.
	      var boxTick = g.selectAll("text.box")
	          .data(quartileData);
		 if(showLabels == true) {
	      boxTick.enter().append("text")
	          .attr("class", "box")
	          .attr("dy", ".3em")
	          .attr("dx", function(d, i) { return i & 1 ? 6 : -6 })
	          .attr("x", function(d, i) { return i & 1 ?  + width : 0 })
	          .attr("y", x0)
	          .attr("text-anchor", function(d, i) { return i & 1 ? "start" : "end"; })
	          .text(format)
	        .transition()
	          .duration(duration)
	          .attr("y", x1);
		}
			 
	      boxTick.transition()
	          .duration(duration)
	          .text(format)
	          .attr("y", x1);

	      // Update whisker ticks. These are handled separately from the box
	      // ticks because they may or may not exist, and we want don't want
	      // to join box ticks pre-transition with whisker ticks post-.
	      var whiskerTick = g.selectAll("text.whisker")
	          .data(whiskerData || []);
		if(showLabels == true) {
	      whiskerTick.enter().append("text")
	          .attr("class", "whisker")
	          .attr("dy", ".3em")
	          .attr("dx", 6)
	          .attr("x", width)
	          .attr("y", x0)
	          .text(format)
	          .style("opacity", 1e-6)
	        .transition()
	          .duration(duration)
	          .attr("y", x1)
	          .style("opacity", 1);
		}
	      whiskerTick.transition()
	          .duration(duration)
	          .text(format)
	          .attr("y", x1)
	          .style("opacity", 1);

	      whiskerTick.exit().transition()
	          .duration(duration)
	          .attr("y", x1)
	          .style("opacity", 1e-6)
	          .remove();
	    });
	    d3.timer.flush();
	  }

	  box.width = function(x) {
	    if (!arguments.length) return width;
	    width = x;
	    return box;
	  };

	  box.height = function(x) {
	    if (!arguments.length) return height;
	    height = x;
	    return box;
	  };

	  box.tickFormat = function(x) {
	    if (!arguments.length) return tickFormat;
	    tickFormat = x;
	    return box;
	  };

	  box.duration = function(x) {
	    if (!arguments.length) return duration;
	    duration = x;
	    return box;
	  };

	  box.domain = function(x) {
	    if (!arguments.length) return domain;
	    domain = x == null ? x : d3.functor(x);
	    return box;
	  };

	  box.value = function(x) {
	    if (!arguments.length) return value;
	    value = x;
	    return box;
	  };

	  box.whiskers = function(x) {
	    if (!arguments.length) return whiskers;
	    whiskers = x;
	    return box;
	  };
	  
	  box.showLabels = function(x) {
	    if (!arguments.length) return showLabels;
	    showLabels = x;
	    return box;
	  };

	  box.quartiles = function(x) {
	    if (!arguments.length) return quartiles;
	    quartiles = x;
	    return box;
	  };

	  return box;
	};

	function boxWhiskers(d) {
	  return [0, d.length - 1];
	}

	function boxQuartiles(d) {
	  return [
	    d3.quantile(d, .25),
	    d3.quantile(d, .5),
	    d3.quantile(d, .75)
	  ];
	}

	})();


/*!
Papa Parse
v4.2.0
https://github.com/mholt/PapaParse
*/
!function(a,b){a.Papa=b()}(this,function(){"use strict";function a(a,b){if(b=b||{},b.dynamicTyping=b.dynamicTyping||!1,b.worker&&z.WORKERS_SUPPORTED){var c=k();return c.userStep=b.step,c.userChunk=b.chunk,c.userComplete=b.complete,c.userError=b.error,b.step=r(b.step),b.chunk=r(b.chunk),b.complete=r(b.complete),b.error=r(b.error),delete b.worker,void c.postMessage({input:a,config:b,workerId:c.id})}var h=null;return"string"==typeof a?h=b.download?new d(b):new f(b):a.readable===!0&&"function"==typeof a.read&&"function"==typeof a.on?h=new g(b):(t.File&&a instanceof File||a instanceof Object)&&(h=new e(b)),h.stream(a)}function b(a,b){function c(){"object"==typeof b&&("string"==typeof b.delimiter&&1===b.delimiter.length&&z.BAD_DELIMITERS.indexOf(b.delimiter)===-1&&(j=b.delimiter),("boolean"==typeof b.quotes||b.quotes instanceof Array)&&(h=b.quotes),"string"==typeof b.newline&&(k=b.newline),"string"==typeof b.quoteChar&&(l=b.quoteChar),"boolean"==typeof b.header&&(i=b.header))}function d(a){if("object"!=typeof a)return[];var b=[];for(var c in a)b.push(c);return b}function e(a,b){var c="";"string"==typeof a&&(a=JSON.parse(a)),"string"==typeof b&&(b=JSON.parse(b));var d=a instanceof Array&&a.length>0,e=!(b[0]instanceof Array);if(d&&i){for(var g=0;g<a.length;g++)g>0&&(c+=j),c+=f(a[g],g);b.length>0&&(c+=k)}for(var h=0;h<b.length;h++){for(var l=d?a.length:b[h].length,m=0;m<l;m++){m>0&&(c+=j);var n=d&&e?a[m]:m;c+=f(b[h][n],m)}h<b.length-1&&(c+=k)}return c}function f(a,b){if("undefined"==typeof a||null===a)return"";a=a.toString().replace(m,l+l);var c="boolean"==typeof h&&h||h instanceof Array&&h[b]||g(a,z.BAD_DELIMITERS)||a.indexOf(j)>-1||" "===a.charAt(0)||" "===a.charAt(a.length-1);return c?l+a+l:a}function g(a,b){for(var c=0;c<b.length;c++)if(a.indexOf(b[c])>-1)return!0;return!1}var h=!1,i=!0,j=",",k="\r\n",l='"';c();var m=new RegExp(l,"g");if("string"==typeof a&&(a=JSON.parse(a)),a instanceof Array){if(!a.length||a[0]instanceof Array)return e(null,a);if("object"==typeof a[0])return e(d(a[0]),a)}else if("object"==typeof a)return"string"==typeof a.data&&(a.data=JSON.parse(a.data)),a.data instanceof Array&&(a.fields||(a.fields=a.meta&&a.meta.fields),a.fields||(a.fields=a.data[0]instanceof Array?a.fields:d(a.data[0])),a.data[0]instanceof Array||"object"==typeof a.data[0]||(a.data=[a.data])),e(a.fields||[],a.data||[]);throw"exception: Unable to serialize unrecognized input"}function c(a){function b(a){var b=p(a);b.chunkSize=parseInt(b.chunkSize),a.step||a.chunk||(b.chunkSize=null),this._handle=new h(b),this._handle.streamer=this,this._config=b}this._handle=null,this._paused=!1,this._finished=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},b.call(this,a),this.parseChunk=function(a){if(this.isFirstChunk&&r(this._config.beforeFirstChunk)){var b=this._config.beforeFirstChunk(a);void 0!==b&&(a=b)}this.isFirstChunk=!1;var c=this._partialLine+a;this._partialLine="";var d=this._handle.parse(c,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var e=d.meta.cursor;this._finished||(this._partialLine=c.substring(e-this._baseIndex),this._baseIndex=e),d&&d.data&&(this._rowCount+=d.data.length);var f=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(v)t.postMessage({results:d,workerId:z.WORKER_ID,finished:f});else if(r(this._config.chunk)){if(this._config.chunk(d,this._handle),this._paused)return;d=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(d.data),this._completeResults.errors=this._completeResults.errors.concat(d.errors),this._completeResults.meta=d.meta),!f||!r(this._config.complete)||d&&d.meta.aborted||this._config.complete(this._completeResults,this._input),f||d&&d.meta.paused||this._nextChunk(),d}},this._sendError=function(a){r(this._config.error)?this._config.error(a):v&&this._config.error&&t.postMessage({workerId:z.WORKER_ID,error:a,finished:!1})}}function d(a){function b(a){var b=a.getResponseHeader("Content-Range");return null===b?-1:parseInt(b.substr(b.lastIndexOf("/")+1))}a=a||{},a.chunkSize||(a.chunkSize=z.RemoteChunkSize),c.call(this,a);var d;u?this._nextChunk=function(){this._readChunk(),this._chunkLoaded()}:this._nextChunk=function(){this._readChunk()},this.stream=function(a){this._input=a,this._nextChunk()},this._readChunk=function(){if(this._finished)return void this._chunkLoaded();if(d=new XMLHttpRequest,this._config.withCredentials&&(d.withCredentials=this._config.withCredentials),u||(d.onload=q(this._chunkLoaded,this),d.onerror=q(this._chunkError,this)),d.open("GET",this._input,!u),this._config.chunkSize){var a=this._start+this._config.chunkSize-1;d.setRequestHeader("Range","bytes="+this._start+"-"+a),d.setRequestHeader("If-None-Match","webkit-no-cache")}try{d.send()}catch(a){this._chunkError(a.message)}u&&0===d.status?this._chunkError():this._start+=this._config.chunkSize},this._chunkLoaded=function(){if(4==d.readyState){if(d.status<200||d.status>=400)return void this._chunkError();this._finished=!this._config.chunkSize||this._start>b(d),this.parseChunk(d.responseText)}},this._chunkError=function(a){var b=d.statusText||a;this._sendError(b)}}function e(a){a=a||{},a.chunkSize||(a.chunkSize=z.LocalChunkSize),c.call(this,a);var b,d,e="undefined"!=typeof FileReader;this.stream=function(a){this._input=a,d=a.slice||a.webkitSlice||a.mozSlice,e?(b=new FileReader,b.onload=q(this._chunkLoaded,this),b.onerror=q(this._chunkError,this)):b=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var a=this._input;if(this._config.chunkSize){var c=Math.min(this._start+this._config.chunkSize,this._input.size);a=d.call(a,this._start,c)}var f=b.readAsText(a,this._config.encoding);e||this._chunkLoaded({target:{result:f}})},this._chunkLoaded=function(a){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(a.target.result)},this._chunkError=function(){this._sendError(b.error)}}function f(a){a=a||{},c.call(this,a);var b,d;this.stream=function(a){return b=a,d=a,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var a=this._config.chunkSize,b=a?d.substr(0,a):d;return d=a?d.substr(a):"",this._finished=!d,this.parseChunk(b)}}}function g(a){a=a||{},c.call(this,a);var b=[],d=!0;this.stream=function(a){this._input=a,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._nextChunk=function(){b.length?this.parseChunk(b.shift()):d=!0},this._streamData=q(function(a){try{b.push("string"==typeof a?a:a.toString(this._config.encoding)),d&&(d=!1,this.parseChunk(b.shift()))}catch(a){this._streamError(a)}},this),this._streamError=q(function(a){this._streamCleanUp(),this._sendError(a.message)},this),this._streamEnd=q(function(){this._streamCleanUp(),this._finished=!0,this._streamData("")},this),this._streamCleanUp=q(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function h(a){function b(){if(w&&n&&(k("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+z.DefaultDelimiter+"'"),n=!1),a.skipEmptyLines)for(var b=0;b<w.data.length;b++)1===w.data[b].length&&""===w.data[b][0]&&w.data.splice(b--,1);return c()&&d(),f()}function c(){return a.header&&0===v.length}function d(){if(w){for(var a=0;c()&&a<w.data.length;a++)for(var b=0;b<w.data[a].length;b++)v.push(w.data[a][b]);w.data.splice(0,1)}}function e(b,c){return(a.dynamicTyping[b]||a.dynamicTyping)===!0?"true"===c||"TRUE"===c||"false"!==c&&"FALSE"!==c&&j(c):c}function f(){if(!w||!a.header&&!a.dynamicTyping)return w;for(var b=0;b<w.data.length;b++){for(var c=a.header?{}:[],d=0;d<w.data[b].length;d++){var f=d,g=w.data[b][d];a.header&&(f=d>=v.length?"__parsed_extra":v[d]),g=e(f,g),"__parsed_extra"===f?(c[f]=c[f]||[],c[f].push(g)):c[f]=g}w.data[b]=c,a.header&&(d>v.length?k("FieldMismatch","TooManyFields","Too many fields: expected "+v.length+" fields but parsed "+d,b):d<v.length&&k("FieldMismatch","TooFewFields","Too few fields: expected "+v.length+" fields but parsed "+d,b))}return a.header&&w.meta&&(w.meta.fields=v),w}function g(b,c){for(var d,e,f,g=[",","\t","|",";",z.RECORD_SEP,z.UNIT_SEP],h=0;h<g.length;h++){var j=g[h],k=0,l=0;f=void 0;for(var m=new i({delimiter:j,newline:c,preview:10}).parse(b),n=0;n<m.data.length;n++){var o=m.data[n].length;l+=o,"undefined"!=typeof f?o>1&&(k+=Math.abs(o-f),f=o):f=o}m.data.length>0&&(l/=m.data.length),("undefined"==typeof e||k<e)&&l>1.99&&(e=k,d=j)}return a.delimiter=d,{successful:!!d,bestDelimiter:d}}function h(a){a=a.substr(0,1048576);var b=a.split("\r"),c=a.split("\n"),d=c.length>1&&c[0].length<b[0].length;if(1===b.length||d)return"\n";for(var e=0,f=0;f<b.length;f++)"\n"===b[f][0]&&e++;return e>=b.length/2?"\r\n":"\r"}function j(a){var b=o.test(a);return b?parseFloat(a):a}function k(a,b,c,d){w.errors.push({type:a,code:b,message:c,row:d})}var l,m,n,o=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,q=this,s=0,t=!1,u=!1,v=[],w={data:[],errors:[],meta:{}};if(r(a.step)){var x=a.step;a.step=function(d){if(w=d,c())b();else{if(b(),0===w.data.length)return;s+=d.data.length,a.preview&&s>a.preview?m.abort():x(w,q)}}}this.parse=function(c,d,e){if(a.newline||(a.newline=h(c)),n=!1,a.delimiter)"function"==typeof a.delimiter&&(a.delimiter=a.delimiter(c),w.meta.delimiter=a.delimiter);else{var f=g(c,a.newline);f.successful?a.delimiter=f.bestDelimiter:(n=!0,a.delimiter=z.DefaultDelimiter),w.meta.delimiter=a.delimiter}var j=p(a);return a.preview&&a.header&&j.preview++,l=c,m=new i(j),w=m.parse(l,d,e),b(),t?{meta:{paused:!0}}:w||{meta:{paused:!1}}},this.paused=function(){return t},this.pause=function(){t=!0,m.abort(),l=l.substr(m.getCharIndex())},this.resume=function(){t=!1,q.streamer.parseChunk(l)},this.aborted=function(){return u},this.abort=function(){u=!0,m.abort(),w.meta.aborted=!0,r(a.complete)&&a.complete(w),l=""}}function i(a){a=a||{};var b=a.delimiter,c=a.newline,d=a.comments,e=a.step,f=a.preview,g=a.fastMode,h=a.quoteChar||'"';if(("string"!=typeof b||z.BAD_DELIMITERS.indexOf(b)>-1)&&(b=","),d===b)throw"Comment character same as delimiter";d===!0?d="#":("string"!=typeof d||z.BAD_DELIMITERS.indexOf(d)>-1)&&(d=!1),"\n"!=c&&"\r"!=c&&"\r\n"!=c&&(c="\n");var i=0,j=!1;this.parse=function(a,k,l){function m(a){w.push(a),z=i}function n(b){return l?p():("undefined"==typeof b&&(b=a.substr(i)),y.push(b),i=r,m(y),v&&q(),p())}function o(b){i=b,m(y),y=[],D=a.indexOf(c,i)}function p(a){return{data:w,errors:x,meta:{delimiter:b,linebreak:c,aborted:j,truncated:!!a,cursor:z+(k||0)}}}function q(){e(p()),w=[],x=[]}if("string"!=typeof a)throw"Input must be a string";var r=a.length,s=b.length,t=c.length,u=d.length,v="function"==typeof e;i=0;var w=[],x=[],y=[],z=0;if(!a)return p();if(g||g!==!1&&a.indexOf(h)===-1){for(var A=a.split(c),B=0;B<A.length;B++){var y=A[B];if(i+=y.length,B!==A.length-1)i+=c.length;else if(l)return p();if(!d||y.substr(0,u)!==d){if(v){if(w=[],m(y.split(b)),q(),j)return p()}else m(y.split(b));if(f&&B>=f)return w=w.slice(0,f),p(!0)}}return p()}for(var C=a.indexOf(b,i),D=a.indexOf(c,i),E=new RegExp(h+h,"g");;)if(a[i]!==h)if(d&&0===y.length&&a.substr(i,u)===d){if(D===-1)return p();i=D+t,D=a.indexOf(c,i),C=a.indexOf(b,i)}else if(C!==-1&&(C<D||D===-1))y.push(a.substring(i,C)),i=C+s,C=a.indexOf(b,i);else{if(D===-1)break;if(y.push(a.substring(i,D)),o(D+t),v&&(q(),j))return p();if(f&&w.length>=f)return p(!0)}else{var F=i;for(i++;;){var F=a.indexOf(h,F+1);if(F===-1)return l||x.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:w.length,index:i}),n();if(F===r-1){var G=a.substring(i,F).replace(E,h);return n(G)}if(a[F+1]!==h){if(a[F+1]===b){y.push(a.substring(i,F).replace(E,h)),i=F+1+s,C=a.indexOf(b,i),D=a.indexOf(c,i);break}if(a.substr(F+1,t)===c){if(y.push(a.substring(i,F).replace(E,h)),o(F+1+t),C=a.indexOf(b,i),v&&(q(),j))return p();if(f&&w.length>=f)return p(!0);break}}else F++}}return n()},this.abort=function(){j=!0},this.getCharIndex=function(){return i}}function j(){var a=document.getElementsByTagName("script");return a.length?a[a.length-1].src:""}function k(){if(!z.WORKERS_SUPPORTED)return!1;if(!w&&null===z.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var a=z.SCRIPT_PATH||s;a+=(a.indexOf("?")!==-1?"&":"?")+"papaworker";var b=new t.Worker(a);return b.onmessage=l,b.id=y++,x[b.id]=b,b}function l(a){var b=a.data,c=x[b.workerId],d=!1;if(b.error)c.userError(b.error,b.file);else if(b.results&&b.results.data){var e=function(){d=!0,m(b.workerId,{data:[],errors:[],meta:{aborted:!0}})},f={abort:e,pause:n,resume:n};if(r(c.userStep)){for(var g=0;g<b.results.data.length&&(c.userStep({data:[b.results.data[g]],errors:b.results.errors,meta:b.results.meta},f),!d);g++);delete b.results}else r(c.userChunk)&&(c.userChunk(b.results,f,b.file),delete b.results)}b.finished&&!d&&m(b.workerId,b.results)}function m(a,b){var c=x[a];r(c.userComplete)&&c.userComplete(b),c.terminate(),delete x[a]}function n(){throw"Not implemented."}function o(a){var b=a.data;if("undefined"==typeof z.WORKER_ID&&b&&(z.WORKER_ID=b.workerId),"string"==typeof b.input)t.postMessage({workerId:z.WORKER_ID,results:z.parse(b.input,b.config),finished:!0});else if(t.File&&b.input instanceof File||b.input instanceof Object){var c=z.parse(b.input,b.config);c&&t.postMessage({workerId:z.WORKER_ID,results:c,finished:!0})}}function p(a){if("object"!=typeof a)return a;var b=a instanceof Array?[]:{};for(var c in a)b[c]=p(a[c]);return b}function q(a,b){return function(){a.apply(b,arguments)}}function r(a){return"function"==typeof a}var s,t=function(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof t?t:{}}(),u=!t.document&&!!t.postMessage,v=u&&/(\?|&)papaworker(=|&|$)/.test(t.location.search),w=!1,x={},y=0,z={};if(z.parse=a,z.unparse=b,z.RECORD_SEP=String.fromCharCode(30),z.UNIT_SEP=String.fromCharCode(31),z.BYTE_ORDER_MARK="\ufeff",z.BAD_DELIMITERS=["\r","\n",'"',z.BYTE_ORDER_MARK],z.WORKERS_SUPPORTED=!u&&!!t.Worker,z.SCRIPT_PATH=null,z.LocalChunkSize=10485760,z.RemoteChunkSize=5242880,z.DefaultDelimiter=",",z.Parser=i,z.ParserHandle=h,z.NetworkStreamer=d,z.FileStreamer=e,z.StringStreamer=f,z.ReadableStreamStreamer=g,t.jQuery){var A=t.jQuery;A.fn.parse=function(a){function b(){if(0===f.length)return void(r(a.complete)&&a.complete());var b=f[0];if(r(a.before)){var e=a.before(b.file,b.inputElem);if("object"==typeof e){if("abort"===e.action)return void c("AbortError",b.file,b.inputElem,e.reason);if("skip"===e.action)return void d();"object"==typeof e.config&&(b.instanceConfig=A.extend(b.instanceConfig,e.config))}else if("skip"===e)return void d()}var g=b.instanceConfig.complete;b.instanceConfig.complete=function(a){r(g)&&g(a,b.file,b.inputElem),d()},z.parse(b.file,b.instanceConfig)}function c(b,c,d,e){r(a.error)&&a.error({name:b},c,d,e)}function d(){f.splice(0,1),b()}var e=a.config||{},f=[];return this.each(function(a){var b="INPUT"===A(this).prop("tagName").toUpperCase()&&"file"===A(this).attr("type").toLowerCase()&&t.FileReader;if(!b||!this.files||0===this.files.length)return!0;for(var c=0;c<this.files.length;c++)f.push({file:this.files[c],inputElem:this,instanceConfig:A.extend({},e)})}),b(),this}}return v?t.onmessage=o:z.WORKERS_SUPPORTED&&(s=j(),document.body?document.addEventListener("DOMContentLoaded",function(){w=!0},!0):w=!0),d.prototype=Object.create(c.prototype),d.prototype.constructor=d,e.prototype=Object.create(c.prototype),e.prototype.constructor=e,f.prototype=Object.create(f.prototype),f.prototype.constructor=f,g.prototype=Object.create(c.prototype),g.prototype.constructor=g,z});

Number.prototype.format = function(){
    if(this==0) return 0;
    var reg = /(^[+-]?\d+)(\d{3})/;
    var n = (this + '');
    while (reg.test(n)) n = n.replace(reg, '$1' + ',' + '$2');
    return n;
};

String.prototype.format = function(){
	var num = parseFloat(this);
	if( isNaN(num) ) return "0";
	return num.format();
};




/*
Colors JS Library v1.2.3
Copyright 2012-2013 Matt Jordan
Licensed under Creative Commons Attribution-ShareAlike 3.0 Unported. (http://creativecommons.org/licenses/by-sa/3.0/)
https://github.com/mbjordan/Colors
*/
(function(n){var h={},k={};h.render=function(a,b){var d={},c;if("object"==typeof a)return"rgb"===b&&(c=["R","G","B","RGB"]),"hsv"===b&&(c=["H","S","V","HSV"]),"hsl"===b&&(c=["H","S","L","HSL"]),d[c[0]]=a[0],d[c[1]]=a[1],d[c[2]]=a[2],d[c[3]]=a[0]+" "+a[1]+" "+a[2],d.a=a,d};h.paddedHex=function(a){a=(10>a?"0":"")+a.toString(16);return 1===a.length?"0"+a:a};k.rgb2hex=function(a,b,d){a=h.paddedHex(a);b=void 0!==b?h.paddedHex(b):a;d=void 0!==d?h.paddedHex(d):a;return"#"+a+b+d};k.hex2rgb=function(a){a=
a.replace("#","");return 6===a.length?h.render([parseInt(a.substr(0,2),16),parseInt(a.substr(2,2),16),parseInt(a.substr(4,2),16)],"rgb"):parseInt(a,16)};k.hex2hsv=function(a){a="#"==a.charAt(0)?a.substring(1,7):a;var b=parseInt(a.substring(0,2),16)/255,d=parseInt(a.substring(2,4),16)/255;a=parseInt(a.substring(4,6),16)/255;var c=0,e=0,g=0,e=Math.min(b,d,a),f=Math.max(b,d,a),l=f-e,k,m,g=f;0===l?e=c=0:(e=l/f,k=((f-b)/6+l/2)/l,m=((f-d)/6+l/2)/l,l=((f-a)/6+l/2)/l,b==f?c=l-m:d==f?c=1/3+k-l:a==f&&(c=2/
3+m-k),0>c&&(c+=1),1<c&&(c-=1));return h.render([Math.round(360*c),Math.round(100*e),Math.round(100*g)],"hsv")};k.hsv2rgb=function(a,b,d){var c=[],e,g,f;"object"==typeof a?(e=a[0],b=a[1],a=a[2]):(e=a,a=d);b/=100;a/=100;d=Math.floor(e/60%6);g=e/60-d;e=a*(1-b);f=a*(1-g*b);b=a*(1-(1-g)*b);switch(d){case 0:c=[a,b,e];break;case 1:c=[f,a,e];break;case 2:c=[e,a,b];break;case 3:c=[e,f,a];break;case 4:c=[b,e,a];break;case 5:c=[a,e,f]}return h.render([Math.min(255,Math.floor(256*c[0])),Math.min(255,Math.floor(256*
c[1])),Math.min(255,Math.floor(256*c[2]))],"rgb")};k.rgb2hsl=function(a,b,d){var c,e,g,f,k=(g+e)/2;"object"==typeof a?(c=a[0],b=a[1],a=a[2]):(c=a,a=d);c/=255;b/=255;a/=255;g=Math.max(c,b,a);e=Math.min(c,b,a);if(g==e)f=e=0;else{d=g-e;e=0.5<k?d/(2-g-e):d/(g+e);switch(g){case c:f=(b-a)/d+(b<a?6:0);break;case b:f=(a-c)/d+2;break;case a:f=(c-b)/d+4}f/=6}return h.render([Math.floor(360*f),Math.floor(100*e),Math.floor(100*k)],"hsl")};k.hsv2hsl=function(a,b,d){var c,e,g,f;"object"==typeof a?(c=a[0],e=a[1],
a=a[2]):(c=a,e=b,a=d);a=this.hsv2rgb(c,e,a);c=a.R/255;e=a.G/255;a=a.B/255;g=Math.max(c,e,a);f=Math.min(c,e,a);g!=f&&(b=0.5>L?(g-f)/(g+f):(g-f)/(2-g-f),H=c==g?(e-a)/(g-f):e==g?2+(a-c)/(g-f):4+(c-e)/(g-f));return h.render([Math.floor(H),Math.floor(b),Math.floor(d)],"hsl")};k.name2hex=function(a){a=a.toLowerCase();a={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",
brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgrey:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",
darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",grey:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",
khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",
maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",
paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",
teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"}[a];return void 0===a?"Invalid Color Name":a};k.name2rgb=function(a){a=this.name2hex(a);return/^[a-fA-F0-9#]{7}$/.test(a)?this.hex2rgb(a):h.render(["Invalid Color Name","Invalid Color Name","Invalid Color Name"],"rgb")};k.name2hsv=function(a){a=this.name2hex(a);return/^[a-fA-F0-9#]{7}$/.test(a)?this.hex2hsv(a):h.render(["Invalid Color Name",
"Invalid Color Name","Invalid Color Name"],"hsv")};k.complement=function(a,b,d){var c;if("string"==typeof a&&/(#([A-Fa-f0-9]){3}(([A-Fa-f0-9]){3})?)/.test(a))return a=a.replace("#",""),b="#",6===a.length&&(b+=h.paddedHex(255-this.hex2rgb(a.substr(0,2))),b+=h.paddedHex(255-this.hex2rgb(a.substr(2,2))),b+=h.paddedHex(255-this.hex2rgb(a.substr(4,2)))),3===a.length&&(b+=h.paddedHex(255-this.hex2rgb(a.substr(0,1)+a.substr(0,1))),b+=h.paddedHex(255-this.hex2rgb(a.substr(1,1)+a.substr(1,1))),b+=h.paddedHex(255-
this.hex2rgb(a.substr(2,1)+a.substr(2,1)))),b;void 0!==a&&void 0!==b&&void 0!==d&&(c=[255-a,255-b,255-d]);"object"==typeof a&&(c=[255-a[0],255-a[1],255-a[2]]);return h.render(c,"rgb")};k.rand=function(a){var b,d;if("hex"===a||void 0===a){a="";for(d=0;6>d;d++)b=Math.floor(16*Math.random()),a+="0123456789abcdef".substring(b,b+1);return"#"+a}if("rgb"==a)return a=Math.floor(-254*Math.random()+255),b=Math.floor(-254*Math.random()+255),d=Math.floor(-254*Math.random()+255),h.render([a,b,d],"rgb")};n.Colors=
n.$c=k})(window);



/**
 * d3text.textwrap : ex) https://jsfiddle.net/IPWright83/22ahj15o/
 */
var d3text = {};

d3text.textwrap = function() {
    
    var _resize = false;            // Should the text be resized in the container?
    var _wrap = false;              // Should the text be wrapped in the container?
    var _textElement;               // Represents the text element that will have the wrapping applied

    var _x;                         // The offset x-position
    var _y;                         // The offset y-position
    var _width;                     // The maximum width that should be afforded for text rendering
    var _height;                    // The maximum height that should be afforded for text rendering
    


    var _alignment = "center";
    
    
    var _rotate = 0;
    
    var _size;
    
    var _valign = null;
    
    var _innerHeight;
    var _innerWidth;
    
    var _padding = null;
    
    

    // Calculates the sizes of the words that we need to render when put into SVG
    function fontSizes(vars, maxSize) {

        var sizes = [];
        var svg = d3.select("body").append("svg");

        // Create some spans such that we can work out the length of the various words
        var tspans = svg.append("text")
            .selectAll("tspan")
            .data(vars.words)
            .enter()
            .append("tspan")
            .attr("left", "0px")
            .attr("position", "absolute")
            .attr("top", "0px")
            .attr("x", 0)
            .attr("y", 0)
            .style("font-size", maxSize + "px")
            .text(function(d) {
                return d;
            })
            .each(function(d) {
              
                var width = this.getComputedTextLength();   
                var height = this.offsetHeight || this.getBoundingClientRect().height || this.parentNode.getBBox().height;
                          
                var children = d3.select(this).selectAll("tspan");
                if (children.size()) {
                    alert("didn't expect to get here");
                } 
                
                return sizes.push({
                    height: height,
                    width: width,
                    text: d
                });
            });

        tspans.remove();
        svg.remove();
        return sizes;
    }

    /// Parse some basic sizing properties from the elements that we are dealing with
    /// @params {Object} vars - An object that contains all the settings that we've determined so far
    function parse(vars) {
      
        // Determine the position of the element
        vars.container.x = _x || parseFloat(vars.element.attr("x"), 10) || 0;
        vars.container.y = _y || parseFloat(vars.element.attr("y"), 10) || 0;

        if (vars.shape === "rect") {

            var x = parseFloat(vars.container.attr("x"), 10) || 0;
            var y = parseFloat(vars.container.attr("y"), 10) || 0;
            var width = parseFloat(vars.container.attr("width") || vars.container.style("width"), 10);
            var height = parseFloat(vars.container.attr("height") || vars.container.style("height"), 10);
            var diff = Math.abs(x - vars.container.x);

        } else if (vars.shape === "circle") {

            var x = parseFloat(vars.container.attr("cx"), 10) || 0;
            var y = parseFloat(vars.container.attr("cy"), 10) || 0;
            var diff = Math.abs(x - vars.container.x);
            var r = parseFloat(vars.container.attr("r"), 10) || 0;
            var width = r * 2;
            var height = width;
            x -= r;
            y -= r;

        }

        vars.x = _x || x;
        vars.y = _y || y;
        vars.padding = _padding || diff;
        vars.height = _height || height;
        vars.width = _width || width;
        vars.innerHeight = vars.height - (2 * _padding);
        vars.innerWidth = vars.width - (2 * _padding);
        vars.rotate = _rotate;

        // Work out the initial font size
        vars.fontSize = parseFloat(vars.element.attr("font-size") || vars.element.style("font-size"), 10);
        vars.container.dy = parseFloat(vars.element.attr("dy"), 10);
        vars.size = _size || _resize ? [4, 80] : [vars.fontSize / 2, vars.fontSize]; // Use a really small size if resizing, or the font-size if only wrapping

        // Apply any required padding
        if (_padding) {
            vars.container.x = x + _padding;
            vars.container.y = y + _padding;
        }
    }

    function resize(vars) {
      
        // Add some additional padding onto the strings
        for (var i = 0; i < vars.words.length - 1; i++) {
            vars.words[i] = vars.words[i] + " ";
        }

        var sizeMax = Math.floor(vars.size[1]);
        var lineWidth = vars.shape === "circle" ? vars.width * 0.75 : vars.width;
        var sizes = fontSizes(vars, sizeMax);
        var maxWidth = d3.max(sizes, function(d) {
            return d.width;
        });

        // Calculate the required area for rendering text
        var areaMod = 1.165 + (vars.width / vars.height * 0.11);
        var textArea = d3.sum(sizes, function(d) {
            h = vars.dy || sizeMax * 1.2;
            return d.width * h;
        }) * areaMod;

        // Calculate the avaliable area
        if (vars.shape === "circle") {
            var boxArea = Math.PI * Math.pow(vars.width / 2, 2);
        } else {
            var boxArea = lineWidth * vars.height;
        }

        // Calculate re-sizing ratios
        if (maxWidth > lineWidth || textArea > boxArea) {
            var areaRatio = Math.sqrt(boxArea / textArea);
            var widthRatio = lineWidth / maxWidth;
            var sizeRatio = d3.min([areaRatio, widthRatio]);
            var sizeMax = d3.max([vars.size[0], Math.floor(sizeMax * sizeRatio)]);
        }

        // Calculate max heights
        var heightMax = Math.floor(vars.height * 0.8);
        if (sizeMax > heightMax) {
            sizeMax = heightMax;
        }

        if (maxWidth * (sizeMax / vars.size[1]) <= lineWidth) {
            if (sizeMax !== vars.size[1]) {
                vars.size = [vars.size[0], sizeMax];
            }
            flow(vars);
        } else {
            //wrap(vars);
        }
    }

    function flow(vars) {
        var dx;
        var vAlign = _valign || "top";
        var anchor;
        var yOffset = 0;
        var fontSize = _resize ? vars.size[1] : vars.fontSize || vars.size[0];
        var dy = vars.container.dy || fontSize * 1.1;
        var x = vars.container.x;
        var dx = vars.container.dx || 0;
        var height = vars.innerHeight;
        var width = vars.innerWidth;
        var textBox;
        var reverse = false;

        var newLine = function(word, first) {
            if (!word) {
                word = "";
            }
            vars.element.text("")
            return vars.element
                .append("tspan")
                .attr("x", x + "px")
                .attr("dx", dx + "px")
                .attr("dy", dy + "px")
                .style("baseline-shift", "0%")
                .attr("dominant-baseline", "alphabetic")
                .text(word);
        };



        // Determine the text alignment
        if (vars.shape === "circle") {
            anchor = "middle";
            if (vAlign === "middle") {
                yOffset = ((height / dy % 1) * dy) / 2;
            } else if(vAlign === "end") {
                yOffset = (height / dy % 1) * dy;
            }
        } else {
            anchor = vars.align || vars.container.align || "start";
        }

        // Set up the text anchoring
        vars.element.attr("text-anchor", anchor)
                      .attr("font-size", fontSize + "px")
                      .style("font-size", fontSize + "px")
                      .attr("x", vars.container.x)
                      .attr("y", vars.container.y);

        // Define the dx attribute
        switch (anchor) {
            case "middle":
                dx = vars.width / 2;
                break;
            case "end":
                dx = vars.width;
                break;
            default:
                dx = 0;
                break;
        }

/*
        vars.container.attr("text-anchor", anchor)
            .attr("font-size", fontSize + "px")
            .attr("x", vars.container.x)
            .attr("y", vars.container.y);
*/
        truncate = function() {
            textBox.remove();
            if (reverse) {
                line++;
                textBox = vars.container.select("tspan");
            } else {
                line--;
                textBox = d3.select(vars.container.node().lastChild);
            }
            if (!textBox.empty()) {
                words = textBox.text().match(/[^\s-]+-?/g);
                return ellipsis();
            }
        };

        lineWidth = function() {
            var b;
            if (vars.shape === "circle") {
                b = ((line - 1) * dy) + yOffset;
                if (b > height / 2) {
                    b += dy;
                }
                return 2 * Math.sqrt(b * ((2 * (width / 2)) - b));
            } else {
                return width;
            }
        };

        ellipsis = function() {
            var lastChar, lastWord;
            if (words && words.length) {
                lastWord = words.pop();
                lastChar = lastWord.charAt(lastWord.length - 1);
                if (lastWord.length === 1 && vars.text.split.value.indexOf(lastWord) >= 0) {
                    return ellipsis();
                } else {
                    if (vars.text.split.value.indexOf(lastChar) >= 0) {
                        lastWord = lastWord.substr(0, lastWord.length - 1);
                    }
                    textBox.text(words.join(" ") + " " + lastWord + "...");
                    if (textBox.node().getComputedTextLength() > lineWidth()) {
                        return ellipsis();
                    }
                }
            } else {
                return truncate();
            }
        };

        placeWord = function(word) {
            var current, joiner, next_char;
            current = textBox.text();
            if (reverse) {
                next_char = vars.text.charAt(vars.text.length - progress.length - 1);
                joiner = next_char === " " ? " " : "";
                progress = word + joiner + progress;
                textBox.text(word + joiner + current);
            } else {
                next_char = vars.text.charAt(progress.length);
                joiner = next_char === " " ? " " : "";
                progress += joiner + word;
                textBox.text(current + joiner + word);
            }
            if (textBox.node().getComputedTextLength() > lineWidth()) {
                textBox.text(current);
                textBox = newLine(word);
                if (reverse) {
                    return line--;
                } else {
                    return line++;
                }
            }
        };

        var start = 1;
        var line = null;
        var lines = null;
        var wrap = function() {
            // Remove any content
            vars.container.selectAll("tspan").remove();
            vars.container.html("");

            var word = null;
            if(vars.words == null) {
            	return;
            }
            var words = vars.words.slice(0);

            progress = words[0];
            textBox = newLine(words.shift(), true);
            line = start;
            var len = words.length;
            for (var i = 0; i < len; i++) {

                word = words[i];
                if (line * dy > height) {
                    truncate();
                    break;
                }
                placeWord(word);
                var unsafe = true;
                while (unsafe) {
                    var next_char = vars.text.charAt(progress.length + 1);
                    unsafe = ["-", "/", ";", ":", "&"].indexOf(next_char) >= 0;
                    if (unsafe) {
                        placeWord(next_char);
                    }
                }
            }

            if (line * dy > height) {
                truncate();
            }

            return lines = Math.abs(line - start) + 1;
        };

        wrap();

        lines = line;
        if (vars.shape.value === "circle") {
            space = height - lines * dy;
            if (space > dy) {
                if (valign === "middle") {
                    start = (space / dy / 2 >> 0) + 1;
                    wrap();
                } else if (valign === "bottom") {
                    reverse = true;
                    start = height / dy >> 0;
                    wrap();
                }
            }
        }
        if (vAlign === "top") {
            y = 0;
        } else {
            h = lines * dy;
            y = vAlign === "middle" ? height / 2 - h / 2 : height - h;
        }
        y -= dy * 0.2;
        /*translate = "translate(0," + y + ")";
        if (vars.rotate === 180 || vars.rotate === -180) {
            rx = vars.container.x + width / 2;
            ry = vars.container.y + height / 2;
        } else {
            rmod = vars.rotate < 0 ? width : height;
            rx = vars.container.x + rmod / 2;
            ry = vars.container.y + rmod / 2;
        }
        rotate = "rotate(" + vars.rotate + ", " + rx + ", " + ry + ")";
        return vars.container.attr("transform", rotate + translate);*/
    }

    /// Wraps the text in the given text container.
    this.draw = function() {

        // If we have no container just return
        if (!_textElement) return this;

        // Go through each of the selected items within the container
        _textElement.each(function(d) {

            // Create an object for passing around variables
            var vars = {};
            vars.element = d3.select(this);

            // Grab the container element and it's shape
            var container = vars.element.node().previousElementSibling;
            vars.shape = container ? container.tagName.toLowerCase() : "";
            vars.container = d3.select(container);

            // Calculate some basic properties of the object we're dealing with
            parse(vars);

            // Split the text into words
            var wordBreak = /[^\s\-\/\;\:\&]+\-?\/?\;?\:?\&?/g;
            vars.text = vars.element.text();
            vars.words = vars.text.match(wordBreak);

            // Ensure the element has no text
            vars.element.html("");

            // Resize or scale as appropriate
            if (_resize) {
                resize(vars);
            } else {
                flow(vars);
            }

            // Wrap the font if neccessary
            if (vars.size[0] <= vars.innerHeight) {

            }
            return;
            
            d3.select("svg")
                .append("rect")
                .attr({
                    x: _x,
                    y: _y,
                    width: _width,
                    height: _height
                })
                .style("stroke", "red")
                .style("fill", "none");

            (function() {

                // Split up the text into individual words
                var text = element.text().split(" ");
                var words = [];

                // Create an array of words and spaces
                for (var i = 0; i < text.length; i++) {
                    words.push(text[i] + (i === text.length ? "" : " "));
                }

                // Start by trying to use the largest font size
                //var sizeMax = Math.floor(???);


                size();
                if (_size[0] <= _innerHeight) {
                    text();
                    wrap();
                }


            })();

        });

        return this;
    };

    this.align = function(_) {
        if (!arguments.length) return _alignment;

        switch (_) {
            case "center":
                _ = "middle";
                break;
            case "right":
                _ = "end";
                break;
            case "left":
                _ = "start";
                break;
        }

        _alignment = _;
        return this;
    };

    /// When wrapping multiple blocks of text, they often share the same basic set of method values. 
    /// Using this method, multiple methods can be set using a pre-defined javascript Object that matches 
    /// the structure of the various other methods. In this example, the .width( ), .height( ), and .resize( ) 
    /// methods are all being set by using only the .config( ) method:
    this.config = function(_) {

        // Return the object if need be
        if (!arguments.length) return {
            alignment: _alignment,
            container: _textElement,
            resize: _resize,
            rotate: _rotate,
            fontSizeRange: _fontSizeRange,
            valign: _valign,
            height: _height,
            width: _width,
            padding: _padding,
            x: _x,
            y: _y,
            wrap: _wrap
        };

        // Add each property dynamically
        for (var property in _) {
            if (_.hasOwnProperty(property)) {
                if(this[property]) {
                    this[property](_[property]);
                }
            }
        }

        return this;
    };

    this.container = function(_) {
        if (!arguments.length) return _textElement;
        _textElement = _;
        return this;
    };

    /// Sets the available inner bounding height to wrap text.
    this.height = function(_) {
        if (!arguments.length) return _height;
        _height = _;
        return this;
    };

    this.padding = function(_) {
        if (!arguments.length) return _padding;
        _padding = _;
        return this;
    };

    /// Defines whether or not the text size in should be resized to fit the available space.
    this.resize = function(_) {
        if (!arguments.length) return _resize;
        _resize = _;
        return this;
    };

    /// Defines whether or not the text should be wrapped into the avaliable space
    this.wrap = function(_) {
        if (!arguments.length) return _wrap;
        _wrap = _;
        return this;
    };

    /// Rotates the entire wrapped text to a specific angle. Accepted values are: -180, -90, 0, 90, or 180.
    this.rotate = function(_) {
        if (!arguments.length) return _rotate;
        _rotate = _;
        return this;
    };

    /// An Array of 2 numbers to be used as a minimum and maximum font size when resizing text.
    this.fontSizeRange = function(_) {
        if (!arguments.length) return _fontSizeRange;
        _fontSizeRange = _;
        return this;
    };

    /// Defines the vertical alignment of the block of text to be wrapped.
    /// Accepted values are: "top", "middle", or "bottom".
    this.valign = function(_) {
        if (!arguments.length) return _valign;
        _valign = _;
        return this;
    };

    /// Sets the available inner bounding width to wrap text.
    this.width = function(_) {
        if (!arguments.length) return _width;
        _width = _;
        return this;
    };

    this.x = function(_) {
        if (!arguments.length) return _x;
        _x = _;
        return this;
    };

    this.y = function(_) {
        if (!arguments.length) return _y;
        _y = _;
        return this;
    };

    return this;
};


/**KDAVIF START**/
(function () {
	var Davif = function(){
		var self = this;
	    this.init = function(element, options, config){
	    	this.element = element;
	    	this.options = options;
	    	this.config = config;
	    	
	    	if(options.width && (options.width.toString()).indexOf("%") > 0) {
	    		var w = $(element.selector).width();
	    		w = w == 0 ? $(window).width() : w;
	    		w = w == 0 ? $(window).attr('screen').width : w;
	    		var num = Number(options.width.replace('%', ''));
	    		options.width = w * (num / 100);
	    	}
	    	if(options.height && (options.height.toString()).indexOf("%") > 0) {
	    		var h = $(element.selector).height();
	    		h = h == 0 ? $(window).height() : h;
	    		h = h == 0 ? $(window).attr('screen').height : h;
	    		var num = Number(options.height.replace('%', ''));
	    		options.height = h * (num / 100);
	    	}
	    	options.width = options.width ? Number(options.width) : $(element.selector).width();
	    	options.height = options.height ? Number(options.height) : $(element.selector).height();
	    	options.width = options.width == 0 ? $(window).width() : options.width;
	    	options.width = options.width == 0 ? $(window).attr('screen').width : options.width;
	    	options.height = options.height == 0 ? $(window).height() : options.height;
	    	options.height = options.height == 0 ? $(window).attr('screen').height : options.height;
	    	
	    	if(options.type != config.CHART_TYPE_CLOUD) {
	    		options.fontColor = options.fontColor ? options.fontColor : "#343434";
	    	}
	    	if(options.dataCsv || options.dataRand || options.dataUrl) {
	    		
	    	} else {
	    		if(options.data && options.dataType) {
    				switch (options.dataType) {
					case config.DATA_TYPE_JSON:
						options.data = options.data;
						options.dataCsv = null;
						options.dataRand = null;
						break;
					case config.DATA_TYPE_CSV:
						options.dataCsv = options.data;
						options.data = null;
						options.dataRand = null;
						break;
					case config.DATA_TYPE_RAND:
						options.dataRand = options.data;
						options.data = null;
						options.dataCsv = null;
						break;
					}
	    		}
	    	}

	    	
	    	if( this.options.type != config.CHART_TYPE_TABLE && 
	    		this.options.type != config.CHART_TYPE_RAPID_TABLE && 
	    		this.options.type != config.CHART_TYPE_MAP) {
		        this.svg = d3.select(element.selector).append("svg:svg")
				.attr("width", options.width)
				.attr("height", options.height)
				.style("background-color", options.backgroundColor)
				.style("overflow", "hidden")
				.append("g");
	    	}
	    	
	    };
	    
	    this.setColors = function() {
	    	var options = this.options;
	    	if(!options.color) {
	    		options.color =  options.color ? options.color : d3.scale.ordinal().range(
	    				["#aec7e8",'#b5cf6b', "#ff7f0e", "#ffbb78", "#2ca02c", 
	    				 "#98df8a", "#d62728", "#ff9896", "#9467bd", "#c5b0d5", 
	    				 "#8c564b", "#c49c94", "#e377c2", "#f7b6d2", "#7f7f7f", 
	    				 "#c7c7c7", "#bcbd22", "#dbdb8d", "#17becf", "#9edae5"]
	    				);
	    	} else {
		    	if($.isArray(this.options.color)) {
		    		options.color = d3.scale.ordinal().range(options.color);
		    	} else {
		    		var keys = d3.keys(this.options.color);
		    		var values = d3.values(this.options.color);
		    		this.options.color = d3.scale.ordinal().domain(keys).range(values);
		    	}
	    	}
	    	
	    };
	    
	    this.render = function() {
	    	
    		if(this.options.dataUrl) {
    			this.ajax(this.options.dataUrl, this.options.dataParams, this.setData);
    		} else {
    			this.draw();
	    	}
	    };
	    
	    this.afterCall = function() {
	    	this.options.afterCall();
	    };
	    
	    this.setData = function(data) {
	    	if(typeof data == "string") {
	    		data = $.parseJSON(data);
	    	}
	    	
	    	if(this.options.dataType) {
				switch (this.options.dataType) {
				case config.DATA_TYPE_JSON:
					this.options.data = data;
					this.options.dataCsv = null;
					this.options.dataRand = null;
					break;
				case config.DATA_TYPE_CSV:
					this.options.dataCsv = data;
					this.options.data = null;
					this.options.dataRand = null;
					break;
				case config.DATA_TYPE_RAND:
					this.options.dataRand = data;
					this.options.data = null;
					this.options.dataCsv = null;
					break;
				}
    		} else {
    			this.options.data = data;
    		}
	    	this.draw();
	    };

		this.ajax = function(dataUrl, serverData, successCall, failCall, callParams, httpType) {
			$.support.cors = true;
			if(dataUrl) {
				//if(dataUrl.match('^https://') || dataUrl.match('^http://')){
					var $this = this;
					$.ajax({
						url : dataUrl,
						crossDomain : true,
						global : false,
						type : httpType,
						data : serverData,
						dataType : "json",
						async : true,
						cache : false,
						success : function(data, a, b, c) {
							if(successCall) {
								successCall.call($this, data, callParams);
							}
						},
						error : function(xhr, status, error) {
							$.getJSON( dataUrl, serverData )
							.done(function( json ) {
								successCall(json);
							})
							.fail(function(xhr, status, error ) {
								if(failCall) {
									failCall(xhr, status, error);
								}
							});
						}
					});
				//}else{
					/*$.getJSON( dataUrl, serverData )
					.done(function( json ) {
						successCall(json);
					})
					.fail(function(xhr, status, error ) {
						failCall(json);
					});*/
				//}
			}
		};
		
		this.click = function(d) {
			if(!this.options.click) {
				return;
			}
			/****
			 * 데이터 내보내기 전 정형화 시킬 코드 추가
			 */
			this.options.click(d);
		};
		
		this.digits = function(num){ 
			if((num.toString()).indexOf('.') != -1) {
				return Number(num);
			}
			return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
		};
		

		this.wrap = function(text, width, distance) {
		    text.each(function() {
		        var text = d3.select(this),
		        	g = d3.select(this.parentNode),
		            words = text.text().split(/\s+/).reverse(),
		            word,
		            line = [],
		            lineNumber = 0,
		            lineHeight = 1.1, // ems
		            y = text.attr("y"),
		            dy = parseFloat(text.attr("dy")),
		            tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", "0em");
		        var i = distance;
		        while (word = words.pop()) {
		            line.push(word);
		            tspan.text(line.join(" "));
		            if (tspan.node().getComputedTextLength() > width) {
		                line.pop();
		                tspan.text(line.join(" "));
		                line = [word];
		                tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", i +"em").text(word);
		            }
		        }
		    });
		};
		
		
		this.parseCSV = function(strDelimiter) {
			if(!this.options.dataCsv) {
				return;
			}
			
			var csv = $.trim(this.options.dataCsv);
			var data = Papa.parse(csv, {
				header : true,
				skipEmptyLines : true
			}).data;

			for(var i in data) {
				if(data[i].value) {
					data[i].value = Number(data[i].value);
				}
			}
			
			this.options.dataCsv = null;
			this.options.data = data;
		};
		
		this.parseJSON = function() {
			if(this.options.data) {
				var data = this.options.data;
				for(var i in data) {
					if(data[i].value) {
						data[i].value = Number(data[i].value);
					}
				}
			}
					
			if(!this.options.data || !this.options.dataKeys) {
				return;
			}
			
			var dataKeys = d3.keys(this.options.dataKeys);
			var dataValues = d3.values(this.options.dataKeys);
			if(!$.isArray(data)) {
				for(var key in data) {
					for(var j in dataKeys) {
						if(key == dataValues[j]) {
							data[dataKeys[j]] = data[dataValues[j]];
							//delete data[dataValues[j]];
							break;
						}
					}
					var values = data[key];
					if($.isArray(values)) {
						inputObj(values);
					}
				}
			} else {
				input(data);
			}
			//dendrogram, explorer
			function inputObj(data) {
				for(var i in data) {
					var d = data[i];
					var dKeys = d3.keys(d);
					var dValues = d3.values(d);
					for(var j in dataKeys) {
						for(var k in dKeys) {
							if(dataValues[j] == dKeys[k]) {
								data[i][dataKeys[j]] = data[i][dKeys[k]];
								break;
							}
							if($.isArray(dValues[k])) {
								inputObj(dValues[k]);
							}
						}
					}
					if(data[i].value) data[i].value = Number(data[i].value);
				}
			}
			//etc.
			function input(data) {
				for(var i in data) {
					var d = data[i];
					var dKeys = d3.keys(d);
					var dValues = d3.values(d);
					for(var j in dataKeys) {
						for(var k in dKeys) {
							if(dataValues[j] == dKeys[k]) {
								data[i][dataKeys[j]] = data[i][dKeys[k]];
								if(data[i].value) data[i].value = Number(data[i].value);
								break;
							}
						}
						if($.isArray(dValues[j])) {
							input(dValues[j]);
						}
					}
					if(data[i].value) data[i].value = Number(data[i].value);
				}
			}
			
			this.options.data = data;
			
		};
		
		this.isInt = function(n){
		    return Number(n) === n && n % 1 === 0;
		};
		
	};
	
	var Line = function(){
		var self = this;
		this.type = "line";
		this.sort = function (a,b) {
			if (a.value > b.value) {
				return -1;
			}
			if (a.value < b.value) {
				return 1;
			}
			return 0;
		};
		
		this.parseSingleRand = function() {
			var csv = this.options.dataRand;
			var row = csv.split("\n"); 
			
			var dates = d3.map();
			var obj = {};
			
			var lengthMax  = d3.max(row, function(r) {
				return r.split(",").length;
			});
			
			var step = 999;
			var first = row[0].split(",");
			for (var i = 0; i < first.length; i++) {
				for (var j = 0; j < row.length; j++) {
					if(row[j] == '') {
						continue;
					}
					var fields = row[j].split(",");
					var value = Number(fields[i]);
					if(isNaN(value) || typeof value != "number") {
						step = i;
						break;
					} 
				}
				if(step != 999) {
					break;
				}
			}
			
			var index = 0;
			var step2 = step == 0 ? 1 : 0;
			for (var i = 0; i < row.length; i++) {
				if(row[i] == '') {
					continue;
				}
 				var fields = row[i].split(",");
 				var values = {};
 				values.name = "value";
				values.date = fields[step];
				values.value = Number(fields[step2]);
				var key = index;
				if(dates.has(values.date)) {
					for ( var j in obj[name].data) {
						var child = obj[name].data[j];
						if(child.date == values.date) {
							delete obj[name].data[j];
							key = dates.get(values.date);
							index--;
							break;
						}
					}
				}
				dates.set(values.date, key);
 				var name = values.name;
 				if(!obj[name]) {
 					obj[name] = {};
 				}
 				if(!obj[name].data) {
 					obj[name].data = [];
				}
 				obj[name].data[key] = (values);
 				index++;
			}
			
			var json = [];
			for (var name in obj) {
				var node = {};
				node.name = name;
				node.data = obj[name].data;
				if(obj[name].color) {
					node.color = obj[name].color;
				}
				if(obj[name].issue) {
					node.issue = obj[name].issue;
				}
				json.push(node);
			}
			this.options.data = json;
			
		};
		
		this.parseRand = function() {
	
			var csv = this.options.dataRand;
			var row = csv.split("\n"); 
			
			var dates = d3.map();
			var obj = {};
			
			var lengthMax  = d3.max(row, function(r) {
				return r.split(",").length;
			});
			
			var step = 999;
			var first = row[0].split(",");
			for (var i = 0; i < first.length; i++) {
				for (var j = 0; j < row.length; j++) {
					if(row[j] == '') {
						continue;
					}
					var fields = row[j].split(",");
					var value = Number(fields[i]);
					if(isNaN(value) || typeof value != "number") {
						step = i;
						break;
					} 
				}
				if(step != 999) {
					break;
				}
			}

			var chg = 1;
			if(step != 999) {
				for (var i = 0; i < row.length; i++) {
					if(row[i] == '') {
						continue;
					}
					var fields = row[i].split(",");
					if(dates.has(fields[0])) {
						chg = 0;
					}
					dates.set(fields[0]);
				}
			} else {
				chg = 0;
			}
			
			for (var i = 0; i < row.length; i++) {
				if(row[i] == '') {
					continue;
				}
 				var fields = row[i].split(",");
 				var values = {};
 				if(step == 999) {
 					values.name = "value";
 					if(lengthMax == 1) {
						var value = Number(fields[0]);
						values.value = value;
						values.date = (i + 1);
 					} else {
	 					if(fields[0]) {
	 						values.date = fields[0];
	 					} else {
	 						if(dates.has(values.name)) {
	 							values.date = dates.get(values.name) + 1;
	 							dates.set(values.name, values.date);
	 						} else {
	 							values.date = 0;
	 							dates.set(values.name, 0);
	 						}
	 					}
	 					if(fields[1]) {
	 						values.value = Number(fields[1]);
	 					} else {
	 						values.value = 0;
	 					}
 					}
 				} else {
 					if(chg == 0) {
	 					values.name = fields[0];
	 					if(fields[1]) {
	 						values.date = fields[1];
	 					} else {
	 						if(dates.has(values.name)) {
	 							values.date = dates.get(values.name) + 1;
	 							dates.set(values.name, values.date);
	 						} else {
	 							values.date = 0;
	 							dates.set(values.name, 0);
	 						}
	 					}
	 					
	 					if(fields[2]) {
	 						values.value = Number(fields[2]);
	 					} else {
	 						values.value = 0;
	 					}
 					} else {
 						values.name = "value";
 						values.date = fields[0];
 						values.value = Number(fields[1]);
 					}
 				}
 				var name = values.name;
 				if(!obj[name]) {
 					obj[name] = {};
 				}
 				if(!obj[name].data) {
 					obj[name].data = [];
				}
 				(obj[name].data).push(values);
			}
			
			var json = [];
			for (var name in obj) {
				var node = {};
				node.name = name;
				node.data = obj[name].data;
				if(obj[name].color) {
					node.color = obj[name].color;
				}
				if(obj[name].issue) {
					node.issue = obj[name].issue;
				}
				json.push(node);
			}
			this.options.data = json;
			
		};

		this.parseJson = function() {
			
			var json = this.options.data;
			if(json[0].data) {
				return;
			}
			
			var map = d3.map();
			for(var i in json) {
				var d = json[i];
				if(map.has(d.name)) {
					var dmap = map.get(d.name);
					dmap.push(d);
					map.set(d.name, dmap);
				} else {
					map.set(d.name, [d]);
				}
			}
			
			var data = [];
			map.forEach(function(key) {
				var d = map.get(key);
				var obj = {};
				obj.name = key;
				obj.data = d;
				if(d[0] && d[0].color) {
					obj.color = d[0].color;
				}
				data.push(obj);
			});
			this.options.data = data;
		};
		
		this.draw = function(){                              //오버라이딩         
			this.type = this.options.type;
			if(this.type == "line") {
				if(this.options.dataRand) {
					this.parseSingleRand();
				} else {
					this.parseJson();
				}
			} else {
				if(this.options.dataRand) {
					this.parseRand();
				} else {
					this.parseJson();
				}
			}
			var data = this.options.data;
	        var sdate = data[0].data[0].date; 
	        var edate  = data[0].data[data[0].data.length-1].date;
				
			var parseDate = d3.time.format(this.options.inputFormat).parse;
			var formatDate = d3.time.format(this.options.dateFormat);
			var formatDate2 = d3.time.format(this.options.tooltip.dateFormat);
			
			var crosshair = this.options.type;
			var options = this.options;
			var type = this.options.type,
			config = this.config,
			width = this.options.width,
			height = this.options.height,
			margin = this.options.margin;
			var svg = this.svg.attr("transform", "translate(" + margin.left + "," + margin.top + ")");
			
			width = width - this.options.margin.left - this.options.margin.right;
			height = height - this.options.margin.bottom - this.options.margin.top;
	
			var x = d3.scale.ordinal().rangePoints([options.scaleXPadding, width - options.scaleXPadding]);
			var y = d3.scale.linear().range([height, 0]);
			x.domain((data[0].data).map(function(dd) {
				return dd.date;
			}));
			
			
			var minY = d3.min(data, function (kv) {
				return d3.min(kv.data, function (d) {
					return d.value;
				})
			});
			var maxY = d3.max(data, function (kv) {
				return d3.max(kv.data, function (d) {
					return d.value;
				})
			});
			if(this.options.tickSuffix == "%") {
				y.domain([0, 100]);
			} else {
				maxY = maxY + (maxY / 10);
				if(this.options.tickNagative) {
					minY = -(d3.max([maxY, minY]));
					y.domain([minY, maxY]);
				} else {
					y.domain([0, maxY]);
				}
			}
			
			var xAxis = d3.svg.axis()
				.scale(x)
				.orient("bottom");
			
			var yAxis = d3.svg.axis()
				.ticks(this.options.ticks)
				.scale(y)
				.orient("left");
			
			yAxis.ticks(this.options.ticks);
			
			if(data[0].data.length <= 20) {
				var ticks = [];
				data[0].data.forEach(function (d) {
					ticks.push(d.date);
				});
				xAxis.tickValues(ticks);
			} else{
				var len =data[0].data.length;
				xAxis.ticks(Number(len / (len / 15)), 15);
			}
			if(!this.options.lineType) {
				this.options.lineType = "linear";
			} 
			
			var line = d3.svg.line().interpolate(this.options.lineType)
			.defined(function(d) { return d.value != null; })
			.x(function (d) {
				d.x = x(d.date);
				return d.x;
			})
			.y(function (d) {
				d.y = y(d.value);
				return y(d.value);
			});
			// draw y axis
			svg.append("g")
			    .attr("class", "y axis")
			    .call(yAxis);

			// draw x axis	
			svg.append("g")
			    .attr("class", "x axis")
			    .attr("transform", "translate(0," + (height) + ")")
			    .call(xAxis);

			svg.selectAll(".axis").select("path")
	        .style("fill", "none")
			.style("shape-rendering", "crispedges")
			.style("stroke", self.options.axisStrokeColor)
			;
			
			svg.selectAll(".axis").selectAll("text")
			.style("fill" , self.options.fontColor)
			.style("font-size", self.options.fontSize+"px")
			.style("font-family", self.options.font)
			.style("letter-spacing", self.options.letterSpacing)
			;

		    svg.selectAll(".x").select("path")
	    	.attr('d', "M0,0V0H"+(width)+"V0")
	    	;
	        svg.selectAll(".y").select("path")
	    	.attr('d', "M0,0H0V"+(height)+"H0")
	    	;
	        
	        svg.selectAll(".tick").selectAll("line")
	        .style("fill", "none")
	        .style("stroke-width", 0)
	        ;

	        //x좌표 text 위치 수정
			var xTickText = svg.selectAll(".x").selectAll(".tick").select("text")
			.style("text-anchor", options.tickXtextAnchor)
			.text(function(d, i) {
				if(self.options.ticksX) {
					var chk = (i / self.options.ticksX); 
					if(chk.toString().indexOf(".") > 0) {
						return;
					}
				}
				if(i % self.options.tickSkip != 0) {
					return;
				}
				if((i == 0 && sdate == edate) || (i == svg.selectAll(".x").selectAll(".tick").size()-1 && sdate == edate)) {
					return;
				}
				if(self.options.dateFormat) {
					var date = parseDate(d);
					return formatDate(date);
				}
				return d;
			});
			if(options.textRotate != 0 && options.textRotateCount && data[0].data.length >= options.textRotateCount) {
				xTickText.attr("x", self.options.textRotateOptions.tickXtextX)
				.attr("y", self.options.textRotateOptions.tickXtextY)
				.attr("transform", "translate(0,0)rotate("+options.textRotate+")");
			} else {
				xTickText.attr("x", function(d, i) {
					var textX = 0;
					var translate = d3.transform(d3.select(this.parentNode).attr("transform")).translate;
					var nodeWidth = d3.select(this).node().getComputedTextLength();
					if(translate[0] == 0) {
						textX = nodeWidth / 2;
					} else if(i != 0 && translate[0] < 35) {
						textX = -13 + self.options.tickXtextX;
					} else if(translate[0] == (width)) {
						textX = -(nodeWidth / 2);
					}
					return textX;
				});
				xTickText.attr("y", 7 + self.options.tickXtextY)
			}
			
			//y좌표 text 위치 수정
	    	svg.selectAll(".y").selectAll("text")
	    	.text(function(d, i) {
	    		if(d == undefined) {
	    			return;
	    		}
	    		if(self.options.tickSuffix == "%") {
	    			d = d * 100;
	    		}
	    		if(self.options.tickPoint > 0) {
	    			return d.toFixed(self.options.tickPoint) + self.options.tickSuffix;
	    		} else {
	    			return self.isInt(d) ? d + self.options.tickSuffix : '';
	    		}
	    	});

	    	//x,y 좌표 text 스타일
			svg.selectAll(".tick").select("text")
			.style("fill" , self.options.fontColor)
			.style("font-size", self.options.fontSize+"px")
			.style("font-family", self.options.font)
			.style("letter-spacing", self.options.letterSpacing)
			;
			

			if(this.options.gridXUse) {
				var gridXdash = this.options.gridXdash ? this.options.gridXdash : "2,2";
				var gridXheight = this.options.gridXheight ? this.options.gridXheight : height;
				//x좌표 line 위치 및 스타일
				svg.selectAll(".x").selectAll(".tick")
				.select("line")
			    .attr("x1", 0)
			    .attr("x2", 0)
			    .attr("y1", 0)
			    .attr("y2", function(d) {
			    	if(d == self.options.xPointLine) {
						return -height;
					}
			    	return -gridXheight;
			    })
				.style("opacity", 0.7)
				.style("stroke", function(d, i) {
					if(d == self.options.xPointLine) {
						return "#da2f91";
					}
					return self.options.gridYcolor;
				})
				.style("stroke-width", function(d, i) {
					if(i % self.options.tickSkip != 0) {
						return 0;
					}
					if(d == self.options.xPointLine) {
						return "2px";
					}
					return "1px";
				})
				.style("stroke-dasharray", function(d) {
					if(d == self.options.xPointLine) {
						return "7,3";
					}
					return self.options.gridXdash;
				})
				;
			}
			if(this.options.gridYUse) {
				var gridYdash = this.options.gridYdash ? this.options.gridYdash : "2,2";
				//y좌표 line 위치 및 스타일
				svg.selectAll(".y").selectAll(".tick")
				.select("line")
			    .attr("x1", 0)
			    .attr("x2", function(d, i){
			    	return width; 
			    })
			    .attr("y1", 0)
			    .attr("y2", 0)
				.style("opacity", 0.7)
				.style("stroke", function(d, i) {
					if(options.gridYbaseColor && i == 0) {
						return options.gridYbaseColor;
					}
					return options.gridYcolor;
				})
				.style("stroke-width", "1px")
				.style("stroke-dasharray", this.options.gridYdash)
				;
			}
			// crosshair
			var crosshairSeries = svg.selectAll("."+type)
				.data(data)
				.enter().append("g")
				.attr("class", type)
				.attr("fill", "none")
				.attr("id", function(d, i) {
					var id = self.element[0].id + "_" + type + "_" + i;
					return id;
				});
	
			crosshairSeries.append("path")
			.attr("class", "line")
			.attr("d", function (d) {
				return line(d.data);
			})
			.style("stroke", function (d, i) {
				if(d.color) {
					return d.color;
				}
				if(d.data) {
					for(var i in d.data) {
						if(d.data[i].color) 
							return d.data[i].color;
					}
				}
				return self.options.color(d[self.options.colorKey]);
			})
			.style("stroke-width", "3px")
			.style("stroke-linecap", "round")
			;
			
			//마우스 오버 crosshair 
			var focus = svg.append('g').style('display', 'none');
			if(options.focusRectX != null) {
				focus.append("rect")
				.attr("class", "focusRectX")
				.attr("height", height)
				.attr("width", options.focusRectX && options.focusRectX.width ? options.focusRectX.width : 50)
				.attr('x', 0).attr("y", 0)
				.style(options.focusRectX);
			}
			
		    focus.append('line')
		    .attr('class', 'focusLineX')
		    .style('fill', "none")
		    .style('stroke', "#5c636b")
		    .style('stroke-width', 1)
		    .style(options.focusLineX);
		    ;
		    
		    
		    data.forEach(function(d, i) {
		    	var key =  d.name;
		    	focus.append('circle')
		        .attr('r', 4.5)
		        .attr('class', 'focusCircle')
		        .attr('id', function() {
		        	return self.element[0].id + "circle"+i;
		        })
		        .style('fill', function() {
		        	if(d.color) {
		        		return d.color;
		        	}
		        	if(d.data) {
						for(var i in d.data) {
							if(d.data[i].color) 
								return d.data[i].color;
						}
					}
		        	d.color = self.options.color(d[self.options.colorKey]);
		        	return d.color;
		        })
		        .style(options.focusCircle)
		    });
		    
		    var crosshair_y = {};
			data.forEach(function(info, i) {
				var name = info.name;
				$.each(info.data, function(j){
					if(i == 0) {
						crosshair_y[this.date] = {};
					}
					crosshair_y[this.date][name] = this.value;
				});
		    });
			
			if(self.options.maxPointUse || self.options.maxPointAllUse) {
				if(sdate != edate) {
					 //최상위 노드 아이콘
				    var maxValues = {};
				    var maxValue = d3.max(d3.entries(data), function(d, j) {
				    	if(d.value.name == config.TYPE_ALL) {
				    		return;
				    	}
				    	var date = ''; 
				    	var dmax = d3.max(d3.entries(d.value), function(e) {
				    		var fmax = d3.max(e.value, function(f, i) {
				    			if(e.key == "name") { return;}
				    			return f.value; 
				    		});
				    		if(fmax == undefined) { return; }
				    		
				    		for(var i in e.value) {
				    			var value = e.value[i].value;
				    			if(fmax == value) {
				    				date = e.value[i].date;
				    				break;
				    			}
				    		}
				    		return fmax;
				    	});
				    	var key = d.value.name ;
				    	var color = d.value.color ? d.value.color : d.value.data[0].color ? d.value.data[0].color : self.options.color(d.value[self.options.colorKey]);
				    	maxValues[key] = {date : date , value : dmax, color : color}; 
				    	if(dmax == undefined) { return; }
				    	return dmax;
					});
				    
				    var index = 1;
				    for(var key in maxValues) {
				    	var d = maxValues[key];
				    	if(self.options.maxPointAllUse === false) {
					    	if(maxValue != d.value) {
					    		continue;
					    	}
				    	}
				    	
				    	//triangle
				    	var x1 = x(d.date) + 9;
				    	var y1 = y(d.value) + 17;
				    	var pi = Math.PI * 2;
					    var polygon = svg.append("path")
					        .attr("d", "M0,5.059274L8.306048591020996,-8.059274 -8.306049,-8.059274Z")
					        .attr("fill", d.color)
					        .attr("transform", "translate("+(x1 - 9)+", "+(y1 -28)+")")
					        ;
				    };
				}
			}
			
		    this.bisectDate = d3.bisector(function(d) { return d.date; }).left;
			this.xPath = x;
			this.yPath = y;
			if(this.options.tooltip.enabled) {
				d3.select(".tooltip_pop_"+this.element[0].id).remove();

				var tooltip = d3.select("#"+this.element[0].id).append("div")
		        .attr("class", "tooltip_pop_"+this.element[0].id)
		        .style("display", "none")
		        .style("opacity", 0)
		        .style("z-index", 100000);
		        
				var tooltipWidth = 0;
			    svg.append('rect')
		        .attr('class', 'overlay')
		        .style('fill', 'none')
		        .style('stroke', 'none')
		        .style('pointer-events', 'all')
		        .style('cursor', 'pointer')
		        .attr('width', width)
		        .attr('height', height)
		        .on('mouseover', function() { 
		        	focus.style('display', null); 
		        })
		        .on('mouseout', function() { 
		        	focus.style('display', 'none'); 
		        	tooltip.style('display', "none"); 
		        })
		        .on('mousemove', function() {

		        	var mouse = d3.mouse(this)[0];
		        	var leftEdges = self.xPath.range();
		            var xWidth = self.xPath.rangeBand();
		            var interval = (leftEdges[1] - leftEdges[0]) / 2;
		            var j;
		            for(j=0; mouse > (leftEdges[j] + xWidth); j++) {}
		            var date;
		            if(mouse < (leftEdges[j] - interval)) {
		            	date = self.xPath.domain()[j-1];
		            } else {
		            	date = self.xPath.domain()[j];
		            }
		            if(date == undefined) {
		            	return;
		            }
		            mouseover(date, null);
		            
		        })
		        .on("click", function (d) {
		        	var yArray = self.mouse(this, data, crosshair_y);
		        	self.click(yArray);
		        })
		        ;
			    
			    var mouseover = function(date, isshow) {

		            var x = self.xPath(date);
		            focus.style('display', isshow); 
		            var tip_y = [];
		            var yArray = [];
		            data.forEach(function(info, k) {
		            	var name = info.name;
		            	var colorKey = info[self.options.colorKey];
		            	if(crosshair_y[date] && crosshair_y[date][name] != undefined) {
			            	var y = self.yPath(crosshair_y[date][name]);
			            	var tool_count = crosshair_y[date][name] == 0 ? 0 : (crosshair_y[date][name]);
			            	yArray.push({name : name, value : tool_count, color : info.color ? info.color : self.options.color(colorKey)});
			            	
			            	focus.select('#'+self.element[0].id+'circle'+k)
			            	.attr('cx', x)
					        .attr('cy', y);
		            	}
		            });
		            
		            if(self.options.tooltip.dateFormat) {
		            	var parsedDate = parseDate(date.toString()); 
		            	yArray.date = formatDate2(parsedDate);
		            } else {
		            	yArray.date = date;
		            }
		        	yArray = yArray.sort(self.sort);
		        	
		            focus.select('.focusLineX')
		                .attr('x1', x).attr('y1', height)
		                .attr('x2', x).attr('y2', 0);
		            
		            if(options.focusRectX != null) {
			            var focusRectXX = x - (parseInt(focus.select('.focusRectX').attr("width")) / 2);
			            focus.select('.focusRectX').attr('x', focusRectXX);
		            }
		            
		            var w = Number(tooltip.style("width").replace("px", ''));
		            var h = Number(tooltip.style("height").replace("px", ''));

		            var tooltip_offset = options.tooltip.isabsolute ? {top:0, left:0} : $(self.element.selector).offset();
		            
		            var tooltip_left;
		            tooltip_left = d3.event ? Math.max(0, d3.event.offsetX + tooltip_offset.left + (self.options.tooltip.x)) : 0;
		            tooltip_top = d3.event ? d3.event.offsetY + tooltip_offset.top + self.options.tooltip.y - (h/2) : 0;

		            var tooltip_style = {
			        	 left: tooltip_left,
			        	 top: tooltip_top
		            }
		            if(tooltip_style.left > options.width - (w)) {
		            	tooltip_style.left = tooltip_offset.left + d3.event.offsetX - (w);
		            }
		            	
		            if(h > height){
		            	tooltip_style.top = tooltip_offset.top;
		            } else if(tooltip_style.top <= tooltip_offset.top) {
		            	//tooltip_style.top = tooltip_offset.top;
		            } else if(tooltip_style.top > tooltip_offset.top + options.height - h) {
		            	//tooltip_style.top = tooltip_offset.top - options.height - h - 5;
		            }

		            tooltip_style.left = tooltip_style.left + 'px'
            		tooltip_style.top = tooltip_style.top + 'px'
		            
		            if(self.options.tooltip.css) {
			            for ( var key in self.options.tooltip.css) {
			            	tooltip_style[key] = self.options.tooltip.css[key];
						}
		            }
		            var tooltip_html;
		            if(self.options.tooltip.useHtml) {
		            	tooltip_html = self.options.tooltip.html(yArray);  
		            } else {
			            var html = '<p style="'+options.tooltip.css.p+'">'+(yArray.date)+'</p><ul style="'+options.tooltip.css.ul+'">';
						for ( var key in yArray) {
							var obj = yArray[key];
							if(obj && (obj.name || obj.value)) {
								var val = obj.value;
								val = self.digits(val);
								var name = obj.name; 
								html += '<li style="'+options.tooltip.css.li+'">';
								if(name != "undefined") {
									html += '<span class="davif-icon" style="color:'+obj.color+';'+options.tooltip.css['davif-icon']+'">●</span>';
									html += '<span class="davif-title1" style="'+options.tooltip.css['davif-title1']+'">'+name+'</span>';
									html += '<strong class="davif-title2" style="'+options.tooltip.css['davif-title2']+'">'+ val + options.tooltip.suffix + '</strong>';
								} else {
									html += '<span class="davif-title1" style="color:'+obj.color+';'+options.tooltip.css['davif-title1']+'>●</span>';
									html += '<span class="davif-title2" style="'+options.tooltip.css['davif-title2']+'"><strong>'+ val + options.tooltip.suffix +'</strong></span>';
								}
								html += '</li>';
							}
						}
						html += '</ul>';
						tooltip_html = html;
		            }
		            tooltip.style('display', isshow); 
		            tooltip.transition()
		            .duration(200)
		            .style("opacity", 0.9);
		            tooltip.html(tooltip_html)
		            .style(tooltip_style);
		            
		            var tooltipW = Number(tooltip.style("width").replace("px", ''));
		            tooltipWidth = d3.max([tooltipWidth, tooltipW + 30]);
		            tooltip.style("width", tooltipWidth +"px");
			    };
			}
			mouseover(data[0].data[0].date, "none");
			
			var attrId = this.element.attr("id");

			//line point label
			this.options.labels.enabled = this.options.labels.enabled == null ? true : this.options.labels.enabled;
			var first_index = 0;
			if(this.options.labels.enabled) {
				var labels = svg.append('g').classed('labels-group', true);
				data.forEach(function (d1, i) {
					var boxHeight = 20;
					var d2_index = 0 ;
					
					(d1.data).forEach(function (d2, j) {
						if(!d2.issue) {
							return;
						}
						if(d2.x == options.scaleXPadding) {
							first_index = j;
						}
						var label = labels.append("g").attr("id" , function(k) {
							return attrId + "_" + j;
						});
						d2.issue = (d2.issue).split("|");
						
						var isDown = true;
						(d2.issue).forEach(function (dd, k) {
							var boxWidth = dd.length + (dd.length * 20); 
							var rectY = (y(d2.value)) + ((boxHeight) * k);
							if(height < rectY) {
								isDown = false;
							}
						});
						
						(d2.issue).forEach(function (dd, k) {
							var bbox = label.node().getBBox();
							var rect = label.append("rect");
							var text = label.append('text');
							var rectX = x(d2.date);
							var rectY = (y(d2.value));
							rectY = isDown ? rectY + ((boxHeight) * k) : rectY - ((boxHeight) * k);
							var textX = x(d2.date);
							text.attr("id", attrId+"_label_text_"+j+"_"+k)
							.attr("class", attrId+"_rect_label_evt_pane_"+j)
							.attr("x" , textX)
							.attr("y" , rectY)
							.style("fill", self.options.fontColor)
							.style("text-anchor", "middle")
							.style("font-family", self.options.font)
							.style("font-size", self.options.fontSize+"px")
							.style("letter-spacing", self.options.letterSpacing)
							.text(function() {
								return dd;
							})
							;
							
							var boxWidth = text.node().getComputedTextLength() + 20;
							rectX = x(d2.date) - (boxWidth/2);
							if(self.options.labels.inner) {
								//이슈어 라벨 첫데이터
								if(d2.x == options.scaleXPadding) {
									rectX = options.scaleXPadding;
								} 
								//이슈어 라벨 마지막 데이터
								else if((d1.data.length - 1) == j) {
									rectX = rectX - boxWidth/2;
								}
								
								if(rectX < 0) {
									rectX = 0;
								}
							}
							
							var bColor = d2.borderColor ? d2.borderColor : self.options.borderColor ? self.options.borderColor : d2.color;
							bColor = bColor ? bColor : d1.color; 
							rect.attr("id", attrId+"_label_rect_"+j+"_"+k)
							    .attr("class", attrId+"_rect_evt_pane_"+j)
							    .attr("x", rectX )
							    .attr("y", rectY - 14)
							    .attr("width", boxWidth)
							    .attr("height", boxHeight)
							    .attr("rx", 5)
							    .attr("ry", 5)
							    .style("fill", "white")
							    .style("fill-opacity", "1")
							    .style("stroke", bColor)
							    .style("stroke-width", "1.5px")
							    ;
							if(k != 0) {
								rect.style('display', 'none'); 
								text.style('display', 'none'); 
							}
						});
			        	
						
						//var binRectWidth = (d2.issue[0]).length + ((d2.issue[0]).length * 20); 
						var binRectWidth = label.select("text").node().getComputedTextLength(); 
						var rectX = x(d2.date) - (binRectWidth/2);
						if(self.options.labels.inner) {
							//이슈어 라벨 첫데이터
							if(d2.x == options.scaleXPadding) {
								rectX = options.scaleXPadding;
							} 
							//이슈어 라벨 마지막 데이터
							else if((d1.data.length - 1) == j) {
								rectX = rectX - binRectWidth/2;
							}
						}
						label.append("rect")
						.attr("id", attrId+"_rect_label_evt_pane_"+j)
						.attr("class", attrId+"_rect_label_evt_pane")
						.attr("x", rectX)
						.attr("y", (y(d2.value)-17))
						.attr("width", binRectWidth)
						.attr("height", boxHeight)
						.style("fill", "none")
						.style('pointer-events', 'all')
						.style("cursor", "pointer")
						.on('mouseover', function() {
				        	mouseover(this);
				        })
				        .on("click", function (d) {
				        	var mouse = d3.mouse(this);
				        	var yArray = self.mouse(this, data, crosshair_y);
				        	var ret = yArray[0];
				        	d3.selectAll("."+d3.select(this).attr("id")).each(function(d) {
				        		var id = d3.select(this).attr("id").replace("text", "rect"),
				        		x = d3.select("#"+id).attr("x"),
				        		y = d3.select("#"+id).attr("y"),
				        		name = d3.select(this).text();
				        		if(mouse[1] > Number(y) && mouse[1] < Number(y) + 20) {
				        			ret.issue = name;
				        		}
				        	});
				        	self.click(ret);
						})
						;

						label.selectAll("rect").style('display', null); 
			        	label.selectAll("text").style('display', null);
			        	function getMax(objNm, attrNm) {
			        		var m = d3.max(label.selectAll(objNm), function(d) {
				        		var max = d3.max(d, function(obj) {
				        			return parseFloat(d3.select(obj).attr(attrNm));
				        		});
				        		return max;
				        	});	
			        		return m;
			        	}
			        	function getMin(objNm, attrNm) {
			        		var m = d3.min(label.selectAll(objNm), function(d) {
			        			var min = d3.min(d, function(obj) {
			        				return parseFloat(d3.select(obj).attr(attrNm));
			        			});
			        			return min;
			        		});	
			        		return m;
			        	}
			        	var rectMaxWidth = getMax("rect", "width");
			        	var rectMinX = getMin("rect", "x");
			        	var rectMinY = getMin("rect", "y");
			        	var rectMaxY = getMax("rect", "y");
			        	var textMinX = getMin("text", "x");
			        	var textMaxX = getMax("text", "x");
						
			        	label.selectAll("rect")
			        	.attr("width", rectMaxWidth)
			        	.attr("x", rectMinX)
			        	; 
			        	d3.select("#"+attrId+"_rect_label_evt_pane_"+j)
			        	.attr("height", boxHeight * (d2.issue).length)
			        	.attr("y", rectMinY)
			        	;
			        	if(self.options.labels.inner) {
			        		var textX = textMinX;
			        		if(d2.x == options.scaleXPadding) {
								textX = options.scaleXPadding + (rectMaxWidth/2);
							}else if((d1.data.length - 1) == j) {
								//이슈어 라벨 마지막 데이터
								textX = textMaxX - (rectMaxWidth/2);
							}
				        	d3.selectAll("."+attrId+"_rect_label_evt_pane_"+j)
				        	.attr("x", textX)
				        	;
			        	}
			        	
			        	
						var mouseout = function(rect, md) {
							var seld = md ? md : d2;
							var label = d3.select(rect.parentNode);
							var index = Number(d3.select(rect).attr("id").split(attrId+"_rect_label_evt_pane_")[1]);
				        	label.selectAll("rect").each(function(e, li) {
				        		if(li == 0) {
				        			return true;
				        		}
				        		var rect_id = (this.id);
				        		var text_id = (this.id).replace("rect", "text");
				        		if(rect_id != '' || text_id != '') {
					        		label.select("#"+rect_id).style('display', 'none'); 
					        		label.select("#"+text_id).style('display', 'none'); 
				        		}
				        	});
				        	label.selectAll("text").each(function() {
			        			var boxWidth = d3.select(this).node().getComputedTextLength() + 20; 
			        			var id = d3.select(this).attr("id").replace("text", "rect");
								var rectX = x(seld.date) - (boxWidth/2);
								if(self.options.labels.inner) {
									//이슈어 라벨 첫데이터
									if(index == first_index) {
										rectX = options.scaleXPadding;
									} 
									//이슈어 라벨 마지막 데이터
									else if((d1.data.length - 1) == Number(index)) {
										rectX = rectX - (boxWidth/2);
									}
								}
			        			d3.select("#"+id)
			        			.transition().duration(200)
			        			.attr("width", boxWidth)
			        			.attr("x", rectX)
			        			;
			        			
			        		});
				        	var binRectWidth = d3.select(rect).attr("width");
				        	var rectX = x(seld.date) - (binRectWidth/2);
							if(self.options.labels.inner) {
								//이슈어 라벨 첫데이터
								if(index == first_index) {
									rectX = options.scaleXPadding;
								} 
								//이슈어 라벨 마지막 데이터
								else if((d1.data.length - 1) == index) {
									rectX = rectX - binRectWidth/2;
								}
							}
				        	d3.select(rect)
				        	.attr("width", binRectWidth)
				        	.attr("height", 20)
				        	.attr("x", rectX)
				        	.attr("y", (y(seld.value) - 17))
				        	.style('display', null)
				        	;
				        	if(self.options.labels.inner) {
				        		var lt = d3.select("#"+attrId+"_label_text_" + index + "_0");
				        		var ltw = lt.node().getComputedTextLength();
				        		if(index == first_index) {
					        		 d3.select("#"+attrId+"_label_text_"+first_index+"_0").transition().duration(200).attr("x", ltw /2 + 10);
				        		}
				        		if(index == (d1.data.length - 1)) {
				        			ltw += 20;
					        		var rw = x(seld.date) - ltw/2;
					        		lt.transition().duration(200).attr("x", rw );
				        		}
					       	}
						}
						var mouseover = function(rect, md) {
							if(self.options.labels.over) {
								d3.selectAll("."+attrId+"_rect_label_evt_pane")[0].forEach(function(pane) {
									var issuelen = d3.select(pane.parentNode).selectAll("text")[0].length;
									var h = d3.select(pane).attr("height");
									if(h == (20 * issuelen)) {
										var d;
										var id = d3.select(pane.parentNode).attr("id");
										data.forEach(function (d1, i) {
											(d1.data).forEach(function (d2, i) {
												if(id == attrId+"_"+i) {
													d = d2;
													return false;
												}
											});
											if(d) {
												return false;
											}
										});
										mouseout(pane, d);
									}
								});

								var index = d3.select(rect).attr("id").split(attrId+"_rect_label_evt_pane_")[1];
								var rectX = x(d2.date) - (rectMaxWidth/2);
								if(self.options.labels.inner) {
									//이슈어 라벨 첫데이터
									if(index == first_index) {
										rectX = options.scaleXPadding;
									} 
									//이슈어 라벨 마지막 데이터
									else if((d1.data.length - 1) == index) {
										rectX = rectX - rectMaxWidth / 2;
									}
								}
								
					        	label.selectAll("rect").style('display', null); 
					        	label.selectAll("text").style('display', null);
					        	label.selectAll("rect")
					        	.transition().duration(200)
					        	.attr("width", rectMaxWidth)
					        	.attr("x", rectX)
					        	; 
					        	d3.select(rect)
					        	.attr("height", boxHeight * (d2.issue).length)
					        	.attr("y", rectMinY)
					        	;

					        	if(self.options.labels.inner) {
					        		if(index == first_index) {
						        		var max = d3.selectAll("."+attrId+"_rect_label_evt_pane_"+first_index);
						        		var textMax = d3.max(max, function(d) {
							        		var max = d3.max(d, function(text) {
							        			return parseFloat(d3.select(text).attr("x"));
							        		});
							        		return max;
							        	});
						        		d3.select("#"+attrId+"_label_text_"+first_index+"_0").transition().duration(200).attr("x", textMax);
					        		}
					        		
					        		if(index == (d1.data.length - 1)) {
						        		var max = d3.selectAll("."+attrId+"_rect_label_evt_pane_" + (d1.data.length - 1));
						        		var textMinX = d3.min(max, function(d) {
							        		var min = d3.min(d, function(text) {
							        			return parseFloat(d3.select(text).attr("x"));
							        		});
							        		return min;
							        	});
						        		d3.select("#"+attrId+"_label_text_" + (d1.data.length - 1) + "_0").transition().duration(200).attr("x", textMinX);
					        		}
					        	}
							}
				        	$(rect).parent().parent().append($(rect).parent());
						}
						d2_index++;
					});
				});
			}
		};
		
		this.mouse = function(m, data, crosshair_y) {
			
			var mouse = d3.mouse(m)[0];
        	var leftEdges = self.xPath.range();
            var width = self.xPath.rangeBand();
            var interval = (leftEdges[1] - leftEdges[0]) / 2;
            var j;
            for(j=0; mouse > (leftEdges[j] + width); j++) {}
            var date;
            if(mouse < (leftEdges[j] - interval)) {
            	date = self.xPath.domain()[j-1];
            } else {
            	date = self.xPath.domain()[j];
            }
        	
            var x = self.xPath(date);
            var yArray = [];
            data.forEach(function(info, k) {
            	var name = info.name,
            	colorKey = info[self.options.colorKey],
            	y = self.yPath(crosshair_y[date][name]);
            	var tool_count = crosshair_y[date][name] == 0 ? 0 : (crosshair_y[date][name]);
            	yArray.push({name : name, 
            		value : tool_count, 
            		color : info.color ? info.color : self.options.color(colorKey)});
            });
            return yArray;
		};
	};
	

	var Pie = function() {
		var self = this;
		this.type = "pie";
		
		this.parseRnad = function() {
			var json = [];
			var keys = {};
			
			var csv = this.options.dataRand;
			var row = csv.split("\n");

			var step = 99;
			var lengthMax  = d3.max(row, function(r) {
				return r.split(",").length;
			});
			var first = row[0].split(",");
			for (var i = 0; i < first.length; i++) {
				for (var j = 0; j < row.length; j++) {
					if(row[j] == '') {
						continue;
					}
					var fields = row[j].split(",");
					var value = Number(fields[i]);
					if(isNaN(value) || typeof value != "number") {
						step = i;
					}
				}
			}
			//csv 데이터가 1개 일때
			if(lengthMax == 1) {
				if(step == 99) {
					for (var i = 0; i < row.length; i++) {
						if(row[i] == '') {
							continue;
						}
		 				var fields = row[i].split(",");
		 				var values = {};
		 				values.name = (i + 1);
	 					values.value = fields[0];
		 				json.push(values);
					}
				} else {
					var pec = 100 / row.length;
					for (var i = 0; i < row.length; i++) {
						if(row[i] == '') {
							continue;
						}
		 				var fields = row[i].split(",");
		 				var values = {};
		 				values.name = fields[0];
	 					values.value = pec;
		 				json.push(values);
					}
				}
			} else {
				for (var i = 0; i < row.length; i++) {
					if(row[i] == '') {
						continue;
					}
	 				var fields = row[i].split(",");
	 				var max = fields.length >= 2 ? 2 : 1;
	 				var values = {};
	 				for (var j = 0; j < max; j++) {
						if(step == j) {
							values.name = fields[j];
						} else {
							values.value = fields[j];
						}
	 				}
	 				json.push(values);
				}
			}

			this.options.data = json; 
		};
		
		this.mapDraw = function(svg, options) {
		
			this.svg = svg;
			this.options = options;
			this.data = options.data;
			this.draw(true);
		}
		
		this._draw = function() {

			
			 if(this.options.dataRand) {
				this.parseRnad();
			}
			this.data = this.options.data;
		}
		
		this.draw = function(ismap) {
			
			if(!ismap) {
				this._draw();
			}
			
			var width = this.options.width - this.options.margin.left - this.options.margin.right;
			var height = this.options.height - this.options.margin.bottom - this.options.margin.top;

			var data = this.data;
			var addSize = this.options.addSize;
			var radius = Math.min(width + addSize, height + addSize) / 2;
			var arc = d3.svg.arc()
			.outerRadius(radius - 10)
			.innerRadius(0);
			
			var pie = d3.layout.pie()
		    .sort(null)
		    .value(function(d) { return Number(d.value); });

			var g = this.svg.selectAll(".arc")
			    .data(pie(data))
			    .enter().append("g")
			    .attr("class", "arc")
			    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")")
				;
			
			//var rand = Math.floor(Math.random() * 10);
			g.append("path")
			    .attr("d", arc)
			    .style("fill", function(d) {
			    	if(d.data.color) {
			    		return d.data.color;
			    	}
			    	return self.options.color(d.data[self.options.colorKey]); 
			    })
			    /*.style("opacity", function(d, i) {
			    	if(rand != i) {
			    		return 0.5;
			    	}
			    	return 1;
			    })
			    .style("stroke-width", function(d, i) {
			    	if(rand == i) {
			    		return 3;
			    	}
			    	return 0;
			    })
			    .style("stroke", function(d, i) {
			    	if(rand == i) {
			    		return "red";
			    	}
			    })*/
			    ;

			var options = this.options;
			this.options.labels.enabled = this.options.labels.enabled == null ? true : this.options.labels.enabled;			
			if(this.options.labels.enabled) {
				g.append("text")
			        .attr("transform", function (d) {
			        	var c = arc.centroid(d);
			        	var len = 1 + (self.options.labels.distance * 0.1);
			        	return "translate(" + c[0]*len +"," + c[1]*len + ")";
			        })
			        //.attr("dy", "0.35em")
			        .style("text-anchor", "middle")
			        .style("cursor", function(d) {
						if(self.options.click) {
							return "pointer";
						}
						return "default";
					})
					.style("fill", function(d) {
						if(d.data.option && options.option && options.option[d.data.option] && options.option[d.data.option].fontColor) {
							d.data.fontColor = options.option[d.data.option].fontColor;
						} else if(d.data.fontColor) {
						} else {
							d.data.fontColor = options.fontColor;
						}
						return d.data.fontColor;
					})
					.style("font-family", function(d) {
						if(d.data.option && options.option && options.option[d.data.option] && options.option[d.data.option].font) {
							d.data.font = options.option[d.data.option].font+"px";
						} else if(d.data.font) {
							d.data.font = d.font;
						} else {
							d.data.font = options.font;
						}
						return d.data.font;
					})
					.style("font-size", function (d) {
						if(d.data.option && options.option && options.option[d.data.option] && options.option[d.data.option].fontSize) {
							d.data.fontSize = options.option[d.data.option].fontSize+"px";
						} else if(d.data.fontSize) {
							d.data.fontSize = d.fontSize+"px";
						} else {
							d.data.fontSize = options.fontSize+"px";
						}
						return d.data.fontSize;
					})
					.style("letter-spacing", self.options.letterSpacing)
			        .text(function (d) {
			        	return d.data.name;
			        });
			}
			

			if(this.options.tooltip.enabled) {
				d3.select(".tooltip_pop_"+this.element[0].id).remove();
				var tooltip = d3.select("body").append("div")
				.attr("class", "tooltip_pop_"+this.element[0].id)
				.style("z-index", 100000);
				
				g.on("mousemove", function (d) {
					var textHtml = d.data.tooltip ? d.data.tooltip : d.data.name +" : "+ d.value + self.options.tooltip.suffix;
					var html = '<span>' + textHtml + '</span>';
					if(self.options.tooltip.useHtml) {
						d.name = d.data.name;
						d.color = d.data.color ? d.data.color : self.options.color(d.data[self.options.colorKey]);
						html = self.options.tooltip.html(d);
					}
					
					tooltip.transition().duration(200).style("opacity", 0.9);
					tooltip
					.html(html)
					.style("left", Math.max(0, d3.event.pageX - 50 + self.options.tooltip.x) + "px")
					.style("top", (d3.event.pageY - 50 + self.options.tooltip.y) + "px")
					.style("padding", "10px")
			        ;
					var tooltip_style = {};
					if(self.options.tooltip.css) {
			            for ( var key in self.options.tooltip.css) {
			            	tooltip_style[key] = self.options.tooltip.css[key];
						}
		            }
					tooltip.style(tooltip_style);
					
				})	
				.on("mouseout", function () {
				    tooltip.transition().duration(200).style("opacity", 0);
				});
			}
			
			if(this.options.click) {
				g.style('cursor', 'pointer')
				.on("click", function(d) {
					var params = {};
					params.name = d.data.name;
					params.value = d.data.value;
					if(d.id) {
						params.id = d.id;
					}
					params.color = d.data.color ? d.data.color : self.options.color(d.data[self.options.colorKey]);
					self.options.click(params);
				});
			}
		}
	};
	
	

	var Bar = function() {
		var self = this;
		this.type = 'stackedbar';
		
		this.parseRand = function() {
			
			var csv = this.options.dataRand;
			var json = [];
			var category = {}
			var data = [];
			var step = 999;
			var dates = d3.map();
			var row = csv.split("\n");
			var index = 0;
			var first = row[0].split(",");
			for (var i = 0; i < first.length; i++) {
				for (var j = 0; j < row.length; j++) {
					if(row[j] == "") {
						continue;
					}
					var fields = row[j].split(",");
					var value = Number(fields[i]);
					if(isNaN(value) || typeof value != "number") {
						step = i;
					}
				}
			}

			for (var i = 0; i < row.length; i++) {
				if(row[i] == "") {
					continue;
				}
				var fields = row[i].split(",");
				var max = fields.length >= 2 ? 2 : 1;
				var obj = {};
				for (var j = 0; j < max; j++) {
					if(step == j) {
						obj.name = fields[j];
					} else {
						obj.value = Number(fields[j]);
					}
					if(!obj.name) {
						obj.name = (i + 1);
					}
					if(!obj.value) {
						obj.value = 0;
					}
					//obj.category = i;
				}
				if(dates.has(obj.name)) {
					for ( var j in data) {
						var child = data[j];
						if(child.name == obj.name) {
							delete data[j];
							index--;
							break;
						}
					}
				}
				dates.set(obj.name);
				data[index++] = obj;
			}
			this.options.data = [data]; 
		};
		
		this.parseJson = function() {
			var json = this.options.data;
			var isParsing = true;
			var ret = d3.map();
			for(var i in json) {
				if($.isArray(json[i])) {
					isParsing = false;
					break;
				} else {
					var obj = json[i];
					obj.value = Number(obj.value);
					if(obj.category) {
						pushData(ret, obj, "category"); 
					} else if(!obj.category){
						//pushData(ret, obj, "name");
						if(ret.has("bar")) {
							var arr = ret.get("bar");
							arr.push(obj);
							ret.set("bar", arr);
						} else {
							ret.set("bar", [obj]);
						}
					}
				}
			}

			if(!isParsing) {
				return;
			}
			function pushData(data, obj, id) {
				if(data.has(obj[id])) {
					var arr = data.get(obj[id]);
					arr.push(obj);
					data.set(obj[id], arr);
				} else {
					data.set(obj[id], [obj]);
				}
				return data;
			}
			
			var data = [];
			d3.map(ret.keys(), function(key) {
				var obj = ret.get(key);
				data.push(obj);
			});
			this.options.data = data;
		};
		
		this.draw = function() {
			this.type = this.options.type;
			if(this.options.dataRand) {
				this.parseRand();
			} else {
				this.parseJson();
			}
			
			var data = this.options.data;
			var width = this.options.width - this.options.margin.left - this.options.margin.right,
            height = this.options.height - this.options.margin.top - this.options.margin.bottom;

            var svg = this.svg.attr("transform", "translate(" + this.options.margin.left + "," + (Number(this.options.margin.top) + 3) + ")");
            
            var stacked = [];
	        var tmp = {};
	        for (var i = 0; i < data.length; i++) {
	        	var d = data[i];
	        	for (var j = 0; j < d.length; j++) {
	        		var dd = d[j];
	        		if(!tmp[dd.name]) {
	        			tmp[dd.name] = 0;
	        		}
	        		dd.value = Number(dd.value);
	        		dd.y0 = tmp[dd.name];
	        		dd.y1 = tmp[dd.name] += dd.value;
	        		if(!stacked[j]) {
	        			stacked[j] = [];
	        		}
	        		stacked[j][i] = dd;
				}
			}
	        
	        if(self.options.tickSuffix == "%" && self.type == self.config.CHART_TYPE_STACKED_BAR) {
		        for (var i = 0; i < data.length; i++) {
		        	var d = data[i];
		        	for (var j = 0; j < d.length; j++) {
		        		var dd = d[j];
		        	   	dd.y0 = dd.y0 / tmp[dd.name]; 
		            	dd.y1 = dd.y1 / tmp[dd.name];
		        	}
		        }
	        }
	        data = stacked;
	        this.options.data = stacked;
	        
			if(!this.type.match("horizontal")) {
				this.vertical();
			} else {
				this.horizontal();
			}
			
			var bar = this.bar;
			
			if(this.options.tooltip.enabled) {
				d3.select(".tooltip_pop_"+this.element[0].id).remove();
				var tooltip = d3.select("body").append("div")
				.attr("class", "tooltip_pop_"+this.element[0].id)
				.style("z-index", 100000);
				
				bar.style('cursor', 'pointer')
				.on("mousemove", function (d, idx) {
					var obj = self.type == self.config.CHART_TYPE_STACKED_BAR ? d[idx] : d[0];
					var html = '';
					html += '<p style="font-size:14px; padding-left:10px;">'+obj.name+'</p>';
					html += '<ul style="list-style:none;padding-left:2px;">';
					for (var i = 0; i < (data[idx].length); i++) {
						var dd = data[idx][i];
						var name;
						var value;
						if(self.type == self.config.CHART_TYPE_STACKED_BAR) {
							name = dd.category;
							if(self.options.tickSuffix == "%") {
								value = (dd.y1 - dd.y0) * 100;
								value = (value).toFixed(2);
							} else {
								value = dd.value;
							}
						} else if(self.type == self.config.CHART_TYPE_GROUPED_BAR) {
							name = dd.category;
							value = dd.value;
						} else {
							name = dd.name;
							value = dd.value;
						}
						html += '<li style="padding:2px 10px;">'+
						'<span style="color:' + dd.color + '; padding-right:5px;font-size:10px;">●</span>'+
						'<span style="margin-right:30px;">'+ name +'</span>'+
						'<strong style="float:right;">'+ value + self.options.tooltip.suffix + '</strong>'+
						'</li>';
					}
					
					html+= '</ul>';
					if(self.options.tooltip.html) {
						var param = {};
						param.name = d.data.name;
						param.value = d.value;
						param.color = d.data.color ? d.data.color : self.options.color(d.data[self.options.colorKey]);
						html = self.options.tooltip.html(param);
					}
					tooltip.style('display', null); 
					tooltip.transition().duration(200).style("opacity", 0.9);
					tooltip.html(html);
					
					var tooltip_style = {
			        	 left: Math.max(0, d3.event.pageX + 30 + (self.options.tooltip.x)) + 'px',
			        	 top: (d3.event.pageY - 50 + (self.options.tooltip.y)) + 'px'
		            }
		            
		            if(self.options.tooltip.css) {
			            for ( var key in self.options.tooltip.css) {
			            	tooltip_style[key] = self.options.tooltip.css[key];
						}
		            }
		            
					tooltip.style(tooltip_style);
					
					var width = Number(tooltip.style("width").replace("px", '')) + 30;
			        tooltip.style("width", width+"px");
				})	
				.on("mouseout", function () {
				    tooltip.transition().duration(200).style("opacity", 0)
				    tooltip.style('display', 'none'); 
				})
				.on("click", function (d) {
					self.click(d);
				})
				;
			}
		};
		
		this.horizontal = function() {
			var data = this.options.data;
			
            var width = this.options.width - this.options.margin.left - this.options.margin.right,
            height = this.options.height - this.options.margin.top - this.options.margin.bottom,
            svg = this.svg;
            
            var x = d3.scale.linear().range([0, width]),
            	y = d3.scale.ordinal().rangeRoundBands([0, height], .1);

	        var xAxis = d3.svg.axis().scale(x).orient("top").tickSize(-height),
	            yAxis = d3.svg.axis().scale(y).orient("left").tickSize(0);
	        

	        var max = d3.max(data, function(d) { 
	        	var ret = d3.max(d, function(dd) {
	        		return dd.value; 
	        	});
	        	return ret; 
	        });
	        
	        x.domain([0, max]);
	        y.domain(data.map(function(d) { return d[0].name; }));
	        
	        var bar;
	        if(this.type == this.config.CHART_TYPE_HORIZONTAL_BAR) {

	        	max = max + (max/10);
	        	x.domain([0, max]);
	        } else if(this.type == this.config.CHART_TYPE_HORIZONTAL_STACKED_BAR) {
	        	var max = d3.max(data, function(d) { 
		        	var ret = d3.max(d, function(dd) {
		        		return dd.y0 + dd.y1; 
		        	});
		        	return ret; 
		        });
	        	x.domain([0, max]);
	        }

	        var barWidth = self.options.barWidth == 0 ? y.rangeBand() : self.options.barWidth;
	        bar = svg.selectAll("."+this.type)
		        .data(data)
		        .enter().append("g")
	        	.attr("transform", function(d, i) { 
	        		var ty = ((y.rangeBand() - barWidth) / 2);
	        		return "translate(1," + ty + ")"; 
	        	});
	        if(this.type == this.config.CHART_TYPE_HORIZONTAL_BAR) {
	        	bar.attr("transform", function(d, i) { 
	        		var addty = barWidth == y.rangeBand() ? 0 : (y.rangeBand() - barWidth) / 2;
	        		var ty = y(d[0].name) + addty;
	        		return "translate(1," + ty + ")"; 
	        	});
	        	bar.append("rect")
		        .attr("width", function(d) { return x(d[0].value); })
		        .attr("height", barWidth)
		        .style("fill", function(dd) {
	            	var d = dd[0];
	        		if(!d.color) {
	        			var dd = d.category ? d.category : d[self.options.colorKey];
	        			d.color = self.options.color(dd);
	        		}
	        		return d.color; 
	        	})
		        ;
	        } else if(this.type == this.config.CHART_TYPE_HORIZONTAL_STACKED_BAR) {
	        	 bar.selectAll("rect")
	        	  .data(function(d) { return d; })
	        	  .enter().append("rect")
        	      .attr("y", function(d) { return y(d.name); })	    //.attr("x", function(d) { return x(d.data.State); })
        	      .attr("x", function(d) { return x(d.y0); })			    //.attr("y", function(d) { return y(d[1]); })	
        	      .attr("width", function(d) { return x(d.value); })	//.attr("height", function(d) { return y(d[0]) - y(d[1]); })
        	      .attr("height", this.options.barWidth == 0 ? y.rangeBand() : this.options.barWidth)				    //.attr("width", x.bandwidth());
        	      .style("fill", function(d) {
  	        		if(!d.color) {
  	        			d.color = self.options.color(d.category);
  	        		}
  	        		return d.color; 
  	        	});
	        } else if(this.type == this.config.CHART_TYPE_HORIZONTAL_GROUPED_BAR) {
	        	bar.attr("transform", function(d, i) { 
	        		var ty = ( (y.rangeBand()/2) - (self.options.barWidth*2)) + y(d[0].name);
	        		return "translate(1," + ty + ")"; 
	        	});
	        	
	        	var categories = data[0].map(function(d) {
	        		return d.category;
	        	});
	        	var y1 = d3.scale.ordinal();
	        	y1.domain(categories).rangeRoundBands([0, y.rangeBand()]);
	        	
	        	bar.selectAll("rect")
	        	  .data(function(d) { return d; })
	        	  .enter().append("rect")
	      	      .attr("y", function(d) { return y1(d.category); })	    //.attr("x", function(d) { return x(d.data.State); })
	      	      .attr("x", 0)			    //.attr("y", function(d) { return y(d[1]); })	
	      	      .attr("width", function(d) { return width - x(d.value); })	//.attr("height", function(d) { return y(d[0]) - y(d[1]); })
	      	      .attr("height", this.options.barWidth == 0 ? y.rangeBand() : this.options.barWidth)				    //.attr("width", x.bandwidth());
	      	      .style("fill", function(d) {
		        		if(!d.color) {
		        			d.color = self.options.color(d.category);
		        		}
		        		return d.color; 
		        	});
	        }
	       
	        
	        this.bar = bar;
	        
		    svg.append("g")
		        .attr("class", "x axis")
		        .call(xAxis);
	
		    svg.append("g")
		        .attr("class", "y axis")
		        .call(yAxis);

		    svg.selectAll(".x").select("path")
	    	.attr('d', "M0,1V0H"+width+"V1")
	    	.style("fill", "#A6A6A6")
	    	;
	        svg.selectAll(".y").select("path")
	    	.attr('d', "M0,0H1V"+height+"H0")
	    	.style("fill", "#A6A6A6")
	    	;
	        
	        svg.selectAll(".x").selectAll("text")
	    	.style("color", this.options.fontColor)
	    	.style("font-family", this.options.font)
	    	.style("font-size", this.options.fontSize+"px")
	    	.text(function(d, i) {
	    		if(d == undefined) {
	    			return;
	    		}
	    		if(self.options.ticks && i % self.options.ticks != 0) {
	    			return;
	    		}
	    		if(self.options.tickSuffix == "%") {
	    			d = d * 100;
	    		}
	    		if(self.options.tickPoint > 0) {
	    			return d.toFixed(self.options.tickPoint) + self.options.tickSuffix;
	    		} else {
	    			return self.isInt(d) ? d + self.options.tickSuffix : '';
	    		}
	    	})
	    	;
	        
	        //y좌표 text 위치 수정
	    	svg.selectAll(".y").selectAll("text")
	    	.style("color", this.options.fontColor)
	    	.style("font-family", this.options.font)
	    	.style("font-size", this.options.fontSize+"px")
	    	;
	    	
		};
		
		this.vertical = function() {
			
			var data = this.options.data;
            var width = this.options.width - this.options.margin.left - this.options.margin.right,
            height = this.options.height - this.options.margin.top - this.options.margin.bottom,
            svg = this.svg;
            var options = this.options;

			var x = d3.scale.ordinal().rangeRoundBands([0, width], .1);
	        var y = d3.scale.linear().rangeRound([height, 0]);
	       
	        x.domain(data.map(function(d) { return d[0].name; }));
	        if(this.options.tickSuffix != "%") {
	        	var max;
	        	if(self.type == this.config.CHART_TYPE_STACKED_BAR) {
	        		max = d3.max(data, function(d) {
	        			var total = 0;
	        			for(var i in d) {
	        				total += Number(d[i].value);
	        			}
	        			return total;
	        		});
	        	} else {
	        		max = d3.max(data, function(d) { 
	        			return d3.max(d, function(e) {
	        				return Number(e.value); 
	        			});
	        		});
	        	}
	        	max = max + (max / 10);
	        	y.domain([0, max]);
	        }
	        var xAxis = d3.svg.axis().scale(x).orient("bottom");
	        var yAxis = d3.svg.axis().scale(y).ticks(this.options.ticks).orient("left");
	        if(this.options.tickSuffix == '%') {
	        	yAxis.tickFormat(d3.format(this.options.tickSuffix));
	        }
	        
	        svg.append("g")
	        	.attr("class", "x axis")
	        	.attr("transform", "translate(0," + height + ")")
	        	.call(xAxis);
	        
	        svg.append("g")
	        	.attr("class", "y axis")
	        	.call(yAxis)
	        	;
	        
	        var bar;
	        if(this.type == this.config.CHART_TYPE_GROUPED_BAR) {
	        	
	        	var categories = data[0].map(function(d) {
	        		return d.category;
	        	});
	        	
	        	var x1 = d3.scale.ordinal();
	        	var barWidth = self.options.barWidth == 0 ? x.rangeBand() : self.options.barWidth * (categories.length);
	        	x1.domain(categories).rangeRoundBands([0, barWidth]);
	        	
		        bar = svg.selectAll("."+this.type)
		        	.data(data)
		        	.enter().append("g")
		        	.attr("class", this.type)
		        	.attr("transform", function(d, i) { 
		        		var tx = ((x.rangeBand() - barWidth) / 2) + x(data[i][0].name);
		        		return "translate(" + tx + ",0)"; 
		        	});

		        bar.selectAll("rect")
	              .data(function(d) { return d; })
	              .enter().append("rect")
	              .attr("width", this.options.barWidth == 0 ? x.rangeBand() / categories.length : this.options.barWidth)
	              .attr("x", function(d) { return x1(d.category); })
	              .attr("y", function(d) { return y(d.value); })
	              .attr("height", function(d) { return height - y(d.value); })
	              .style("fill", function(d) {
		        		if(!d.color) {
		        			d.color = self.options.color(d.category);
		        		}
		        		return d.color; 
	              });
	        } else if(this.type == this.config.CHART_TYPE_BAR) {
	        	bar = svg.selectAll("."+this.type)
	        	.data(data)
	            .enter().append("rect")
	            .attr("width", this.options.barWidth == 0 ? x.rangeBand() : this.options.barWidth)
	            .attr("height", function(d) { return height - y(d[0].value); })
	            .attr("x", function(d) { 
	            	var xx = x.rangeBand() / 2  - (self.options.barWidth/2) + x(d[0].name);
	            	return xx; 
	            })
	            .attr("y", function(d) { return y(d[0].value); })
	            .style("fill", function(dd) {
	            	var d = dd[0];
	        		if(!d.color) {
	        			var dd = d.category ? d.category : d[self.options.colorKey];
	        			d.color = self.options.color(dd);
	        		}
	        		return d.color; 
	        	})
	            ;
	        	
	        } else {
	        	data.forEach(function(d) {
	        		d.forEach(function(dd) {
	        			dd.value = Number(dd.value);
	        			dd.y0 = dd.value == 0 ? 0 : dd.y0;
	        			dd.y1 = dd.value == 0 ? 0 : dd.y1;
	        		});
	        	});

	        	bar = svg.selectAll("."+this.type)
	        	.data(data)
	        	.enter().append("g")
	        	.attr("class", this.type)
	        	.attr("transform", function(d, i) { 
	        		var tx = ( (x.rangeBand()/2) - (self.options.barWidth/2)) + x(d[0].name);
	        		return "translate(" + tx + ",0)"; 
	        	});
	        
		        bar.selectAll("rect")
	        	.data(function(d, i) { return d; })
	        	.enter().append("rect")
	        	.attr("width", this.options.barWidth == 0 ? x.rangeBand() : this.options.barWidth)
	        	.attr("height", function(d) {  return y(d.y0) - y(d.y1); })
	        	.attr("y", function(d) { return y(d.y1); })
	        	.style("fill", function(d) {
	        		if(!d.color) {
	        			d.color = self.options.color(d.category);
	        		}
	        		return d.color; 
	        	});
	        }
	        
	        this.bar = bar;
	        
	    	svg.selectAll(".x").selectAll("text")
	    	.style("color", this.options.fontColor)
	    	.style("font-family", this.options.font)
	    	.style("font-size", this.options.fontSize+"px")
	    	.style("text-anchor", this.options.tickXAlign)
	    	.attr("x", function(d) {
	    		return Number(d3.select(this).attr("x")) + Number(self.options.tickXtextX);
	    	})
	    	.attr("y", function(d) {
	    		return Number(d3.select(this).attr("y")) + 
	    				Number(self.options.tickXtextY);
	    	})
	    	;
	    	
	    	
	    	//x좌표 text 위치 수정
			var xTickText = svg.selectAll(".x").selectAll(".tick").select("text")
			.style("text-anchor", options.tickXtextAnchor)
			.text(function(d, i) {
				if(self.options.ticksX) {
					var chk = (i / self.options.ticksX); 
					if(chk.toString().indexOf(".") > 0) {
						return;
					}
				}
				if(i % self.options.tickSkip != 0) {
					return;
				}
				if(self.options.dateFormat) {
					var date = parseDate(d.toString());
					return formatDate(date);
				}
				return d;
			});
			
			if(options.textRotate != 0 && options.textRotateCount && data.length >= options.textRotateCount) {
				xTickText.attr("x", self.options.textRotateOptions.tickXtextX)
				.attr("y", self.options.textRotateOptions.tickXtextY)
				.attr("transform", "translate(0,0)rotate("+options.textRotate+")");
			} else {
				xTickText.attr("x", function(d, i) {
					var textX = 0;
					var translate = d3.transform(d3.select(this.parentNode).attr("transform")).translate;
					var nodeWidth = d3.select(this).node().getComputedTextLength();
					if(translate[0] == 0) {
						textX = nodeWidth / 2;
					} else if(i != 0 && translate[0] < 35) {
						textX = -13 + self.options.tickXtextX;
					} else if(translate[0] == (width)) {
						textX = -(nodeWidth / 2);
					}
					return textX;
				});
				xTickText.attr("y", 7 + self.options.tickXtextY)
			}
			
	    	//y좌표 text 위치 수정
	    	svg.selectAll(".y").selectAll("text")
	    	.style("color", this.options.fontColor)
	    	.style("font-family", this.options.font)
	    	.style("font-size", this.options.fontSize+"px")
	    	.text(function(d, i) {
	    		if(d == undefined) {
	    			return;
	    		}
	    		if(self.options.ticks && i % self.options.ticks != 0) {
	    			return;
	    		}
	    		if(self.options.tickSuffix == "%") {
	    			d = d * 100;
	    		}
	    		if(self.options.tickPoint > 0) {
	    			return d.toFixed(self.options.tickPoint) + self.options.tickSuffix;
	    		} else {
	    			return self.isInt(d) ? d + self.options.tickSuffix : '';
	    		}
	    	})
	    	;
	    	
	    	
	        
	        svg.selectAll(".axis").select("path")
	        .style("fill", "none")
			.style("shape-rendering", "crispedges")
			.style("stroke", "#adacac")
			;
			svg.selectAll(".axis").selectAll("text")
			.style("color" , self.options.fontColor)
			.style("font-size", self.options.fontSize+"px")
			.style("font-family", self.options.font)
			;

		    svg.selectAll(".x").select("path")
	    	.attr('d', "M0,0V0H"+(width)+"V0")
	    	.style("fill", "#A6A6A6")
	    	;
	        svg.selectAll(".y").select("path")
	    	.attr('d', "M0,0H0V"+(height)+"H0")
	    	.style("fill", "#A6A6A6")
	    	;
	        
	        svg.selectAll(".tick").selectAll("line")
	        .style("fill", "none")
	        .style("stroke-width", 0)
	        ;
	        
	        if(this.options.gridUse) {
		        svg.selectAll(".y").selectAll("line")
		    	.attr("x1", 0)
		        .attr("x2", function(d, i){
		        	if(i == 0) {
		        		return;
		        	}
		        	return width; 
		        })
		        .attr("y1", 0)
		        .attr("y2", 0)
		    	.style("opacity", 0.7)
		    	.style("stroke", "#c4c4c4")
		    	.style("stroke-width", "1px")
		    	.style("stroke-dasharray", "2,2")
		    	;
	        }

		};
		
		this.wrap = function(text, width) {
			text.each(function() {
				
				var text = d3.select(this),
			        words = text.text().split(/\s+/).reverse(),
			        word,
			        lineNumber = 0,
			        lineHeight = 1.1, // ems
			        y = text.attr("y"),
			        dy = parseFloat(text.attr("dy"));
			    tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
			    if(words.length <= 1) {
			    	if(words[0].length <= 5) {
			    		tspan.text(words[0]);
			    	} else {
			    		var start = 0;
					    for(var i = 1; i < words[0].length; i++) {
					    	if(i % 4 == 0 || i == (words[0].length-1)) {
						    	word = words[0].substring(start, i+1);
						    	start = i+1;
						    	if(i == 4) {
						    		tspan.text(word);
						    	} else {
						    		tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
						    	}
					    	} 
					    	if(i % 5 != 0) {
					    		continue;
					    	}
					    }
			    	}
			    } else {
			    	var len = words.length;
			    	var index = 0;
			    	while(word = words.pop()) {
			    		if(index == 1 && len > 2) {
			    			word += "...";
			    		}
				    	text.append("tspan").attr("x", 0).attr("y", y).attr("dy", lineNumber++ * lineHeight + dy + "em").text(word);
				    	index++;
				    	if(index == 2) {
			    				break;
		    			}
			    	}
		    	}
			});
		}
	};
	
	
	var HorizontalBar = function() {
		var self = this;
		this.type = 'horizontal_stackedbar';
		
		this.draw = function() {
			var options = this.options;
		    var margin = options.margin;
		    var width = options.width - options.margin.left - options.margin.right;
		    var height = options.height - options.margin.bottom - options.margin.top;
		    var color = options.color;

		    var data = options.data;

		    var g = this.svg.attr("transform", "translate(" + margin.left + "," + (Number(margin.top)) + ")");
	
			
		
	}
}


var Scatter = function() {
	var self = this;
	this.type = "scatter";
	
	this.parseRand = function() {
		var csv = this.options.dataRand;
		var row = csv.split("\n"); 
		var json = [];
		
		var step = 999;
		var first = row[0].split(",");
		for (var i = 0; i < first.length; i++) {
			for (var j = 0; j < row.length; j++) {
				if(row[j] == "") {
					continue;
				}
				var fields = row[j].split(",");
				var value = Number(fields[i]);
				if(isNaN(value) || typeof value != "number") {
					step = i;
				}
			}
		}
		
		for (var i = 0; i < row.length; i++) {
			if(row[i] == '') {
				continue;
			}
			var fields = row[i].split(",");
			var values = {};
			
			if(step == 999) {
				values.name = i;
				values.category = i;
				values.x = fields[0];
				values.y = fields[1];
				if(fields[2]) {
 					values.value = fields[2];
 				} else {
 					values.value = 1;
 				}
					
			} else {
 				
				var indexlist = []; 
				for(var j in fields) {
					if(j == step) {
						values.name = fields[0];
						values.category = fields[0];
					} else {
						indexlist.push(j);
					}
				}
				if(indexlist.length == 1) {
					this.xformat = "text";
					values.value = 1;
					values.x = values.name;
					values.y = Number(fields[indexlist[0]]);
						
				} else {
 					if(indexlist[0]) {
 						values.x = fields[indexlist[0]];
 					}
 					if(indexlist[1]) {
 						values.y = fields[indexlist[1]];
 					}
	 				if(indexlist[2]) {
	 					values.value = fields[indexlist[2]];
	 				} else {
	 					values.value = 1;
	 				}
				}
			}
			json.push(values);
		}
		this.options.data = json;
		};
		
		this.draw = function() {

			if(this.options.dataRand) {
				this.parseRand();
			}
			var data = this.options.data;
			var width = this.options.width, 
				height = this.options.height,
				margin = this.options.margin;
			
			var x, y;
			if(this.xformat == "text") {
				x = d3.scale.ordinal().domain(data.map(function(d) { return d.name; })).rangePoints([0, width - margin.right - margin.left]),
				y = d3.scale.linear().domain([0, d3.max(data, function(d) { return d.y; })]).range([height - (margin.top * 2)- margin.bottom, 0]);
			} else {	
				x = d3.scale.linear().range([0, width - margin.left - margin.right]),
				y = d3.scale.linear().range([height - (margin.top * 2) - margin.bottom, 0]);

				data.sort(function(a, b) { return d3.ascending(a.category, b.category); })
				
				var minX = d3.min(data, function (d) {
					d.x = Number(d.x);
					return d.x;
				});
				var maxX = d3.max(data, function (d) {
					return d.x;
				});
				var minY = d3.min(data, function (d) {
					d.y = Number(d.y);
					return d.y;
				});
				var maxY = d3.max(data, function (d) {
					return d.y;
				});

				maxX = maxX > 0 ? maxX + (maxX / 10) : maxX - (maxX / 10) ;
				minX = minX > 0 ? minX - (minX / 10) : minX + (minX / 10) ;
				maxY = maxY > 0 ? maxY + (maxY / 10) : maxY - (maxY / 10) ;
				minY = minY > 0 ? minY - (minY / 10) : minY + (minY / 10) ;
				
				x.domain([minX, maxX]);
				y.domain([minY, maxY]);
			}
			
			color = this.options.color;

			var svg = this.svg;
			var xAxis = d3.svg.axis()
				.scale(x)
				.orient("bottom");
	
			if(this.options.ticksX) {
				xAxis.ticks(this.options.ticksX)
			}
			
			var yAxis = d3.svg.axis()
				.scale(y)
				.orient("left");
	
			if(this.options.ticksY) {
				yAxis.ticks(this.options.ticksY)
			}
			
			svg.append("g")
				.attr("class", "x axis")
				.attr("transform", "translate(" + (margin.left + 1) + "," + (height - margin.top - margin.bottom) + ")")
				.call(xAxis);
			
			svg.append("g")
				.attr("class", "y axis")
				.attr("transform", "translate(" + margin.left + "," + margin.top + ")")
				.call(yAxis);
			
			if(this.options.nodeSize != 0) {
				for ( var i in data) {
					var d = data[i];
					d.r = this.options.nodeSize;
				}
			} else {
				var valueMax = d3.max(data, function(d) {
					d.value = Number(d.value);
					return d.value;
				});
				
				for ( var i in data) {
					var d = data[i];
					var r = 0;
					var value = d.value;
					if(value >= Math.round(valueMax * 0.9)) {
						r = 20;
					} else if(value < Math.round(valueMax * 0.9) && value >= Math.round(valueMax * 0.8)) {
						r = 18;
					} else if(value < Math.round(valueMax * 0.8) && value >= Math.round(valueMax * 0.7)) {
						r = 16;
					} else if(value < Math.round(valueMax * 0.7) && value >= Math.round(valueMax * 0.6)) {
						r = 14;
					} else if(value < Math.round(valueMax * 0.6) && value >= Math.round(valueMax * 0.5)) {
						r = 12;
					} else if(value < Math.round(valueMax * 0.5) && value >= Math.round(valueMax * 0.4)) {
						r = 10;
					} else if(value < Math.round(valueMax * 0.4) && value >= Math.round(valueMax * 0.3)) {
						r = 8;
					} else {
						r = 5;
					}
					d.r = r;
				}
			}
			
			if(self.options.tooltip.enabled) {
				var tooltip = d3.select('body').append("div")
	            .attr("class", "tooltip_pop_"+this.element[0].id)
				.style("opacity", 0)
			}
			var mouseover = function(m) {
				var circle = d3.select(this);
				circle.transition()
				.duration(800).style("opacity", 1)
				.attr("r", function(d) {
					return d.r + 10 ;
				})
				.ease("elastic")
				;
				
				svg.append("g")
					.attr("class", "guide")
				.append("line")
					.attr("x1", circle.attr("cx"))
					.attr("x2", circle.attr("cx"))
					.attr("y1", +circle.attr("cy") + margin.top)
					.attr("y2", height - margin.top - margin.bottom)
					.attr("transform", "translate("+margin.left+", 0)")
					.style("stroke", circle.style("fill"))
					;
	
				svg.append("g")
					.attr("class", "guide")
				.append("line")
					.attr("x1", +circle.attr("cx"))
					.attr("x2", 0)
					.attr("y1", circle.attr("cy") - margin.bottom + margin.top)
					.attr("y2", circle.attr("cy") - margin.bottom + margin.top)
					.attr("transform", "translate("+margin.left+", " + margin.bottom + ")")
					.style("stroke", circle.style("fill"))
					;
				
				if(self.options.tooltip.enabled) {
					if(m.tooltip) {
						var html = '<p style="font-size:14px; padding:0 10px;">'+
						'<span style="color:'+m.color+'; font-size:10px;"></span>' + (m.tooltip)+
						'</p><ul style="list-style:none;padding-left:2px;">';
					} else {
						var html = '<p style="font-size:14px; padding:0 10px;">'+
						'<span style="color:'+m.color+'; padding-right:5px;font-size:10px;">●</span>' + (m.name)+
						'</p><ul style="list-style:none;padding-left:2px;">';
						if(self.options.tooltip.useHtml) {
			            	tooltip_html = self.options.tooltip.html(m);  
			            } else {
							html += '<li style="padding:2px 10px;"><span style="margin-right:30px;">x </span><strong style="float:right;">'+ m.x+ '</strong></li>'+
							'<li style="padding:2px 10px;"><span style="margin-right:30px;">y </span><strong style="float:right;">'+ m.y+ '</strong></li>'+
							'<li style="padding:2px 10px;"><span style="margin-right:30px;">value </span><strong style="float:right;">'+ m.value+ '</strong></li>';
			            }
					}
					var tooltip_style = {};
					if(self.options.tooltip.css) {
						for ( var key in self.options.tooltip.css) {
							tooltip_style[key] = self.options.tooltip.css[key];
						}
					}
					tooltip.html(html)
					.style("left", (d3.event.pageX + 30 + self.options.tooltip.x) + "px")
					.style("top", (d3.event.pageY - 28 + self.options.tooltip.y) + "px")
					.transition()
					.duration(200) // ms
					.style("opacity", .9) // started as 0!
					tooltip.style("visibility", "visible")
					.style(tooltip_style);
				}
				
			};

			var mouseout = function() {
				var circle = d3.select(this);
	
				circle.transition()
				.duration(800).style("opacity", .7)
				.attr("r", function(d) {
					return d.r;
				})
				.ease("elastic");
	
				d3.selectAll(".guide").transition().duration(100)
				.styleTween("opacity", function() { 
					return d3.interpolate(.7, 0); 
				})
				.remove();
				if(self.options.tooltip.enabled) {
					tooltip.style("visibility", "hidden");
				}
			};
	
			var groups = svg.append("g").attr("transform", "translate(" + (margin.left + 1) + ", " + margin.top + ")");

			this.options.labels.enabled = this.options.labels.enabled == null ? false : this.options.labels.enabled;
			this.options.node.enabled = this.options.node.enabled == null ? true : this.options.node.enabled;
			
			//둘다 visible 일 때 
			//if(this.options.node.enabled && this.options.labels.enabled) {
			if(this.options.node.enabled) {
				var circles = groups.selectAll("circle")
				.data(data)
				.enter().append("circle")
				.attr("class", this.options.nodeClass)
				.attr({
					cx: function(d) { 
						var cx;
						if(self.xformat == "text") {
							cx = x(d.name);
						} else {
							cx = x(+d.x); 
						}
						return cx;
					},
					cy: function(d) { return y(+d.y) },
					r: function(d) { return d.r; },
					id: function(d) { return d.name; }
				})
				.style("fill", function(d) {
					var fill;
					if(self.options.nodeColor) {
						fill = self.options.nodeColor;
					} else {
						fill = color(d.category);
						if(d.option && self.options.option && self.options.option[d.option] && self.options.option[d.option].color) {
							fill = self.options.option[d.option].color;
						} else if(d.color) {
							fill = d.color;
			        	} 
						d.color = fill;
					}
					return fill; 
				})
				.style("stroke", function(d) {
					if(d.option && self.options.option && self.options.option[d.option] && self.options.option[d.option].nodeBorderColor) {
						d.nodeBorderColor = self.options.option[d.option].nodeBorderColor;
					} else if(d.nodeBorderColor) {
		        	} else {
		        		d.nodeBorderColor = self.options.nodeBorderColor;
		        	}
					return d.nodeBorderColor;
				})
				.style("stroke-width", function(d) {
					if(d.option && self.options.option && self.options.option[d.option] && self.options.option[d.option].nodeBorderWidth) {
						d.nodeBorderWidth = self.options.option[d.option].nodeBorderWidth;
					} else if(d.nodeBorderWidth) {
		        	} else {
		        		d.nodeBorderWidth = self.options.nodeBorderWidth;
		        	}
					return d.nodeBorderWidth;
				})
				.style("opacity", self.options.nodeOpacity)
				.style("cursor", function(d) {
					if(self.options.click) {
						return "pointer";
					}
					return "default";
				})
				.on("click", function(d) {
					if(self.options.click) {
						self.click(d);
					}
				})
				;
				if(this.options.node.over) {
					circles.on("mouseover", mouseover);
					circles.on("mouseout", mouseout);
				}
				circles.append("title").text(function(d) { 
					if(d.tooltip) {
						return d.tooltip;
					} else if(self.options.tooltip.textFunc) {
						return self.options.tooltip.textFunc(d);
					}
					return d.name; 
				})
			}

			if(this.options.tooltip.enabled) {
				
				d3.select(".tooltip_pop_"+this.element[0].id).remove();
				var tooltip = d3.select('body').append("div")
			    .attr("class", "tooltip_pop_"+this.element[0].id)
				.style("opacity", 0)
				.style("z-index", 10000)
				.style("visibility", "hidden")
				;
			}

			if(this.options.labels.enabled) {
				var max = d3.max(data, function(d) {
					d.value = Number(d.value);
					return d.value;
				});
				var min = d3.min(data, function(d) {
					d.value = Number(d.value);
					return d.value;
				});
				var s = d3.scale.linear().domain([min, max]).range(this.options.fontRange);
				var labels = groups.selectAll("text")
				.data(data)
				.enter().append("text")
				.attr("class", this.options.nodeClass)
				.attr({
					x: function(d) { 
						var cx;
						if(self.xformat == "text") {
							cx = x(d.name);
						} else {
							cx = x(+d.x); 
						}
						if(self.options.fontX) {
							cx = Number(cx) + Number(self.options.fontX);
						}
						return cx;
					},
					y: function(d) { 
						var ty = y(+d.y);
						if(self.options.fontY) {
							ty = Number(ty) + Number(self.options.fontY);
						}
						return ty;
					},
					"font-size": function(d) {
						var size = Number(d.r);
						if(self.options.fontRange) {
							size = size + Number(s(size));
						}
						return size; 
					},
					id: function(d) { return d.name; },
					
				})
				.style("font-family", self.options.font)
				.style("text-anchor", "middle")
				.style("stroke", function(d) {
					var fill;
					if(self.options.nodeColor) {
						fill = self.options.nodeColor;
					} else {
						fill = color(d.category);
						if(d.option && self.options.option && self.options.option[d.option] && self.options.option[d.option].color) {
							fill = self.options.option[d.option].color;
						} else if(d.color) {
							fill = d.color;
			        	} 
						d.color = fill;
					}
					return fill; 
				})
				.style("fill", function(d) {
					return d.color;
				})
				.style("stroke-width", function(d) {
					var borderWidth;
					if(d.option && self.options.option && self.options.option[d.option] && self.options.option[d.option].labels && self.options.option[d.option].labels.borderWidth) {
						borderWidth = self.options.option[d.option].labels.borderWidth;
					} else if(!self.options.labels.borderWidth) {
						borderWidth = 1.5;
		        	} else {
		        		borderWidth = self.options.labels.borderWidth;
		        	}
					return borderWidth;
				})
				.style("opacity", self.options.nodeOpacity)
				.style("cursor", function(d) {
					if(self.options.click) {
						return "pointer";
					}
					return "default";
				})
				.on("click", function(d) {
					if(self.options.click) {
						self.click(d);
					}
				})
				.text(function(d) {
					if(self.options.labels && self.options.labels.length && self.options.labels.length < d.name.length) {
						return (d.name).substr(0, self.options.labels.length) + self.options.labels.suffix;
					}
					return d.name;
				})
				;
				labels.append("title").text(function(d) {
					if(d.tooltip) {
						return d.tooltip;
					} else if(self.options.tooltip.textFunc) {
						return self.options.tooltip.textFunc(d);
					}
					return d.name; 
				})
				
				if(this.options.labels.enabled) {
					labels.attr("x", function() {
						return Number(d3.select(this).attr("x")) + d3.select(this).node().getComputedTextLength();
					});
				}
				if(this.options.node.over) {
					labels.on("mouseover", mouseover);
					labels.on("mouseout", mouseout);
				}
				
			}
			
			svg.selectAll(".axis").select("path")
	        .style("fill", "none")
			.style("shape-rendering", "crispedges")
			.style("stroke", "#adacac")
			;
			svg.selectAll(".axis").selectAll("text")
			.style("color" , self.options.fontColor)
			.style("font-size", self.options.fontSize+"px")
			.style("font-family", self.options.font)
			;

		    svg.selectAll(".x").select("path")
	    	.attr('d', "M0,1V0H"+(width - margin.left - margin.right)+"V1")
	    	.style("fill", "#A6A6A6")
	    	;
	        svg.selectAll(".y").select("path")
	    	.attr('d', "M0,0H0V"+(height - (margin.top * 2) - margin.bottom)+"H1")
	    	.style("fill", "#A6A6A6")
	    	;
	        
			if(this.options.gridUse) {
		        svg.selectAll(".y").selectAll("line")
		    	.attr("x1", 0)
		        .attr("x2", width - margin.left - margin.right)
		        .attr("y1", 0)
		        .attr("y2", 0)
		    	.style("opacity", 0.7)
		    	.style("stroke", "#c4c4c4")
		    	.style("stroke-width", "1px")
		    	.style("stroke-dasharray", "2,2")
		    	;
		        svg.selectAll(".x").selectAll("line")
		    	.attr("x1", 0)
		        .attr("x2", 0)
		        .attr("y1", 0)
		        .attr("y2", -height + (margin.top * 2) + margin.bottom)
		    	.style("opacity", 0.7)
		    	.style("stroke", "#c4c4c4")
		    	.style("stroke-width", "1px")
		    	.style("stroke-dasharray", "2,2")
		    	;
	        }
		};
		
	};
	
	var BoxPlot = function() {
		var self = this;
		this.type = "boxplot";
		this.parseRand = function() {
			var csv = this.options.dataRand;
			var row = csv.split("\n"); 
			var json = [];
			for (var i = 0; i < row.length; i++) {
				if(row[i] == '') {
					continue;
				}
 				var fields = row[i].split(",");
 				var values = {};
 				for ( var j in fields) {
 					values[(Number(j)+1)] = fields[j];
				}
 				json.push(values);
			}
			this.options.data = json;
		};
		
		this.draw = function() {

			if(this.options.dataCsv) {
				this.parseCsv();
			} else if(this.options.dataRand) {
				this.parseRand();
			}
			var boxData = this.options.data;
			
			var labels = true; // show the text labels beside individual boxplots?
			var margin = this.options.margin;
			var width = this.options.width - margin.left - margin.right;
			var height = this.options.height - margin.top - margin.bottom;
				
			var min = Infinity,
			    max = -Infinity;
				
			var index = 0;
			var data = [];
			for ( var name in boxData[0]) {
				data[index] = [];
				data[index].push(name);
				data[index++].push([]);
			}
			for ( var i in boxData) {
				var index = 0;
				var box = boxData[i];
				var values = [];
				for(key in box) {
					values.push(Number(box[key]));
					data[index++][1].push(Number(box[key]));
				}
				var rowMax = d3.max(values);
				var rowMin = d3.min(values);
				if (rowMax > max) max = rowMax;
				if (rowMin < min) min = rowMin;
			}
			
			min = min - (min / 10);  
			
			var chart = d3.box()
			    .whiskers(iqr(1.5))
			    .height(height)
			    .domain([min, max])
			    .showLabels(labels);

			var svg = this.svg.attr("transform", "translate(" + margin.left + "," + margin.top + ")");
			
			var x = d3.scale.ordinal()
			    .domain(data.map(function(d) {
			        return d[0];
			    }))
			    .rangeRoundBands([0, width], 0.7, 0.3);
			
			var xAxis = d3.svg.axis()
			    .scale(x)
			    .orient("bottom");

			var y = d3.scale.linear()
			    .domain([min, max])
			    .range([height, 0]);

			var yAxis = d3.svg.axis()
			    .scale(y)
			    .orient("left");

			if(!self.options.boxWidth) {
				self.options.boxWidth = x.rangeBand();
			}
			svg.selectAll(".box")
			    .data(data)
			    .enter().append("g")
			    .attr("transform", function(d) {
			    	var tx = ((x.rangeBand() - self.options.boxWidth) / 2) + x(d[0]);
			        return "translate(" + tx + ", 0)";
			    })
			    .call(chart.width(self.options.boxWidth));
			
			var borderColor = self.options.borderColor ? self.options.borderColor : "#000";
			
			svg.selectAll("line")
			.style("stroke", borderColor)
			.style("stroke-width", self.options.borderWidth + "px")
			;
			svg.selectAll("rect")
			.style("fill", self.options.boxColor)
			.style("stroke", borderColor)
			.style("stroke-width", self.options.borderWidth + "px")
			;
			svg.selectAll(".outlier")
			.style("fill", self.options.pointColor)
			.style("stroke", borderColor)
			.style("stroke-width", self.options.borderWidth + "px")
			;
			
			svg.selectAll(".center")
			.style("stroke-dasharray", self.options.whiskerDash);
			
			// draw box text
			svg.selectAll("text")
			.style("color" , self.options.fontColor)
			.style("font-size", self.options.fontSize+"px")
			.style("font-family", self.options.font);
			svg.selectAll(".box")
			.style("color" , self.options.fontColor)
			.style("font-size", (self.options.fontSize-1)+"px")
			.style("font-family", self.options.font);
			
			// draw y axis
			svg.append("g")
			    .attr("class", "y axis")
			    .call(yAxis);

			// draw x axis	
			svg.append("g")
			    .attr("class", "x axis")
			    .attr("transform", "translate(0," + (height) + ")")
			    .call(xAxis);
			
			svg.selectAll(".axis").select("path")
	        .style("fill", "none")
			.style("shape-rendering", "crispedges")
			.style("stroke", "#adacac")
			;
			svg.selectAll(".axis").selectAll("text")
			.style("color" , self.options.fontColor)
			.style("font-size", self.options.fontSize+"px")
			.style("font-family", self.options.font)
			;

		    svg.selectAll(".x").select("path")
	    	.attr('d', "M0,1V0H"+(width)+"V1")
	    	.style("fill", "#A6A6A6")
	    	;
	        svg.selectAll(".y").select("path")
	    	.attr('d', "M0,0H0V"+(height)+"H0")
	    	.style("fill", "#A6A6A6")
	    	;
	        
	        svg.selectAll(".tick").selectAll("line")
	        .style("fill", "none")
	        .style("stroke-width", 0)
	        ;

			function iqr(k) {
			    return function(d, i) {
			        var q1 = d.quartiles[0],
			            q3 = d.quartiles[2],
			            iqr = (q3 - q1) * k,
			            i = -1,
			            j = d.length;
			        while (d[++i] < q1 - iqr);
			        while (d[--j] > q3 + iqr);
			        return [i, j];
			    };
			}
		};
	};
	
	var NetworkMap = function() {
		var self = this;
		this.parseRand = function() {
			var step = 999;
			var csv = this.options.dataRand;
			var row = csv.split("\n"); 
			var json = [];
			var first = row[0].split(",");
			for (var i = 0; i < first.length; i++) {
				for (var j = 0; j < row.length; j++) {
					if(row[j] == '') {
						continue;
					}
	 				var values = row[j].split(",");
 					var value = Number(values[i]);
 					if(!isNaN(value) && typeof value == "number") {
 						step = i;
 						break;
					}
				}
				if(step != 999) {
					break;
				}
			}
			for (var i = 0; i < row.length; i++) {
				if(row[i] == '') {
					continue;
				}
				var data = {};
				var values = row[i].split(",");
				for ( var j in values) {
					var value = $.trim(values[j]);
					if(step == 999) {
						data.value = 0;
						if(data.source) {
							data.target = value;
						} else {
							data.source = value;
						}
					} else {
						if(j == step) {
							data.value = Number(value);
						} else {
							if(data.source) {
								data.target = value;
							} else {
								data.source = value;
							}
						}
					}
				}
				json.push(data);
			}
			
			this.options.data = json;
		};
		
		this.draw = function() {
			this.type = this.options.type;
			if(this.options.dataRand) {
				this.parseRand();
			}
			var links = this.options.data;

			var nodes = {};
			var total = 0;
			var keys = {};
			var key_i = 0;
			var id = 0;
			links.forEach(function(link, i) {
				link.source = nodes[link.source] || (nodes[link.source] = {name: link.source});
				link.target = nodes[link.target] || (nodes[link.target] = {name: link.target});
				total += link.value;
				
				if(nodes[link.target.name].value) {
					nodes[link.target.name].value = nodes[link.target.name].value + link.value;
				} else {
					nodes[link.target.name].value = link.value;
				}
				if(nodes[link.source.name].value) {
					nodes[link.source.name].value = nodes[link.source.name].value + link.value;
				} else {
					nodes[link.source.name].value = link.value;
				}
				if(link.scolor) {
					nodes[link.source.name].color = link.scolor;
				}
				if(link.tcolor) {
					//target에는 속성 값이 없음 link에서 컬러값 설정
					nodes[link.target.name].color = link.tcolor; 
				}
				
				for ( var key in link) {
					if(keys[key]) {
						continue;
					}
					keys[key] = key_i++; 
				}
				
				for ( var key in keys) {
					if(key == "source" ||
					key == "target" ||
					key == "value") {
						continue;
					}
					if(link[key]) {
						link.source[key] = link[key];
					}
				}
			});
			var sorted = [];
			for ( var name in nodes) {
				sorted.push(nodes[name]);
			}

			sorted.sort(function(a, b) {
				return (a.value > b.value) ? -1 : a.value < b.value ? 1 : 0;
			});
			var max = sorted[0].value;
			var min = sorted[sorted.length-1].value;
			var range;
			if(this.type == "networkmap") {
				if(!self.options.nodeRange) {
					self.options.nodeRange = [30, 5];
				} else {
					if(self.options.nodeRange.length == 1) {
						self.options.nodeRange = [self.options.nodeRange[0], self.options.nodeRange[0]];
					}
				}
				if(max == 0 && min == 0) {
					if(self.options.nodeRange) {
						self.options.nodeRange = [self.options.nodeRange[0], self.options.nodeRange[0]];
					} else {
						self.options.nodeRange = [10, 10];
					}
				}
				range = d3.scale.linear().domain([max, min]).range(self.options.nodeRange);
			} else {
				if(!self.options.nodeRange) {
					self.options.nodeRange = [30, 26.4, 22.8, 19.2, 15.6, 12, 8.5, 4];
				}
				var nodeLen = self.options.nodeRange.length;
				var nodeDomain = [max];
				for(var i in self.options.nodeRange) {
					var nodeValue = (max - (Math.round(max / nodeLen) * (parseInt(i) + 1)));
					nodeDomain.push(nodeValue);
				}
				var nodeRange = self.options.nodeRange;
			}
			for ( var i in sorted) {
				var sort = sorted[i];
				var node = nodes[sort.name];
				if(!node) continue;
				var value = node.value;
				if(this.type == "networkmap") {
					node.r = range(value);
				} else {
					for(var i in nodeDomain) {
						if(i == 0 && value >= nodeDomain[i]) {
							per = nodeRange[0];
						} else if(value < nodeDomain[i] && value >= nodeDomain[parseInt(i)+1]) {
							per = nodeRange[i];
						}
					}
					node.r = per;
				}
			}
			
			
			var lv_max = d3.max(links, function(link) {
				return link.value;
			});
			if(!self.options.linkWidth) {
				self.options.linkWidth = [12, 10.5, 9, 7.5, 5.5, 3.5, 2, 1];
			} 
			var linkWidth = self.options.linkWidth;
			var linkLen = linkWidth.length;
			var linkDomain = [lv_max];
			for(var i in linkWidth) {
				linkWidth[i] = Number(linkWidth[i]);
				var linkValue = (lv_max - ((lv_max / linkLen) * (parseInt(i) + 1)));
				linkDomain.push(linkValue);
			}
			links.forEach(function(link) {
				var value = link.value;
				var path = 0;
				for(var i in linkDomain) {
					if(i == 0 && value >= linkDomain[i]) {
						path = linkWidth[0];
					} else if(value < linkDomain[i] && value >= linkDomain[parseInt(i)+1]) {
						path = linkWidth[i];
					}
				}
				link.path = path;
			});
			
			var width = this.options.width,
			height = this.options.height;
			
			var k = Math.sqrt(links.length / (width * height));

			var force = d3.layout.force()
			.nodes(d3.values(nodes))
			.links(links)
			.size([width, height])
			.linkDistance(this.options.linkDistance * 10)
			.charge(this.options.linkCharge)
			.on("tick", tick)
			.start();

			var svg = this.svg;
			var svg_path = self.element.selector + "_path_";
			var path = svg.append("g").selectAll("path")
			.data(force.links())
			.enter().append("path")
			.attr("id", function(d, i) {
				var id = svg_path + i;
				d.target.id = id;
				return id;
			})
			.attr("class", self.options.linkClass)
			.style('fill', "none")
			.style("stroke", this.options.linkColor)
			.style("stroke-width", function(d) {
				if(d.path) {
					return d.path;
				}
				return self.options.linkWidth;
			})
			;

			var circle = svg.append("g").selectAll("circle")
			.data(force.nodes())
			.enter().append("circle")
			.attr("class", this.options.nodeClass)
			.attr("r", function(d) {
				return d.r;
			})
			.style('fill', function(d) {
				if(d.option && self.options.option && self.options.option[d.option] && self.options.option[d.option].color) {
					d.color = self.options.option[d.option].color;
				} else if(d.color) {
					d.color = d.color;
	        	} else {
	        		d.color = self.options.color(d[self.options.colorKey]);
	        	}
				return d.color;
	        })
	        .style("stroke", this.options.nodeBorderColor)
	        .style("stroke-width", this.options.nodeBorderWidth)
			.style("stroke-opacity", 0.5)
			.style("cursor", "pointer")
			.on("mouseover", function(d) {
				if(self.options.linkIsLabel || self.options.linkIsLabel == null) {
				var paties = [];
				path.style('stroke-width', function(p, i) {
					if(p.source.name == d.name) { 
						paties.push(i);
						return p.path;
					} else if(p.target.name == d.name) { 
						paties.push(i);
						return p.path;
					} else {
						return 0;
					}
				})
				;
				}
				var texts = {};
				text.data().forEach(function(t, i) {
					for (var j = 0; j < links.length; j++) {
						var link = links[j];
						if(link.target.name == d.name) {
							//texts.push(link.source);
							texts[link.source.name] = link.source;
						}
						if(link.source.name == d.name) {
							//texts.push(link.target);
							texts[link.target.name] = link.target;
						}
					};
				});
				text.style("font-size" , function(t, i) {
					var font = "0px";
					for ( var name in texts) {
						if(t.name == name) {
							font = t.fontSize;
						}
					}
					if(t.name == d.name) {
						font = t.fontSize;
					}						
					return font;
				});
				textPath.style("font-size" , function(t, i) {
					var font = "0px";
					for ( var j in paties) {
						var path = paties[j];
						if(svg_path+i == svg_path+path) {
							font = t.target.fontSize;
							break;
						}
					}
					return font;
				});
				
			})
			.on("mouseout", function(d) {
				path.style('stroke-width', function(d) {
					return d.path;
				})
				.style("stroke", self.options.linkColor)
				;
				
				text.style("font-size" , function(t, i) {
					return t.fontSize;
				});
				svg.selectAll(".linklabel").selectAll("text").style("font-size" , function(t, i) {
					return t.target.fontSize;
				});
			})
			.on("click", function (d) {
				self.click(d);
			})
			.call(force.drag)
			;

			this.options.fontX = this.options.fontX ? this.options.fontX : 8;
			this.options.fontY = this.options.fontY ? this.options.fontY : 5;
			
			var text = svg.append("g").selectAll("text")
			.data(force.nodes())
			.enter().append("text")
			.attr("x", function(d) {
				if(d.option && self.options[d.option] && self.options[d.option].fontX) {
					d.fontX = self.options[d.option].fontX;
				} else if(d.fontX) {
					d.fontX = d.fontX; 
				} else {
					d.fontX = self.options.fontX;
				}
				return d.fontX;
			})
			.attr("y", function(d) {
				if(d.option && self.options[d.option] && self.options[d.option].fontY) {
					d.fontY = self.options[d.option].fontY;
				} else if(d.fontY) {
					d.fontY = d.fontY; 
				} else {
					d.fontY = self.options.fontY;
				}
				return d.fontY;
			})
			.text(function(d) { 
				if(d.value == 0) {
					return d.name;
				}
				var text = d.name;
				if(self.options.nodeIsLabel || self.options.nodeIsLabel == null) {
					text += "(" + d.value + ")"
				}
				return text;
			})
			.style("fill" , function(d) {
				if(d.option && self.options.option && self.options.option[d.option] && self.options.option[d.option].fontColor) {
					d.fontColor = self.options.option[d.option].fontColor;
				} else if(d.fontColor) {
					d.fontColor = d.fontColor; 
				} else {
					d.fontColor = self.options.fontColor; 
				}
				return d.fontColor;
			})
			.style("font-size", function(d) {
				if(d.option && self.options[d.option] && self.options[d.option].fontSize) {
					d.fontSize = self.options[d.option].fontSize;
				} else if(d.fontSize) {
					d.fontSize = d.fontSize; 
				} else {
					d.fontSize = self.options.fontSize+"px";
				}
				return d.fontSize;
			})
			.style("font-family", function(d) {
				if(d.option && self.options[d.option] && self.options[d.option].font) {
					d.font = self.options[d.option].font;
				} else if(d.font) {
					d.font = d.font; 
				} else {
					d.font = self.options.font;
				}
				return d.font;
			})
			.style("cursor", function() {
				if(self.options.click) {
					return "pointer";
				}
				return "default";
			})
			.on("click", function (d) {
				if(self.options.click) {
					self.click(d);
				}
			})
			;
			
			function tick() {
				path.attr("d", linkArc);
				circle.attr("transform", transform);
				text.attr("transform", transform);
			}

           function linkArc(d) {
             var dx = d.target.x - d.source.x,
                 dy = d.target.y - d.source.y,
                 dr = Math.sqrt(dx * dx + dy * dy);
             return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
           }

           function transform(d) {
             return "translate(" + d.x + "," + d.y + ")";
           }

           if(self.options.linkIsLabel || self.options.linkIsLabel == null) {
        	   var textPath = svg.append("g").attr("class", "linklabel").selectAll("text").data(force.links());
        	   textPath
        	   .enter()
        	   .append("text")
        	   .style("font-size", function(d) {
        		   return d.target.fontSize;
        	   })
        	   .append("textPath")
        	   .attr("xlink:href", function(d, i) {
        		   return "#"+svg_path+i;
        	   })
        	   .attr("startOffset", "45%")
        	   .text(function(d) {
        		   if(d.value == 0) {
        			   return '';
        		   }
        		   return d.value;
        	   })
        	   ;
           }
		}
	}
	

	var Cloud = function() {
		var self = this;
		this.type = "cloud";
		
		this.parseRand = function() {
			var lists = [];
			var sizeList = [];
			
			var csv = this.options.dataRand;
			var row = csv.split("\n"); 
			
			var step = 99;
			var index = 0;
			var first = row[0].split(",");
			for (var i = 0; i < first.length; i++) {
				for (var j = 0; j < row.length; j++) {
					if(row[j] == '') {
						continue;
					}
					var fields = row[j].split(",");
					var value = Number(fields[i]);
					if(isNaN(value) || typeof value != "number") {
						step = i;
						break;
					}
				}
				if(step != 99) {
					break;
				}
			}

			for (var i = 0; i < row.length; i++) {
				if(row[i] == '') {
					continue;
				}
				var list = [];
 				var fields = row[i].split(",");
 				var max = fields.length >= 2 ? 2 : 1;
 				for (var j = 0; j < max; j++) {
	 				if(step == j) {
	 					list[0] = fields[j];
					} else {
						list[1] = Number(fields[j]);
					}
 				}
 				if(!list[1]) {
 					list[1] = 1;
 				}
 				lists.push(list);
 				sizeList.push(list[1]);
			}
			this.keys = {name : 0, value : 1};
			
			this.datalist = lists;
			this.maxCount = d3.max(sizeList);
			this.minCount = d3.min(sizeList);
		};
		
		this.parseJson = function() {
			var datalist = this.options.data;
			var idlist = [];
			var textlist = [];
			var sizelist = [];
			var categorylist = [];
			var colorlist = [];

			this.keys = {};
			for (var i = 0; i < datalist.length; i++) {
				var data = datalist[i];
				var index = 0;
				for ( var key in data) {
					this.keys[key] = index++;
				}
			}

			var lists = [];
			var sizeList = [];
			for (var i = 0; i < datalist.length; i++) {
				var data = datalist[i];
				if(!data.text && !data.name) {
					continue;
				}
				if(!data.value && !data.size) {
					continue;
				}
				var list = [];
				var value = 0;
				for ( var key in this.keys) {
					if(key == "size" || key == "value") {
						value = Number(data[key]);
						data[key] = value;
					}
					list.push(data[key]);
				}	
				lists.push(list);
				sizeList.push(value);
			}
			this.datalist = lists;
			this.maxCount = d3.max(sizeList);
			this.minCount = d3.min(sizeList);
		};
		this.draw = function() {
			//json 안읽힘, text,size name,value로 변경하기
			if(this.options.data) {
				this.parseJson();
			} else if(this.options.dataRand){
				this.parseRand();
			} 

			if(!this.options.opacityDomain) {
				this.options.opacityDomain = [0.6, 0.65, 0.75, 0.85, 0.95, 1];
			}
			
			if(this.options.opacityDomain.length < 2) {
				
			}
			var opacity = []; 
			for ( var i in this.options.opacityDomain) {
				var op = Number(this.options.opacityDomain[i]);
				if(i == 0) {
					opacity.push(this.minCount);
					continue;
				}
				if(i == this.options.opacityDomain.length-1) {
					opacity.push(this.maxCount);
					continue;
				} 
				opacity.push(this.maxCount * op);
			}

			var s = d3.scale.linear().domain([this.minCount,this.maxCount]).range(this.options.fontRange);
			var o = d3.scale.linear().domain(opacity).range(this.options.opacityDomain);
			var width = this.options.width;
			var height = this.options.height;
			this.words = (this.datalist).map(function(d, i) {
				var word = {};
				for ( var key in self.keys) {
					word[key] = d[self.keys[key]];
				}
				if(!word.name) {
					word.name = word.text;
				}
				if(!word.text) {
					word.text = word.name;
				}
				word.opacity = o(word.value ? word.value : word.size);
				word.value = word.value ? word.value : word.size;
				word.size = s(word.value ? word.value : word.size);
				return word;
			});
			
			var textPadding = this.options.textPadding ? this.options.textPadding : 2;
			var cloud = d3.layout.cloud().size([width, height])
			.words(this.words)
			.padding(textPadding)
			.rotate(function(d) {
				return ~~(Math.random() * 2) * self.options.rotate; 
			})
			.fontSize(function(d) { return d.size; });
			
			if(!self.options.randomUse) {
				cloud.random(function() {
					return 0.5;
				});
			}
			
			cloud.on("end", this.layout)
			.start();
			
		};
		this.layout = function() {
			var width = self.options.width,
			height = self.options.height,
			words = self.words;

			var x = (width/2) + self.options.x,
			y = (height/2) + self.options.y;
			
			self.svg
			.attr("transform", function(d) {
				return "translate(" + x + "," + y + ")";
			})
			.selectAll("text")
			.data(words)
			.enter()
			.append("text")
			.style("font-size", function(d) {
				return d.size + "px"; 
			})
			.style("font-family", self.options.font)
			.style("font-weight", 600)
			.style("fill", function(d) {
				if(d.option && self.options[d.option] && self.options[d.option].color) {
					d.color = self.options[d.option].color;
				} else if(d.color) {
					d.color = d.color; 
				} else if(d.category && self.options.color) {
					d.color = self.options.color(d.category);
				} else if(self.options.fontColor) {
					d.color = self.options.fontColor;
				} else {
					d.color = self.options.color(d[self.options.colorKey]);
				}
				return d.color;
			})
			.style("fill-opacity", function(d) { return d.opacity; })
			.style("cursor", "pointer")
			.attr("id", function(d) {
				return d.id;
			})
			.attr("text-anchor", "middle")
			.attr("transform", function(d) {
				return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
			})
			.text(function(d, i) { return d.name; })
			.on("click", function(d) {
				var params = {};
				params.category = d.category; 
				params.color = d.color; 
				params.id = d.id; 
				params.opacity = d.opacity; 
				params.rotate = d.rotate; 
				params.value = d.size; 
				params.name = d.name; 
				params.x = d.x; 
				params.y = d.y; 
				self.click(params);
			})
			;
		}
	}
	

	var Explorer = function() {
		var self = this;
		this.type = "explorer";
		
		this.parseRand = function() {
			
			var json = {};
			var keys = {};
			
			var csv = this.options.dataRand;
			var row = csv.split("\n"); 
			var range = [];
			var index = 0;
			for (var i = 0; i < row.length; i++) {
				if(row[i] == '') {
					continue;
				}
				var fields = row[i].split(",");
				var obj = {};
				if(index == 0) {
					obj.name = fields[0];
					obj.value = 0;
					obj.id = self.element[0].id+"_"+index;
					obj.children = [];
					json = obj;
				} else {
					obj.name = fields[0];
					if(fields[1]) {
						range.push(Number(fields[1]));
						obj.value = fields[1];
					}
					obj.id = self.element[0].id+"_"+index;
					obj.parent = 0;
					obj.children = [];
					json.children.push(obj);
				}
				index++;
			}
			this.options.max = d3.max(range);
			this.options.min = d3.min(range);
			this.options.data = json;
			
		};
		
		this.parseJson = function() {
			var json = this.options.data;
			var map = d3.map();
			var result = json[0];
			result.children = [];
			var range = [];
			for(var i in json) {
				var d = json[i];
				if(d.value) { 
					range.push(Number(d.value));
				}
				if(d.size) {
					range.push(Number(d.size));
				}
				
				if(result.id == d.parent) {
					result.children.push(d)
				} else {
					addChildren(d, result.children);
				}
			}
			function addChildren(d, children) {
				for(var i in children) {
					var c = children[i];
					if(c.id == d.parent) {
						if(!c.children) {
							c.children = [d];
						} else {
							c.children.push(d);
						}
					} else {
						addChildren(d, c.children);
					}
				}
			}
			this.options.dataCsv = null;
			this.options.data = result;
			this.options.max = d3.max(range);
			this.options.min = d3.min(range);
		};
		
		this.draw = function() {
			
			var options = this.options;
			
			if(options.dataRand) {
				this.parseRand();
			} else {
				this.parseJson();
			}
			
			this.explorerClickId = ''; /** click node **/
			this.explorerDClickId = ''; /** unclicked node **/
			this.explorerClickArrId = []; /** click open list **/

			if(options.zoomUse) {
				if(!options.zoomRange) {
					options.zoomRange = [0.5, 5];
				}
				var zoom = d3.behavior.zoom().scaleExtent(options.zoomRange).on("zoom", zoomed);
				this.svg.call(zoom);
			}
			
			var rect = this.svg.append("rect")
            .attr("width", options.width)
            .attr("height", options.height)
            .style("fill", "none")
            .style("pointer-events", "all");
			
			var g = this.svg.append("g");
			
			function zoomed() {
				g.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
		    }

			options.linkClass = options.linkClass == '' ? 'explorer_link' : options.linkClass; 
			options.nodeClass = options.nodeClass == '' ? 'explorer_node' : options.nodeClass; 
			
			this.link = g.selectAll("."+options.linkClass),
			this.node = g.selectAll("."+options.nodeClass);
			
			this.force = d3.layout.force()
				.size([options.width, options.height])
				.on("tick", this.tick);
			this.root = options.data;
			this.update();
		},
		
		this.tick = function() {
			self.link.attr("x1", function (d) {
				return d.source.x;
			})
			.attr("y1", function (d) {
				return d.source.y;
			})
			.attr("x2", function (d) {
				return d.target.x;
			})
			.attr("y2", function (d) {
				return d.target.y;
			});
			
			self.node.attr("transform", function (d) {
				return 'translate(' + [d.x, d.y] + ')';
			});
		},
		this.flatten = function(root) {
	    	var nodes = [];
	    	function recurse(node, depth) {
	    		if (node.children) {
	    			node.children.forEach(function (child) {
	    				child.parent = node;
	    				child.depth = depth;
	    				recurse(child, depth + 1);
	    			});
	    		}
	    		nodes.push(node);
	    	}
	    	root.depth = 0;
	    	recurse(root, 1);
	    	return nodes;
	    },
	    this.uniqueId = function() {
			var date = new Date();
			var components = [
			    date.getYear(),
			    date.getMonth(),
			    date.getDate(),
			    date.getHours(),
			    date.getMinutes(),
			    date.getSeconds(),
			    date.getMilliseconds()
			];
			var id = components.join("");
			return id;
		},
	    this.collapse = function(d) {
	    	self.d = d;
	    	if(!d.parent) {
	    		return;
	    	}
	    	var id = d.id;
	    	if (!d3.event.defaultPrevented) {
	    		var isclick = false;
	    		for (var i in self.explorerClickArrId) {
	    			if (id == self.explorerClickArrId[i]) {
	    				isclick = true;
	    			}
	    		}
	    		
	    		if (!isclick) {
	    			self.explorerClickId = id;
	    			self.explorerDClickId = '';
	    			self.explorerClickArrId.push(self.explorerClickId);

	    			if (d._children != null) {
	    				d.children = d._children;
	    				d._children = null;
	    				self.update();
	    				return;
	    			}
	    			
	    			if(self.options.collapse.data) {
	    				
	    				d.children = [];
	    				for(var i in self.options.collapse.data) {
	    					var cd = self.options.collapse.data[i];
	    					var child = d.children[i] = {};
	    					for(var key in cd) {
	    						child[key] = cd[key];
	    					}
	    					var timestamp = self.uniqueId()+i;
	    					child.id = self.element[0].id+"_"+ timestamp;
	    				}
	    				d._children = null;
	    				self.update();
	    			} else {
	    				if(typeof self.options.collapse.dataParams == "function") {
	    					self.dataParams = self.options.collapse.dataParams(d);
						} else {
							self.dataParams = self.options.collapse.dataParams;
						}
	    				self.ajax(self.options.collapse.dataUrl, self.dataParams, self.addChild, self.options.collapse.fail, d, self.options.collapse.httpType);
	    			}
	    			
	    		} else {
	    			self.explorerClickId = '';
	    			self.explorerDClickId = id;
	    			self.explorerClickArrId.splice($.inArray(self.explorerDClickId, self.explorerClickArrId), 1);
	    			d._children = d.children;
	    			d.children = null;
	    			self.update();
	    			return;
	    		}
	    	}
	    },
	    
	    this.addChild = function(data, d) {
	    	data = self.options.collapse.parser(data);
	    	var children = [];
			for(var i in data) {
				children[i] = {};
				for(var key in data[i]) {
					children[i][key] = data[i][key]; 
				}
				var timestamp = self.uniqueId()+i;
				children[i].id = self.element[0].id+"_"+ timestamp;
			}
	    	self.d.children = children;
	    	self.d._children = null;
	    	self.update();
	    	if(self.options.click) {
				self.click(d);
			}
	    },
	    
		this.update = function() {
			var nodes = this.flatten(this.root),
			links = d3.layout.tree().links(nodes),
			force = this.force,
			options = this.options,
			explorer_color = this.options.color;

			var explorerClickId = this.explorerClickId ;
			var explorerDClickId = this.explorerDClickId;
			var explorerClickArrId = this.explorerClickArrId;

			// Restart the force layout.d
			force
			.nodes(nodes)
			.links(links)
			.gravity(.1)
			.charge(-1000)
			.linkDistance(options.linkDistance * 10)
			.start();

			self.link = self.link.data(links, function(d) {
				return d.target.id;
			});

			if(!options.linkWidth) {
				options.linkWidth = 0.25;
			} else {		
				var lw = d3.scale.linear().domain([options.min, options.max]).range(options.linkWidth);
			}
			self.link.exit().remove();
			self.link.enter().insert("line", "."+options.nodeClass)
			.attr("class", options.linkClass)
			.style("stroke", options.linkColor)
			.style("stroke-width", function(d) {
				//return options.linkWidth;
				d.target.size = d.target.size ? d.target.size : d.target.value;
				if($.isArray(options.linkWidth)) {
					return lw(Number(d.target.size));
				} else {
					return options.linkWidth;
				}
			})
			.attr("x1", function (d) {
				return d.source.x;
			})
			.attr("y1", function (d) {
				return d.source.y;
			})
			.attr("x2", function (d) {
				return d.target.x;
			})
			.attr("y2", function (d) {
				return d.target.y;
			});
			
			// Update the nodes…
			self.node = self.node.data(nodes, function (d) {
				return d.id;
			});
			
			self.node.exit().remove();
			
			var svg = this.svg;
			svg.selectAll("."+options.nodeClass).selectAll("rect").remove();
			svg.selectAll("."+options.nodeClass).selectAll("text").remove();
			svg.selectAll("."+options.nodeClass).selectAll("image").remove();
      
			self.node.enter().append("g")
			.attr("id", function (d) {
				return d.id;
			})
			.attr("class", options.nodeClass)
			.on("mouseover", function (D) {
				if(!D.parent) {
					return;
				}
				self.node.filter(function (d) {
					return D.id != 0 && D.id == d.id;
				}).select("image").style("visibility", "visible");
				self.node.filter(function (d) {
					return D.id == 0 || D.id != d.id;
				}).select("image").style("visibility", "hidden");
				//d3.select(this).moveToFront();
			})
			.on("mouseenter", function (D) {
				if(!D.parent) {
					return;
				}
				self.node.filter(function (d) {
					return D.id != 0 && D.id == d.id;
				}).select("image").style("visibility", "visible");
				self.node.filter(function (d) {
					return D.id == 0 || D.id != d.id;
				}).select("image").style("visibility", "hidden");
				//d3.select(this).moveToFront();
			})
			.on("mouseout", function (D) {
				self.node.filter(function (d) {
					return D.id == d.id;
				}).select("image").style("visibility", "hidden");
			})
			.on("click", function (d) {
				if(d.depth == 0) {
					self.click(d);
				} else {
					if(self.options.collapse.use) {
						self.collapse(d);
					} else {
						self.click(d);
					}
				}
				
			})
			.call(force.drag)
			;
			
		
			
			var size = [30, 30, 53, 68];
			self.node.append("rect")
			.attr("class", "circle_node")
			.attr("width", function (d) {
				//최상위 노드
				if (d.depth == 0) {
					return self.options.fontSize * 8.3;
				}
				var len = (d.name).length;
				var rectW = len < 4 ? size[len] + 8 : 43 + (len * 11);
				//클릭한 노드
				for (var i in explorerClickArrId) {
					var clickid = explorerClickArrId[i];
					if (explorerClickId != d.id && d.id == clickid) {
						rectW = rectW + 26;
						return rectW - (20 -self.options.fontSize);
					}
				}
				if (explorerDClickId == d.id) {
					rectW = rectW + 26;
					return rectW - (20 -self.options.fontSize);
				}
				return rectW - (20 -self.options.fontSize);
			})
			.attr("height", function (d) {
				//최상위 노드
				if (d.depth == 0) {
					return self.options.fontSize * 8.3;
				}
				for (var i in explorerClickArrId) {
					var clickid = explorerClickArrId[i];
					if (explorerClickId != d.id && d.id == clickid) {
						return 48 - (12 -self.options.fontSize);
					}
				}
				if (explorerDClickId == d.id) {
					return 48 - (12 -self.options.fontSize);
				}
				//일반 노드
				return 30 - (12 -self.options.fontSize);
			})
			.attr("x", function (d) {
				//최상위 노드
				if (d.depth == 0) {
					return self.options.fontSize * -4.16;
				}
				var x = 0;
				var len = (d.name).length;
				var rectX = len < 3 ? 0 : 20 - (len * 5);
				for (var i in explorerClickArrId) {
					var clickid = explorerClickArrId[i];
					if (explorerClickId != d.id && d.id == clickid) {
						switch (len) {
						case 1:
							x = -15;
							break;
						case 2:
							x = -35;
							break;
						default:
							x = len * -10 - rectX - 10;
							break;
						}
						return x - (self.options.fontSize / 1.8) + 6;
					}
				}
				if (explorerDClickId == d.id) {
					switch (len) {
					case 1:
						x = -15;
						break;
					case 2:
						x = -35;
						break;
					default:
						x = len * -10 - rectX - 10;
						break;
					}
					return x - (self.options.fontSize / 1.8) + 2;
				}
				switch (len) {
				case 1:
					x = -15;
					break;
				case 2:
					x = -26;
					break;
				default:
					x = ((len * -10) - rectX);
					break;
				}
				return x - (self.options.fontSize / 1.8) + 6;
			})
			.attr("y", function (d) {
				//최상위 노드
				if (d.depth == 0) {
					//return -44;
					return self.options.fontSize * (-3.0 - (self.options.fontSize/20));
				}
				return -9 + (-self.options.fontSize / 1.8);
			})
			.attr("rx", function (d) {
				if (d.depth == 0) {
					return 100;
				}
				for (var i in explorerClickArrId) {
					var clickid = explorerClickArrId[i];
					if (explorerClickId != d.id && d.id == clickid) {
						return 24;
					}
				}
				if (explorerDClickId == d.id) {
					return 24;
				}
				//return 15;
				//return self.options.fontSize * 1.25;
				return 15;
			})
			.attr("ry", function (d) {
				if (d.depth == 0) {
					return 100;
				}
				for (var i in explorerClickArrId) {
					var clickid = explorerClickArrId[i];
					if (explorerClickId != d.id && d.id == clickid) {
						return 24;
					}
				}
				if (explorerDClickId == d.id) {
					return 24;
				}
				return 15;
				//return self.options.fontSize * 1.25;
			})
			.style("stroke", function (d) {
				if (!d.parent) {
					return options.parent.borderColor ? options.parent.borderColor : "#8f8f8f";
				}
				
				for (var i in explorerClickArrId) {
					var clickid = explorerClickArrId[i];
					if (explorerClickId != d.id && d.id == clickid) {
						return "#a1a1a1";
					}
				}
				if (explorerDClickId == d.id) {
					return "#a1a1a1";
				}

				return options.nodeBorderColor;
			})
			.style("stroke-opacity", function (d) {
				for (var i in explorerClickArrId) {
					var clickid = explorerClickArrId[i];
					if (explorerClickId != d.id && d.id == clickid) {
						return 0.5;
					}
				}
				if (explorerDClickId == d.id) {
					return 0.5;
				}
				
				return 1;
			})
			.style("stroke-width", function (d) {
				if (!d.parent) {
					return options.parent.borderWidth ? options.parent.borderWidth : 2;
				}
				
				for (var i in explorerClickArrId) {
					var clickid = explorerClickArrId[i];
					if (explorerClickId != d.id && d.id == clickid) {
						return 5;
					}
				}
				if (explorerDClickId == d.id) {
					return 5;
				}
				return options.nodeBorderWidth;
			})
			.style("fill", function (d) {
				if(d.color) {
					return d.color;
				}
				if (!d.parent) {
					return options.parent.bgColor ? options.parent.bgColor : "#ffffff";
				}
				if(d.category) {
					return explorer_color(d.category);
				} else {
					return explorer_color(d[self.options.colorKey]);
				}
			})
			.style("fill-opacity", function(d, i) {
				if(d.depth != 0) {
					return self.options.nodeOpacity;
				}
			})
			.style("cursor", "pointer")
			;

			self.node.append("text")
			.attr("y", function (d) {
				if (!d.parent) {
					return 10;
				}
				for (var i in explorerClickArrId) {
					var clickid = explorerClickArrId[i];
					if (explorerClickId != d.id && d.id == clickid) {
						return 13;
					}
				}
				if (explorerDClickId == d.id) {
					return 13;
				}
				return 4;
			})
			.style("fill", function(d) {
				if (!d.parent) {
					return options.parent.fontColor;
				}
				return options.fontColor;
			})
			.style("text-anchor", "middle")
			.style("font-family", options.font)
			.style("font-size", function (d) {
				if (d.parent) {
					return options.fontSize+"px";
				} else {
					return Number(options.parent.fontSize)+"px";
				}
			})
			.style("cursor", "pointer")
			.text(function (d) {
				return d.name;
			})
			;

			if(options.removeUse) {
				self.node.append("image")
				.attr("xlink:href", function (d) {
					if (!d.parent) {
						return;
					}
					return options.removeImg;
				})
				.attr("width", 24)
				.attr("height", 22)
				.attr("x", function(d) {
					var w = d3.select("#"+d.id).select("rect").attr("width");
					return -(w/2) - 10;
				})
				.attr("y", -23)
				.style("visibility", "hidden")
				.style("cursor", "pointer")
				.on("click", function (t) {
					for (var i in self.root.children) {
						var root = self.root.children[i];
						if (root.id == t.id) {
							self.root.children.splice(i, 1);
							break;
						}
						for (var j in root.children) {
							var child = root.children[j];
							if (child.id == t.id) {
								root.children.splice(j, 1);
								break;
							}
						}
					}
					self.update();
				})
				.on("mousedown", function (t) {
				  
				    var ua = window.navigator.userAgent;
				    var msie = ua.indexOf('MSIE ');
				    var trident = ua.indexOf('Trident/');
				    var edge = ua.indexOf('Edge/');
				    
				    if(msie > 0 || trident > 0 || edge > 0){
				      for (var i in self.root.children) {
							var root = self.root.children[i];
							if (root.id == t.id) {
								self.root.children.splice(i, 1);
								break;
							}
							for (var j in root.children) {
								var child = root.children[j];
								if (child.id == t.id) {
									root.children.splice(j, 1);
									break;
								}
							}
						}
						self.update();
				    }
				})
				;
			}
			d3.selectAll("."+options.nodeClass).each(function (d, i) {
				if (d == undefined) {
					return true;
				}
				if (!d.parent) {
					return true;
				}
				if (explorerClickId == "" && explorerDClickId == "") {
					return true;
				}
				var width = 0;
				var height = 0;
				var x = 0;
				var rx = 0;
				var ry = 0;
				var stroke = options.nodeBorderColor;
				var stroke_opacity = 1;
				var stroke_width = options.nodeBorderWidth;

				var len = (d.name).length;
				var rectX = len < 3 ? 0 : 20 - (len * 5);
				var rectW = len < 4 ? size[len] + 8 : 43 + (len * 11);
				var clickX = 6;
				if (d.id == explorerClickId) {
					width = rectW + 26;
					height = 48;
					rx = 24;
					ry = 24;
					stroke = "#a1a1a1";
					stroke_opacity = 0.5;
					stroke_width = 5;
					clickX = 2;
					//x값
					switch (len) {
					case 1:
						x = -15;
						break;
					case 2:
						x = -35;
						break;
					default:
						x = len * -10 - rectX - 10;
						break;
					}
				} else if (d.id == explorerDClickId) {
					width = rectW;
					height = 30;
					rx = 15;
					ry = 15;
					switch (len) {
					case 1:
						x = -15;
						break;
					case 2:
						x = -26;
						break;
					default:
						x = len * -10 - rectX;
						break;
					}
				} else {
					return true;
				}

				d3.select(this).select("rect")
				.transition()
				.duration(750)
				.attr("width", width - (20 -self.options.fontSize))
				.attr("height", height - (12 -self.options.fontSize))
				.attr("x", x - (self.options.fontSize / 1.8) + clickX)
				.attr("y", -9 + (-self.options.fontSize / 1.8))
				.attr("rx", rx)
				.attr("ry", ry)
				.style("stroke", stroke)
				.style("stroke-opacity", stroke_opacity)
				.style("stroke-width", stroke_width)
				;
				return true;
			});
			
			d3.selectAll("."+options.nodeClass).each(function (d, i) {
				var y = 0;
				if (!d.parent) {
					y = 10;
				} else if (d.id == explorerClickId) {
					y = 13;
				} else if (d.id == explorerDClickId) {
					y = 4;
				} else {
					return true;

				}
				d3.select(this).select("text")
				.transition()
				.duration(750)
				.attr("y", y)
				;
				return true;
			});
			
			
			//self.node.append("rect").attr("class", "circle_node")
		}
	}
	
	
	
	var Dendrogram = function(){
		var self = this;
		this.type = "dendrogram";
		
		this.parseRand = function() {
			var csv = this.options.dataRand;
			var row = csv.split("\n");
			
			var step = 99;
			var first = row[0].split(",");
			for (var i = 0; i < first.length; i++) {
				for (var j = 0; j < row.length; j++) {
					if(row[j] == '') {
						continue;
					}
					var fields = row[j].split(",");
					var value = Number(fields[i]);
					if(isNaN(value) || typeof value != "number") {
						step = i;
					}
				}
			}
			
			var step2 = step == 0 ? 1 : 0;
			var index = 0;
			var json = {};
			for (var i = 0; i < row.length; i++) {
				if(row[i] == '') {
					continue;
				}
 				var fields = row[i].split(",");
 				var obj = {};
 				if(index == 0) {
 					obj.name = fields[step];
 					if(fields[step2]) {
 						obj.value = Number(fields[step2]);
 					} else { 
 						obj.value = 10;
 					}
 					obj.id = self.element[0].id+"_"+index;
					obj.children = [];
 					json = obj;
 				} else {
					obj.name = fields[step];
					if(fields[step2]) {
						obj.value = Number(fields[step2]);
					} else {
						obj.value = 1;
					}
					obj.id = self.element[0].id+"_"+index;
					obj.parent = 0;
					obj.children = [];
 					json.children.push(obj);
 				}
 				index++;
			}
			this.options.data = json;
		};
		
		this.parseJson = function() {
			var json = this.options.data;

			var map = d3.map();
			var result = json[0];
			result.children = [];
			for(var i in json) {
				var d = json[i];
				if(result.id == d.parent) {
					result.children.push(d)
				} else {
					addChildren(d, result.children);
				}
			}
			function addChildren(d, children) {
				for(var i in children) {
					var c = children[i];
					if(c.id == d.parent) {
						if(!c.children) {
							c.children = [d];
						} else {
							c.children.push(d);
						}
					} else {
						addChildren(d, c.children);
					}
				}
			}
			
			this.options.dataCsv = null;
			this.options.data = result;
		};
		
		this.draw = function(){

			if(this.options.dataRand) {
				this.parseRand();
			} else {
				this.parseJson();
			}
			
			var width = this.options.width - this.options.margin.left - this.options.margin.right;
			var height = this.options.height - this.options.margin.bottom - this.options.margin.top;
	
			this.options.data.x0 = (height) / 2;
			this.options.data.y0 = 0;
	
			this.options.nodeClass = this.options.nodeClass == '' ? 'dendrogram_node' : this.options.nodeClass;
			this.options.linkClass = this.options.linkClass == '' ? 'dendrogram_link' : this.options.linkClass;
			this.options.textLength = this.options.textLength ? this.options.textLength : 15; 
			
			this.node = this.svg.selectAll("."+this.options.nodeClass);
			this.link = this.svg.selectAll("."+this.options.linkClass),
			
			this.tree = d3.layout.tree().size([height, width]);
			
			this.diagonal = d3.svg.diagonal().projection(function (d) {
				return [d.y, d.x];
			});
			this.svg.attr("transform", "translate(" + (this.options.margin.left + 70)+ "," + this.options.margin.top + ")");
			this.update(this.options.data);
		},
		this.uniqueId = function() {
			var date = new Date();
			var components = [
			    date.getYear(),
			    date.getMonth(),
			    date.getDate(),
			    date.getHours(),
			    date.getMinutes(),
			    date.getSeconds(),
			    date.getMilliseconds()
			];
			var id = components.join("");
			return id;
		},
		this.collapse = function(d) {
	    	self.d = d;
	    	var id = Number(d.id);
	    	if (!d3.event.defaultPrevented) {
	    		if(d.depth == 0) {
	    			self.click(d);
	    			return ;
	    		}
	    		if (d._children != undefined) {
	    			d.children = d._children;
	    			d._children = null;
	    		} else if (d.children == undefined || d.children.length < 1) {
	    			if(d.depth == 1) {
	    				return;
	    			}
	    			if(self.options.collapse.data) {
	    				d.children = [];
	    				for(var i in self.options.collapse.data) {
	    					var cd = self.options.collapse.data[i];
	    					var child = d.children[i] = {};
	    					for(var key in cd) {
	    						child[key] = cd[key];
	    					}
	    					var timestamp = self.uniqueId()+i;
	    					child.id = self.element[0].id+"_" + timestamp;
	    				}
	    				d._children = null;
	    				self.update(d);
	    			} else {
	    				if(typeof self.options.collapse.dataParams == "function") {
	    					self.dataParams = self.options.collapse.dataParams(d);
						} else {
							self.dataParams = self.options.collapse.dataParams;
						}
	    				self.ajax(self.options.collapse.dataUrl, self.dataParams, self.addChild, self.options.collapse.fail, d, self.options.collapse.httpType);
	    			}
	    		} else {
	    			d._children = d.children;
	    			d.children = null;
	    			self.update(d);
	    		}
	    		if(self.options.click) {
					self.click(d);
				}
	    	}
	    };
	    
	    this.addChild = function(data, d) {
	    	data = self.options.collapse.parser(data, d);
	    	var children = [];
			for(var i in data) {
				children[i] = {};
				for(var key in data[i]) {
					children[i][key] = data[i][key]; 
				}
				var timestamp = self.uniqueId()+i;
				children[i].id = self.element[0].id+"_" + timestamp;
			}
	    	d.children = children;
	    	d._children = null;
	    	self.update(d);
	    };
	    
		this.update = function(source) {
			var duration = 750,
			diagonal = this.diagonal,
			options = this.options;
			var nodes = this.tree.nodes(this.options.data),
			links = this.tree.links(nodes);
			nodes.forEach(function (d) {
				if(d.depth == 0) {
					return true;
				}
				
				var len = 0;
				if(self.options.depthLength) {
					for (var i = 1; i <= d.depth; i++) {
						if(i <= d.depth) {
							len += self.options.depthLength[i-1];
						}
					}
				}
				len = len ? len : (d.depth * ((self.options.width-75-self.options.margin.left-self.options.margin.right) / 3));
				d.y = len;
			});
			// Update the nodes…
			this.node = this.node.data(nodes, function (d) {
				return d.id;
			});
			
			this.node.exit().remove();
			this.svg.selectAll("."+this.options.nodeClass).selectAll("circle").remove();
			this.svg.selectAll("."+this.options.nodeClass).selectAll("text").remove();
			this.svg.selectAll("."+this.options.nodeClass).selectAll("image").remove();
			this.svg.selectAll("."+this.options.nodeClass).selectAll("rect").remove();

			function filter(data) {
				for(var key in data) {
					var d = data[key];
					if(key == "value" || key == 'size') {
						data["size"] = Number(d);
						data["value"] = Number(d);
					} else if(key == "children") {
						for (var i = 0; i < d.length; i++) {
							filter(d[i]);
						}
					}
				}
			}
			filter(this.options.data);

			var max = d3.max(nodes, function(d) {
				if(d.value) {
					d.size = Number(d.value);
					return Number(d.value);
				} else {
					d.value = Number(d.value);
					return Number(d.size);
				}
			});
			
			var sline = d3.scale.linear().domain([0, max]).range([2, 70]);
			var snode = d3.scale.linear().domain([0, max]).range([2, 30]);
			
			this.node.enter().append("g").attr("class", function (d) {
				return options.nodeClass;
			})
			.attr("transform", function (d) {
				return "translate(" + (source.y0) + "," + (source.x0) + ")";
			})
			.attr("id", function (d) {
				return d.id;
			});
			
			this.node.append("circle")
			.attr("r", function (d) {
				if(!d.parent) {
					return 3;
				}
				return snode(d.size);
			})
			.style("fill", function (d) {
				if(d.option && options.option && options.option[d.option] && options.option[d.option].color) {
					return options.option[d.option].color;
				}
				if(d.color) {
					return d.color;
				}
				if(d.category == undefined && d.parent) {
					if(d.parent && d.parent.color) {
						return d.parent.color;
					}
					return options.color(d.parent.category);
				} else {
					return options.color(d.category);
				}
			})
			.style("fill-opacity", function(d) {
				return 0.5;
			})
			.style("stroke", function (d) {
				if(d.option && options.option && options.option[d.option] && options.option[d.option].color) {
					return options.option[d.option].color;
				}
				if(d.color) {
					return d.color;
				}
				if(d.category == undefined && d.parent) {
					if(d.parent && d.parent.color) {
						return d.parent.color;
					}
					return options.color(d.parent.category);
				} else {
					return options.color(d.category);
				}
			})
			.style("stroke-width", function (d) {
				return 1;
			})
			.style("cursor", function(d) {
				if(d.depth == 0) {
					return "default";
				}
				return "pointer";
			})
			;

			options.fontX = options.fontX ? options.fontX : -10;
			options.fontY = options.fontY ? options.fontY : 0;
			var text = this.node.append("text")
			.attr("x", function (d) {
				if(d.option && options.option && options.option[d.option] && options.option[d.option].fontX) {
					d.fontX = options.option[d.option].fontX;
				} else if(d.fontX) {
					d.fontX = d.fontX;
				} else {
					d.fontX = options.fontX;
				}
				return d.fontX;
			})
			.attr("y", function (d) {
				if(d.option && options.option && options.option[d.option] && options.option[d.option].fontY) {
					return options.option[d.option].fontY;
				}
				if(d.fontY) {
					return d.fontY;
				}
				return options.fontY;
			})
			.attr("dy", ".35em").attr("text-anchor", function (d) {
				if(d.option && options.option && options.option[d.option] && options.option[d.option].fontAlign) {
					d.fontAlign = options.option[d.option].fontAlign;
				} else if(d.fontAlign) {
					d.fontAlign = d.fontAlign;
				} else {
					d.fontAlign = options.fontAlign;
				} 
				return d.fontAlign;
			})
			.text(function (d) {
				if(options.textLength < d.name.length) {
					return (d.name).substr(0, options.textLength) + options.textSuffix;
				}
				return d.name;
			})
			.style("cursor", function(d) {
				if(d.depth == 0) {
					return "default";
				}
				return "pointer";
			})
			.style("fill", function(d) {
				if(d.option && options.option && options.option[d.option] && options.option[d.option].fontColor) {
					return options.option[d.option].fontColor;
				}
				if(d.fontColor) {
					return d.fontColor;
				}
				return options.fontColor;
			})
			.style("font-family", function(d) {
				if(d.option && options.option && options.option[d.option] && options.option[d.option].font) {
					return options.option[d.option].font+"px";
				}
				if(d.font) {
					return d.font;
				}
				return options.font;
			})
			.style("font-size", function (d) {
				if(d.option && options.option && options.option[d.option] && options.option[d.option].fontSize) {
					return options.option[d.option].fontSize+"px";
				}
				if(d.fontSize) {
					return d.fontSize+"px";
				}
				return options.fontSize+"px";
			})
			;
			text.append("title").text(function(d) { return d.name + " (" + d.value.format() + ")"; })
			
			if(options.removeUse) {
				this.node.append("image")
				.attr("xlink:href", function (d) {
					if(!d.parent) {
						return ;
					}
					return options.removeImg;
				})
				.attr("width", function(d) {
					if(!d.parent) {
						return ;
					}
					return 24;
				})
				.attr("height", function(d) {
					if(!d.parent) {
						return ;
					}
					return 22;
				})
				.attr("y", -11)
				.style("cursor", function(d) {
					if(d.depth == 0) {
						return "default";
					}
					return "pointer";
				})
				.style("visibility", "hidden")
				.on("click", function (t) {
					for (var i in options.data.children) {
						var root = options.data.children[i];
						if (root.id == t.id) {
							options.data.children.splice(i, 1);
							break;
						}
						for (var j in root.children) {
							var child = root.children[j];
							if (child.id == t.id) {
								root.children.splice(j, 1);
								break;
							}
							for (var k in child.children) {
								var grandchild = child.children[k];
								if (grandchild.id == t.id) {
									child.children.splice(k, 1);
									break;
								}
							}
						}
					}
					self.update(t);
				})
				;
			};
			
			var rect = this.node.append("rect")
			.attr('class', 'overlay')
			.style('fill', 'none')
		    .style('stroke', 'none')
		    .style('pointer-events', 'all')
		    .style("cursor", function(d) {
				if(d.depth == 0) {
					return "default";
				}
				return "pointer";
			})
		    .attr('height', 18)
		    .attr('width', 40)
		    .attr('y', -8)
		    ;
			
			this.svg.selectAll("."+this.options.nodeClass)
			.on("mouseover", function (d) {
				var parent = d3.select(this);
				var textW = Number(parent.select("text").node().getComputedTextLength());
				var x = Number(d.fontX) + Number(options.fontX);
				var imgX = d.fontAlign == "end" ? -Number(textW) + Number(x) - 24 : x < 0 ? Number(textW) - Number(x) - 15 : Number(textW) + Number(x) +5;
				var rectwh = parent.select("rect").attr("width");

				if(d.depth != 0) {
					parent.select("image")
					.attr("x", imgX - options.fontX)
					.attr("y", Number(parent.select("image").attr("y")) + options.fontY)
					.style("visibility", "visible");
				}
				if(rectwh == 40) {
					var rectW = x < 0 ? textW - x : textW + x;
					var rectX = d.fontAlign == "end" ? -rectW : x < 0 ? x : 5;
					parent.select("rect")
					.attr("width", rectW)
					.attr("x", rectX - options.fontX)
					.attr("y", Number(parent.select("rect").attr("y")) + options.fontY)
					;
				}
			})
			.on("mouseout", function (D) {
				self.node.filter(function (d) {
					return D.id == d.id;
				}).select("image").style("visibility", "hidden");
			})
			.on("click", function (d) {
				if (d.depth < 3) {
					if(self.options.collapse.use) {
						self.collapse(d);
					} else {
						self.click(d);
					}
				} else {
					self.click(d);
				}
			})
			;

			rect.append("title").text(function(d) { return d.name + " (" + d.value.format() + ")"; })

			// Transition nodes to their new position.
			this.node.transition().duration(duration).attr("transform", function (d) {
				return "translate(" + d.y + "," + d.x + ")";
			});
			
			// Update the links…
			this.link = this.link.data(links, function (d) {
					return d.target.id;
			});
			// Enter any new links at the parent's previous position.
			this.link.enter().insert("path", "g").attr("class", this.options.linkClass)
			.attr("d", function (d) {
				var o = {
					x : source.x0,
					y : source.y0
				};
				return diagonal({
					source : o,
					target : o
				});
			})
			.style("fill", "none")
			.style("stroke-linecap", "round")
			.style("stroke", function (d) {
				if(d.target.color) {
					return d.target.color;
				}
				if(d.target.category == undefined) {
					if(d.parent && d.parent.color) {
						return d.parent.color;
					}
					return options.color(d.source.category);
				} else {
					return options.color(d.target.category);
				}
			})
			.style("stroke-width", function (d) {
				return sline(d.target.size);
			})
			.style("stroke-opacity", function (d) {
				return 0.3;
			});
			

			// Transition links to their new position.
			this.link.transition().duration(duration).attr("d", diagonal);
			
			// Transition exiting nodes to the parent's new position.
			this.link.exit().transition().duration(duration).attr("d", function(d) {
				var o = {
					x : source.x,
					y : source.y
				};
				return diagonal({
					source : o,
					target : o
				});
			}).remove();

			// Stash the old positions for transition.
			nodes.forEach(function (d) {
				d.x0 = d.x;
				d.y0 = d.y;
			});
		}
	};
	
	var NetworkDiagram = function(){
		var self = this;
		this.type = "network_diagram";
		this.parseCsv = function() {
			var json = [];
			var csv = this.options.dataCsv;
			csv = d3.csv.parse(csv);
			this.options.data = csv;
		};

		this._parser = function() {
			
			var data = this.options.data;
			var filterData = [];
			for (var i = 0; i < data.length; i++) {
				if(self.options.maxNode && i > Number(self.options.maxNode)) {
					break;
				}
				filterData.push(data[i]);
			}
			data = filterData;
			
			//extract max value
			var max = d3.max(data, function(d) {
				return Number(d.value);
			});
			
			var sources = d3.map();
			var id = 1;
			for ( var i in data) {
				data[i].id = self.element[0].id+"_"+id;
				data[i].value = Number(data[i].value);
				data[i].path = self.modifyPath(max, data[i].value);
				if(!sources.has(data[i].name)) {
					sources.set(data[i].name, id++);
				}
			}
			
			//target만 있고 source(name)은 없는 경우 source 생성
			for ( var i in data) {
				if(data[i].target != "" && data[i].target != 0 && !sources.has(data[i].target)) {
					var add = {};
					add.id = self.element[0].id+"_"+id;
					add.name = data[i].target;
					add.source = data[i].target;
					add.target = 0;
					add.path = 0;
					add.value = 0;
					if(data[i].category) {
						add.category = data[i].category; 
					}
					data.push(add);
					sources.set(data[i].target, id++);
				}
			}
			
			var sorted = [];
			for ( var i in data) {
				var d = data[i];
				for ( var j in data) {
					var dd = data[j];
					if(d.category == dd.category) {
						var push = true;
						for(var k in sorted) {
							var sort = sorted[k];
							if(sort.name == dd.name && sort.target == dd.target) {
								push = false;
							}
						}
						if(push) {
							sorted.push(dd);
						}
					}
				}
			}
			
			this.options.data = sorted;
		};
		
		this._parser2 = function() {
			var csv = this.options.data;
			var filterData = [];
			for (var i = 0; i < csv.length; i++) {
				if(self.options.maxNode && i > Number(self.options.maxNode)) {
					break;
				}
				filterData.push(csv[i]);
			}

			//extract max value
			var source_max = d3.max(filterData, function(data) {
				return Number(data.source_value);
			});
			var target_max = d3.max(filterData, function(data) {
				return Number(data.target_value);
			});
			var max = d3.max([source_max, target_max]);
			//source anal
			var merged = [], id = 1;
			for (var i = 0; i < filterData.length; i++) {
				var data = filterData[i];
				var value = Number($.trim(data.source_value));
				var path = self.modifyPath(max, value);
				
				var merge = {};
				merge.id = self.element[0].id+"_"+(id++);
				merge.name = data.source;
				merge.category = data.source_category;
				merge.value = value;
				merge.target = data.target;
				merge.path = path;
				merged.push(merge);
			}
			
			//target anal
			for (var i = 0; i < filterData.length; i++) {
				var data = filterData[i];
				var value = Number($.trim(data.target_value));
				var path = self.modifyPath(max, value);
				
				var merge = {};
				merge.id = self.element[0].id+"_"+(id++);
				merge.name = data.target;
				merge.category = data.target_category;
				merge.value = value;
				merge.target = data.source;
				merge.path = path;
				merged.push(merge);
			}
			
			var sorted = [];
			for ( var i in merged) {
				var d = merged[i];
				for ( var j in merged) {
					var dd = merged[j];
					if(d.category == dd.category) {
						var push = true;
						for(var k in sorted) {
							var sort = sorted[k];
							if(sort.name == dd.name && sort.target == dd.target) {
								push = false;
							}
						}
						if(push) {
							sorted.push(dd);
						}
					}
				}
			}
			this.options.data = sorted;
		};
		
		this.modifyPath = function(max, value) {
			var path = 0;
			if(value >= Math.round(max * 0.9)) {
				path = self.options.linkWidth[0];
			} else if(value < Math.round(max * 0.9) && value >= Math.round(max * 0.8)) {
				path = self.options.linkWidth[1];
			} else if(value < Math.round(max * 0.8) && value >= Math.round(max * 0.7)) {
				path = self.options.linkWidth[2];
			} else if(value < Math.round(max * 0.7) && value >= Math.round(max * 0.6)) {
				path = self.options.linkWidth[3];
			} else if(value < Math.round(max * 0.6) && value >= Math.round(max * 0.5)) {
				path = self.options.linkWidth[4];
			} else if(value < Math.round(max * 0.5) && value >= Math.round(max * 0.4)) {
				path = self.options.linkWidth[5];
			} else if(value < Math.round(max * 0.4) && value >= Math.round(max * 0.3)) {
				path = self.options.linkWidth[6];
			} else {
				path = self.options.linkWidth[7];
			}
			return path;
		};

		this.draw = function() {
			
			if(typeof this.options.linkWidth != "array") {
				this.options.linkWidth = [12, 10.5, 9, 7.5, 5.5, 3.5, 2, 1];
			}
			
			if(typeof this.options.data == "string") {
				this.options.data = $.parseJSON(this.options.data);
			}
			if(this.options.data[0].source_value && this.options.data[0].target_value) {
				this._parser2();
			} else {
				this._parser();
			}
			var classes = this.options.data;
			var width = this.options.width - this.options.margin.left - this.options.margin.right,
			height = this.options.height - this.options.margin.top - this.options.margin.bottom;
	
			if(height < width) {
				radius = height / 2;
				innerRadius = radius - 150;
			} else {
				radius = width / 2;
				innerRadius = radius - 150;
			}
			
			var cluster = d3.layout.cluster()
			    .size([360, innerRadius])
			    .sort(null)
			    .value(function(d) { return d.value; });
	
			var lineType = this.options.lineType;
			lineType = lineType ? lineType : "bundle";
			
			var bundle = d3.layout.bundle();
			var line = d3.svg.line.radial()
			    .interpolate(lineType)
			    .tension(.55)
			    .radius(function(d) { return d.y; })
			    .angle(function(d) { return d.x / 180 * Math.PI; });
	
			var svg = this.svg;
			svg.attr("transform", "translate(" + width/2 + "," + radius + ")");
			
			var link = svg.append("g").selectAll(".link"),
			    node = svg.append("g").selectAll(".node");
			
			var nodes = cluster.nodes(packageHierarchy(classes));
			var links = packageImports(classes, nodes);

			var tmp = [];
			links.forEach(function(link) {
				if(!link.target) {
					return true;
				}
				tmp.push(link);
			});
			
			link = link.data(bundle(tmp))
			.enter().append("path")
			.each(function(d) { d.source = d[0], d.target = d[d.length - 1]; })
			.attr("class", "link")
			.attr("d", line)
			.attr("stroke", function(d) {
				var color = d.source.category ? d.source.category : d.source[self.options.colorKey];
    			d.source.color = self.options.color(color);
        		return d.source.color; 
			})
			.attr("fill", "none") 
			.attr("stroke-linecap", "round") 
			.attr("stroke-width", function(d) {
				return d.source.path;
			})
			;
			
			if(this.options.markerUse) {
				var markerWidth = 6,
				markerHeight = 6,
				cRadius = -5, // play with the cRadius value
			    refX = cRadius + (markerWidth * 2),
			    refY = -Math.sqrt(cRadius);
				
				
				svg.append("svg:defs");
				function cmarker(url, color, size) {
					svg.selectAll("defs")
			        .append("svg:marker")
			        .attr("id", url)
			        .attr("viewBox", "0 -5 10 10")
			        .attr("refX", refX-5)
			        .attr("markerWidth", markerWidth+size)
			        .attr("markerHeight", markerHeight+size)
			        .attr("markerUnits", "userSpaceOnUse")
			        .attr("stroke-linecap", "round") 
			        .attr("orient", "auto")
			        .attr("fill", color)
			        .append("svg:path")
			        .attr("d", "M0,-5L10,0L0,5");
					return "url(#"+ url +")";
				}
				var mmm = d3.map();
				var markers = {};
				link.attr("marker-end", function(d, i) {
					if(!d.target) {
						return;
					}
					var name = "marker_"+i;
					var marker;
					for ( var key in markers) {
						marker = markers[name];
						if(marker) {
							if( marker.color == d.source.color && marker.path == d.source.path) {
								name = key;
								break;
							}
						}
					}
					d.source.marker = name;
					if(!marker) {
						markers[name] = d.source;
					} else {
						return "url(#"+name+")";
					}
					return cmarker(name, d.source.color, d.source.path);
				});
				cmarker("blank", "none", 0);
			}
			
			node = node.data(nodes.filter(function(n) { return !n.children; }))
			.enter().append("text")
			.attr("class", "node")
			.attr("dy", ".31em")
			.attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + (d.y + 15) + ",0)" + (d.x < 180 ? "" : "rotate(180)"); })
			.style("text-anchor", function(d) { return d.x < 180 ? "start" : "end"; })
			.text(function(d) { return d.name; })
			.on("mouseover", mouseovered)
			.on("mouseout", mouseouted)
			.call(this.wrap, self.options.textWrapWidth, self.options.fontWrapDistance)
			.style("fill" , this.options.fontColor)
			.style("font-size", this.options.fontSize+"px")
			.style("font-family", this.options.font)
			.style("cursor", "pointer")
			;
			
			function mouseovered(d) {
				if(self.options.markerUse) {
					link.attr("marker-end", function(l) {
						if (l.target.id == d.id || l.source.id == d.id) {
							return "url(#"+l.source.marker+")";
						} else {
							return "url(#blank)";
						}
					})
				}
				link.attr("stroke-width", function(l) { 
					if (l.target.name == d.name) {
						return l.source.path;
					} else if (l.source.name == d.name) {
						return l.source.path;
					} else return 0;
				})
				.classed("link--target", function(l) {
					if (l.target.target == d.target) {
						return l.source.hover = true; 
					}
				})
				.classed("link--source", function(l) { 
					if (l.source.name == d.source) {
						return l.target.hover = true; 
					}
				})
				.filter(function(l) {
					return l.target.name != d.name || l.source.name != d.name; 
				})
				;

				node.selectAll("tspan").attr("fill", function(l) {
					if (l.target == d.target && l.name == d.name ) {
						return "#000";
					}
				})
				.attr("font-weight", function(l) {
					if ((l.target == d.target && l.name == d.name) || l.hover) {
						return 700;
					}
					/*
					if(l.name == d.target) {
						return 700;
					}
					*/
				})
				;
			}
	
			function mouseouted(d) {
				if(self.options.markerUse) {
					link.attr("marker-end", function(d) { return "url(#"+d.source.marker+")";});
				}
				link.classed("link--target", function(l) { if (l.target.name == d.name) return l.source.hover = false; })
			    .classed("link--source", function(l) { if (l.source.name == d.name) return l.target.hover = false; })
				.attr("stroke-width", function(d) {
					return d.source.path;
				});
				node.selectAll("tspan").attr("fill", self.options.fontColor).attr("font-weight", null);
			}
	
			d3.select(self.frameElement).style("height", height + "px");
	
			function packageHierarchy(classes) {
			    var map = {};
			    function find(name, data) {
			        var node = map[name],
			            i;
			        if (!node) {
			            node = map[name] = data || {
			                name: name,
			                children: []
			            };
			            if (name.length) {
			                node.parent = find(name.substring(0, i = name.lastIndexOf(".")));
			                node.parent.children.push(node);
			                node.key = name.substring(i + 1);
			            }
			        }
			        return node;
			    }
			    classes.forEach(function(d) {
			        find(d.name, d);
			    });
			    return map[""];
			}

			function packageImports(classes, nodes) {
			    var map = {}, imports = [];
			    nodes.forEach(function(d) {
			        map[d.name] = d;
			    });
			    classes.forEach(function(d, i) {
			    	if(d.target != 0) {
			        	var source = {}, target = map[d.target];
			        	for ( var key in map[d.name]) {
			        		source[key] = map[d.name][key];
						}
			        	source.source = d.name;
			        	source.target = d.target;
			        	source.value = d.value;
			        	source.path = d.path;
			            imports.push({
			                source: source,
			                target: target
			            });
			    	}
			    });
			    
			    return imports;
			}
		};
	};
	
	var ChordDiagram = function(){
		var self = this;
		this.type = "chord_diagram";
		this.parseCsv = function(csv) {
			var json = [];
			csv = d3.csv.parse(csv);
			this.options.data = csv;
		};
		
		this._parser1 = function() {
			var csv = this.options.data;
			var filterData = [];
			for (var i = 0; i < csv.length; i++) {
				if(self.options.maxNode && i > Number(self.options.maxNode)) {
					break;
				}
				filterData.push(csv[i]);
			}

			var mapValues = d3.map();
			var mapTarget = d3.map();
			for (var i = 0; i < filterData.length; i++) {
				var row = filterData[i];
				var values = [], target = [];
				if(mapValues.has(row.name)) {
					values = mapValues.get(row.name);
					values.push(Number($.trim(row.value)));
					target = mapTarget.get(row.name);
					target.push($.trim(row.target));
					mapValues.set(row.name, values);
					mapTarget.set(row.name, target);
				} else {
					values = [Number($.trim(row.value))];
					target = [$.trim(row.target)];
					mapValues.set(row.name, values);
					mapTarget.set(row.name, target);
				}
			}

			var tmpData = [];
			for (var i = 0; i < filterData.length; i++) {
				var row = filterData[i];
				if(row.target == "") {
					continue;
				}
				if(!mapTarget.has(row.target)) {
					var data = {};
					data.name = row.target;
					data.category = "etc";
					data.values = [0];
					data.target = [row.name];
					tmpData.push(data);
					mapValues.set(row.target, data.values);
					mapTarget.set(row.target, data.target);
				}
			}
			
			var mapTmp = d3.map();
			var merged = [];
			for ( var i in filterData) {
				var data = filterData[i];
				if(!mapTmp.has(data.name)) {
					var merge = {};
					merge = data;
					merge.values = mapValues.get(data.name);
					merge.target = mapTarget.get(data.name);
					merged.push(merge);
				}
				mapTmp.set(data.name, i);
			}
			
			var sorted = [];
			for ( var i in merged) {
				var d = merged[i];
				for ( var j in merged) {
					var dd = merged[j];
					if(d.category == dd.category) {
						var push = true;
						 sorted.forEach(function(sort) {
							 if(sort.name == dd.name) {
								 push = false;
							 }
						 });
						 if(push) {
							 sorted.push(dd);
						 }
					}
				}
			}
			this.options.data = sorted;
		};
		
		this._parser2 = function() {
			var csv = this.options.data;
			var filterData = [];
			for (var i = 0; i < csv.length; i++) {
				if(self.options.maxNode && i > Number(self.options.maxNode)) {
					break;
				}
				filterData.push(csv[i]);
			}

			var mapSourceValues = d3.map();
			var mapTargetValues = d3.map();
			var mapSource = d3.map();
			var mapTarget = d3.map();
			for (var i = 0; i < filterData.length; i++) {
				var row = filterData[i];
				var values = [], target = [];
				if(mapTargetValues.has(row.source)) {
					values = mapTargetValues.get(row.source);
					values.push(Number($.trim(row.source_value)));
					target = mapTarget.get(row.source);
					target.push($.trim(row.target));
					mapTargetValues.set(row.source, values);
					mapTarget.set(row.source, target);
				} else {
					values = [Number($.trim(row.source_value))];
					target = [$.trim(row.target)];
					mapTargetValues.set(row.source, values);
					mapTarget.set(row.source, target);
				}
			}
			
			for (var i = 0; i < filterData.length; i++) {
				var row = filterData[i];
				var values = [], source = [];
				if(mapSourceValues.has(row.target)) {
					values = mapSourceValues.get(row.target);
					values.push(Number($.trim(row.target_value)));
					source = mapSource.get(row.target);
					source.push($.trim(row.source));
					mapSourceValues.set(row.target, values);
					mapSource.set(row.target, source);
				} else {
					values = [Number($.trim(row.target_value))];
					source = [$.trim(row.source)];
					mapSourceValues.set(row.target, values);
					mapSource.set(row.target, source);
				}
			}

			var mapTargetTmp = d3.map();
			var mapSourceTmp = d3.map();
			var merged = d3.map();
			for ( var i in filterData) {
				var data = filterData[i];
				if(!mapTargetTmp.has(data.source)) {
					var merge = {};
					merge.name = data.source;
					merge.category = data.source_category;
					merge.values = mapTargetValues.get(data.source);
					merge.target = mapTarget.get(data.source);
					merged.set(data.source, merge);
				}
				mapTargetTmp.set(data.source, i);
			}
			
			for ( var i in filterData) {
				var data = filterData[i];
				if(mapTargetTmp.has(data.target)) {
					var merge = merged.get(data.target);
					var values = merge.values, target = merge.target;
					values = $.merge(values, mapSourceValues.get(data.target));
					target = $.merge(target, mapSource.get(data.target));
					merge.values = values;
					merge.target = target;
				} else if(!mapSourceTmp.has(data.target)) {
					var merge = {};
					merge.name = data.target;
					merge.category = data.target_category;
					merge.values = mapSourceValues.get(data.target);
					merge.target = mapSource.get(data.target);
					merged.set(data.target, merge);
				}
				mapSourceTmp.set(data.target, i);
			}
			
			var sorted = [];
			merged.forEach(function(key1, d) {
				merged.forEach(function(key2, dd) {
					if(d.category == dd.category) {
						var push = true;
						 sorted.forEach(function(sort) {
							 if(sort.name == dd.name) {
								 push = false;
							 }
						 });
						 if(push) {
							 sorted.push(dd);
						 }
					}
				});
			});
			this.options.data = sorted;
		};

		this.draw = function() {

			if(!this.options.data) {
				var csv = this.options.dataCsv;
				this.parseCsv(csv);
			} else {
				if(typeof this.options.data == "string") {
					this.options.data = $.parseJSON(this.options.data);
				}
			}
			if(this.options.data && this.options.data[0].source_value && this.options.data[0].target_value) {
				this._parser2();
			} else {
				this._parser1();
			}
			
			var data = this.options.data;
			var width = this.options.width - this.options.margin.left - this.options.margin.right,
            height = this.options.height - this.options.margin.top - this.options.margin.bottom,
            radius = (height - this.options.margin.left - this.options.margin.right) / 2;
			if(height < width) {
				outerRadius = height / 2,
				innerRadius = radius - 150 + Number(this.options.nodeSize);
			} else {
				outerRadius = width / 2,
				innerRadius = radius - 150 + Number(this.options.nodeSize);
			}
			translateX = (width / 2 ) + this.options.x;
			translateY = outerRadius + this.options.y;
	
			
			var nodeInterval = this.options.nodeInterval / 100;
			var categoryInterval = this.options.categoryInterval / 100;
			
			var chord = d3.layout.chord()
			    .padding(nodeInterval)
			    .sortSubgroups(d3.descending)
			    .sortChords(d3.descending);
			var chordCateogry = d3.layout.chord()
			    .padding(categoryInterval)
			    .sortSubgroups(d3.descending)
			    .sortChords(d3.descending);
	
			var arc = d3.svg.arc()
			    .innerRadius(innerRadius + 20)
			    .outerRadius(innerRadius + 35);
			var arc2 = d3.svg.arc()
			    .innerRadius(innerRadius)
			    .outerRadius(innerRadius + 15);
	
			var svg = this.svg.attr("transform", "translate(" + translateX + "," + translateY + ")");
	
			var indexByName = d3.map(),
			    nameByIndex = d3.map(),
			    categoryByName = d3.map(),
			    matrix = [],
			    n = 0,
			    indexByNameCateogry = d3.map(),
			    nameByIndexCateogry = d3.map(),
			    categoryByCount = d3.map(),
			    matrixCateogry = [],
			    nCateogry = 0,
			    sum = 0;
	
			//map setting
			data.forEach(function(d, i) {
			    var dd, dCategory;
			    //name circle
			    if (!indexByName.has(dd = d.name)) {
			        nameByIndex.set(n, dd);
			        indexByName.set(dd, n++);
			        categoryByName.set(dd, d.category);
			    }
			});
	
			//data matrix
			data.forEach(function(d, i) {
			    //name circle
			    var source = indexByName.get(d.name),
			        row = matrix[source];
			    if (!row) {
			        row = matrix[source] = [];
			        for (var j = -1; ++j < n;) row[j] = 0;
			    }
			    for (var i in d.target) {
			        var dd = d.target[i];
			        row[indexByName.get(dd)] = d.values[i];
			    }
	
			});
			chord.matrix(matrix);

			var g = svg.selectAll(".group")
			    .data(chord.groups)
			    .enter().append("g")
			    .attr("class", function(d) {
			        return "group";
			    })
			    .on("mouseover", fade(.1))
			    .on("mouseout", fade(1));
	
			g.append("path")
			    .style("fill", function(d) {
			        return self.options.color(categoryByName.get(nameByIndex.get(d.index)));
			    })
			    .style("stroke", function(d) {
			        return self.options.color(categoryByName.get(nameByIndex.get(d.index)));
			    })
			    .attr("d", arc2);
	
			g.append("text")
			    .each(function(d) {
			        d.angle = (d.startAngle + d.endAngle) / 2;
			    })
			    .attr("dy", ".35em")
			    .attr("transform", function(d) {
			        return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")" + "translate(" + (innerRadius + 36) + ")" + (d.angle > Math.PI ? "rotate(180)" : "");
			    })
			    .style("text-anchor", function(d) {
			        return d.angle > Math.PI ? "end" : null;
			    })
			    .text(function(d) {
			        return nameByIndex.get(d.index);
			    })
			    .call(this.wrap, self.options.textWrapWidth, self.options.fontWrapDistance)
			    .style("font-size", this.options.fontSize + "px")
			    .style("font-family", this.options.font)
			    .style('cursor', 'default');
	
			svg.selectAll(".chord")
			    .data(chord.chords)
			    .enter().append("path")
			    .attr("class", "chord")
			    .style("fill-opacity", .67)
			    .style("stroke", function(d) {
			        return d3.rgb(self.options.color(categoryByName.get(nameByIndex.get(d.source.index)))).darker();
			    })
			    .style("fill", function(d) {
			        return self.options.color(categoryByName.get(nameByIndex.get(d.source.index)));
			    })
			    .attr("d", d3.svg.chord().radius(innerRadius))
			    .on("mouseover", fade(.1))
			    .on("mouseout", fade(1))
			    .append("title").text(function(d) {
			        var source = data[d.source.index],
			            target = data[d.target.index];
			        var source_index = getSize(source.target, target.name),
			            target_index = getSize(target.target, source.name);
			        var title = "["+source.category+"] "+source.name + " → " + " ["+target.category+"] "+target.name + " : " + source.values[source_index] + "\n";
			        if (target_index) {
			            title += "["+target.category+"] "+target.name + " → " + " ["+source.category+"] "+ source.name + " : " + target.values[target_index] + "\n";
			        }
			        return title;
			    });
	
			function getSize(targets, name) {
			    var index;
			    for (var i in targets) {
			        var target = targets[i];
			        if (target == name) {
			            index = i;
			        }
			    }
			    return index;
			}
	
			function fade(opacity) {
			    return function(g, i) {
			        svg.selectAll(".chord")
			            .filter(function(d, j) {
			                if (g.source) {
			                    return i != j;
			                } else {
			                    if (g.angle) {
			                        if(self.options.mouseOverArea == "node") {
			                        	return d.source.index != i && d.target.index != i;
			                        } else if(self.options.mouseOverArea == "category"){
			                        	return categoryByName.get(nameByIndex.get(d.source.index)) != categoryByName.get(nameByIndex.get(g.index)) && categoryByName.get(nameByIndex.get(d.target.index)) != categoryByName.get(nameByIndex.get(g.index));
			                        }

			                    } else {
			                        return nameByIndexCateogry.get(i) != categoryByName.get(nameByIndex.get(d.source.index)) && nameByIndexCateogry.get(i) != categoryByName.get(nameByIndex.get(d.target.index));
			                    }
			                }
			            })
			            .transition()
			            .style("opacity", opacity);
			    };
			}
			
		};
		
	};
	
	var Table = function(){
		var self = this;
		this.type = "table";
		this.parseRand = function() {
			var csv = this.options.dataRand;
			var row = csv.split("\n");
			var data = [];
			for (var i = 0; i < row.length; i++) {
				if(row[i] == '') {
					continue;
				}
				var values = row[i].split(",");
				data.push(values);
			}
			this.options.data = data;
		};
		
		this.parseJson = function() {
			var json = this.options.data;
			
			if(typeof json == "string") {
				json = $.parseJSON(json);
			}
			var arrays = [];
			var keys = [];
			for(var key in json[0]) {
				keys.push(key);
			}
			arrays.push(keys);
			for(var i in json) {
				var arr = [];
				var d = json[i];
				for(var j in d) {
					arr.push(d[j]);
				}
				arrays.push(arr);
			}
			this.options.data = arrays;
		}
		
		this.draw = function() {
			if(this.options.dataRand){
				this.parseRand();
			} else {
				this.parseJson();
			}
			
	    	var data = this.options.data;
			var columnNames;
			if(this.options.headerUse) {
				columnNames = data[0];
				data.splice(0,1);
			}
			
			var width = this.options.width - this.options.margin.left - this.options.margin.right;
			var height = this.options.height - this.options.margin.top - this.options.margin.bottom;
			
            var table = d3.select(this.element.selector)
            .selectAll("table")
        	.data([0]);
            
	    	table.enter()
        	.append('table')
        	.attr('class', this.options.tableClass.table)
        	.attr("width", width)
        	.attr("height", height)
        	.style("background-color", this.options.backgroundColor)
        	//.style("overflow", "hidden")
        	.style("margin-top", this.options.margin.top+"px")
        	.style("margin-bottom", this.options.margin.bottom+"px")
        	.style("margin-left", this.options.margin.left+"px")
        	.style("margin-right", this.options.margin.right+"px")
        	;
        	
	    	if(this.options.headerUse) {
	    		var header_row = table.append('tr').attr('class', this.options.tableClass.tr + " " +this.options.tableClass.tr_header);
	    		header_row.selectAll('th')
	            .data(columnNames)
	            .enter().append('th')
	            .attr('class', function(d) {
	            	return self.options.tableClass.th+' ' + d;
	            })
	            .text(function(d, i){return d;})
	            .style("color", this.options.fontColor)
				//.style("text-anchor", "middle")
				.style("font-family", this.options.font)
				.style("font-size", this.options.fontSize+"px")
				;
	    		
	    		if(self.options.headerWidth) {
		    		header_row.selectAll('th')
		    		.style("width", function(d, i) {
		    			return self.options.headerWidth[i]+'%';
		    		})
	    		}
	    	}
            var rows = table
            .selectAll('tr.'+this.options.tableClass.tr_row)
            .data(data);
            rows.enter()
            .append('tr')
            .attr('class', this.options.tableClass.tr + " " +this.options.tableClass.tr_row)
            ;
            
            var cells = rows.selectAll('td.'+self.options.tableClass.td)
            .data(function(d, i){return d;})
            .enter().append('td')
            .attr("class", function(d, i) {
            	return self.options.tableClass.td;
            })
            //.attr("contenteditable", true)
            .text(function(d, i){
            	return d;
            })
            .style("color", this.options.fontColor)
			.style("text-anchor", "middle")
			.style("font-family", this.options.font)
			.style("font-size", this.options.fontSize+"px")
            .style(this.options.tableClass.cell_td);
            /*
            var tableClass = this.options.tableClass;
            for ( var key in tableClass) {
				if(tableClass[key]) {
					table.selectAll("."+key).style(tableClass[key]);
				}
			}
            */
            if(this.options.defaultCss) {
            	if(this.options.fontAlign == "end") {
            		this.options.fontAlign = "center";
            	}
            	table.selectAll('th')
            	.style("border-top", "3px solid #4062f7")
            	.style("border-bottom", "1px solid #bbb")
            	.style("border-left", "1px solid #d5d5d5")
            	.style("background-color", "#e2e2e2")
            	.style("text-align", this.options.fontAlign)
            	.style("color" , this.options.fontColor)
				.style("font-size", this.options.fontSize+"px")
				.style("font-family", this.options.font)
				.style("font-color", this.options.fontColor)
				.style("font-weight", "bold")
            	;
            	table.select('th')
            	.style("border-left", null)
            	;
            	
            	table.selectAll('td')
            	.style("border-bottom", "1px solid #d5d5d5")
            	.style("text-align", this.options.fontAlign)
            	.style("font-size", this.options.fontSize+"px")
				.style("font-family", this.options.font)
				.style("font-color", this.options.fontColor)
				.style("border-left", "1px solid #d5d5d5")
            	;
            	table.selectAll('td:first-child')
            	.style("border-left", "none")
            	;
            	table.selectAll('tr:nth-child(odd)')
            	.style("background-color", "#f7f7f7");
            	
            	if(this.options.headerUse == false) {
            		table.selectAll('tr:first-child')
            		.style("border-top", "1px solid #d5d5d5");
            	}
            }
	    }
	};
	
	
	var RapidTable = function(){
		var self = this;
		this.type = "rapid_table";
		this.parseRand = function() {
			var csv = this.options.dataRand;
			var row = csv.split("\n");
			var data = [];
			for (var i = 0; i < row.length; i++) {
				if(row[i] == '') {
					continue;
				}
				var values = row[i].split(",");
				data.push(values);
			}
			this.options.data = data;
		};
		this.parseCsv = function(){
			var csv = this.options.dataCsv;
		  var lines=csv.split("\n");

		  var result = [];

		  var headers=lines[0].split(",");

		  for(var i=1;i<lines.length;i++){
			if(lines[i] == "") {
				continue;
			}
			  var obj = {};
			  var currentline=lines[i].split(",");

			  for(var j=0;j<headers.length;j++){
				  obj[headers[j]] = currentline[j];
			  }
			  result.push(obj);
		  }
		  this.options.data = result;
		};
		
		this.draw = function() {
			if(this.options.dataCsv) {
				this.parseCsv();
			} else if(this.options.dataRand) {
				this.parseRand();
			}
			
	    	var data = this.options.data;
			if(data) {
				if(typeof data == "string") {
		    		data = $.parseJSON(data);
				}
			} else {
				this.parseCsv();
			}

			var table = d3.select(this.element.selector).selectAll("div").data([0])
            
            if(this.options.tableClass.table) {
            	d3.select(this.element.selector).attr('class', this.options.tableClass.table);
            } else {
            	d3.select(this.element.selector)
            	.style("width", this.options.width+"px")
            	.style("height", this.options.height+"px")
            	.style("margin-top", this.options.margin.top+"px")
	        	.style("margin-bottom", this.options.margin.bottom+"px")
	        	.style("margin-left", this.options.margin.left+"px")
	        	.style("margin-right", this.options.margin.right+"px")
            	.style("font-family", "'맑은고딕', malgun gothic")
            	.style("font-size", this.options.fontSize+"px");
            }

            
            var div = table.enter().append("div")
            
            if(this.options.tableClass.div) {
            	div.attr("class", this.options.tableClass.div)
            } else {
            	div.style("position", "relative")
            	.style("overflow", "hidden")
            	.style("border", "1px solid #d3d3d3");
            }
        	
        	
            var h2 = div.append("h2").text(this.options.title)
            
            if(this.options.tableClass.h2) {
            	h2.attr("class", this.options.tableClass.h2);
            } else {
            	h2.style("position", "relative")
                .style("color", "#555")
                .style("font-weight", "bold")
                .style("font-size", this.options.fontSize+"px")
                .style("margin", "0")
                .style("padding", "0 0 0 10px")
                .style("letter-spacing", "-1px");
            }
            
            
            var ol = div.append("ol");

            if(this.options.tableClass.ol || this.options.tableClass.ul) {
            	ol.attr("class", this.options.tableClass.h2);
            } else {
            	ol.style("position", "relative")
            	.style("overflow", "hidden")
            	.style("margin-left", "0")
            	.style("padding", "0px 0 18px 0");
            }
            
            for(var i in data) {
            	var d = data[i];
            	var li = ol.append("li");
            	li.attr("class", "li"+i);
            	if(this.options.click) {
            		li.on('click', function() {
            			var id = d3.select(this).attr("class").replace("li", "");
            			var cd = data[id];
            			self.options.click(cd);
            		});
            	}
            	if(this.options.tableClass.li) {
                	li.attr("class", this.options.tableClass.h2);
                } else {
                	li.style("line-height", "26px")
                	.style("position", "relative")
                	.style("margin", "0")
                	.style("padding", "0 0 0 35px");
                }
            	
            	var rank = li.append("span");
            	if(this.options.tableClass.rank) {
            		rank.attr("class", this.options.tableClass.rank);
            	} else {
	            	rank.style("display", "inline-block")
	            	.style("width", "14px")
	            	.style("height", "14px")
	            	.style("background", "url(" + this.options.imgPath + "ico_rank.gif) no-repeat 0 0")
	            	.style("position", "absolute")
	            	.style("top", "7px")
	            	.style("left", "12px");

	            	var position = i * (-14);
	            	rank.style("background-position", "0 " + position + "px");
            	}
            	
            	var keyword = li.append("span").text(d.keyword);
            	if(this.options.tableClass.keyword) {
            		keyword.attr("class", this.options.tableClass.keyword);
            	}
            	
            	var gapSpan = $.isNumeric(d.gap) ? Math.abs(Number(d.gap)) : ""; 
            	var gap = li.append("span").text(gapSpan);
            	
            	if(this.options.tableClass.gap) {
            		gap.attr("class", this.options.tableClass.gap);
            		if((d.gap < 0 || d.gap == "down") && this.options.tableClass.down) {
                		gap.attr("class", this.options.tableClass.down);
                	} else if(d.gap > 0 || d.gap == "up"/* || d.gap == this.options.tableClass.up*/) {
                		gap.style("background", "url(" + this.options.imgPath + "ico_rank_up.gif) no-repeat 1px 2px");
                	} else if(d.gap === 0 || d.gap == "new"/* || d.gap == this.options.tableClass['new']*/) {
                		gap.style("background", "url(" + this.options.imgPath + "ico_rank_new.gif) no-repeat 1px 2px");
                	} else if(d.gap === "" || d.gap == "keep"/* || d.gap == this.options.tableClass.keep*/) {
                		gap.style("background", "url(" + this.options.imgPath + "ico_rank_keep.gif) no-repeat 1px 3px");
                	}
            	} else {
            		gap.style("display", "inline-block")
                    .style("width", "40px")
                    .style("text-align", "right")
                    .style("height", "14px")
                    .style("line-height", "14px")
                    .style("font-size", (this.options.fontSize-1)+"px")
                    .style("color", "#666")
                    .style("position", "absolute")
                    .style("top", "6px")
                    .style("right", "12px");
            		
            		if(d.gap < 0 || d.gap == "down") {
                		gap.style("background", "url(" + this.options.imgPath + "ico_rank_down.gif) no-repeat 1px 3px");
                	} else if(d.gap > 0 || d.gap == "up") {
                		gap.style("background", "url(" + this.options.imgPath + "ico_rank_up.gif) no-repeat 1px 2px");
                	} else if(d.gap === 0 || d.gap == "new") {
                		gap.style("background", "url(" + this.options.imgPath + "ico_rank_new.gif) no-repeat 1px 2px");
                	} else if(d.gap === "" || d.gap == "keep") {
                		gap.style("background", "url(" + this.options.imgPath + "ico_rank_keep.gif) no-repeat 1px 3px");
                	}
            	}
            }
		
		}
	};
	
	
	

	var Stream = function() {
		var self = this;
		this.type = 'stream';
		this.parseJson = function(json) {
			var result = [];
			for(var i in json) {
				if(json[i].name != "") {
					result.push(json[i]);
				}
			}
			return result;
		}

		this.draw = function() {
			
			var data = {};
			if(this.options.data) {
				data = this.parseJson(this.options.data);
				//data = this.options.data;
			}
			var sdate = data[0].date;
			var edate = data[data.length - 1].date;
			
			var type = this.options.type,
			    svg = this.svg,
			    config = this.config,
			    width = this.options.width,
			    height = this.options.height;
			width = width - this.options.margin.left - this.options.margin.right;
			height = height - this.options.margin.bottom - this.options.margin.top;

			var x = d3.scale.ordinal().rangePoints([this.options.margin.left, width]);
			var y = d3.scale.linear().range([height, this.options.margin.top]);
			//var z = d3.scale.ordinal().range(colorrange);

			var parseDate = d3.time.format(this.options.inputFormat).parse;
			var formatDate = d3.time.format(this.options.dateFormat);
			var formatDate2 = d3.time.format(this.options.tooltip.dateFormat);
			
			var xAxis = d3.svg.axis()
			    .scale(x)
			    .orient("bottom");

			var yAxis = d3.svg
			    .axis()
			    .scale(y)
			    .ticks(this.options.ticks)
			    .innerTickSize(0)
			    .outerTickSize(0)
			    .orient("left");

			var yAxisr = d3.svg.axis().scale(y);
			if (data.length <= 20) {
			    var ticks = [];
			    data.forEach(function(d) {
			        ticks.push(d.date);
			    });
			    xAxis.tickValues(ticks);
			} else {
			    var len = data.length;
			    xAxis.ticks(Number(len / (len / 15)), 15);
			}

			var stack = d3.layout.stack()
			    .offset("silhouette")
			    .values(function(d) {
			        return d.values;
			    })
			    .x(function(d) {
			        return d.date;
			    })
			    .y(function(d) {
			        return d.value;
			    });

			var nest = d3.nest().key(function(d) {
			    return d.name;
			});

			var area = d3.svg.area()
			    .interpolate("cardinal")
			    .x(function(d) {
			        return x(d.date);
			    })
			    .y0(function(d) {
			        return y(d.y0);
			    })
			    .y1(function(d) {
			        return y(d.y0 + d.y);
			    });

			data.forEach(function(d) {
			    //d.date = format.parse(d.date);
				if(d.value) {
					d.value = +d.value;
				}
			});

			var layers = stack(nest.entries(data));

			x.domain((data).map(function(d) {
			    return d.date;
			}));
			y.domain([0, d3.max(data, function(d) {
			    return d.y0 + d.y;
			})]);

			svg.selectAll(".layer")
			    .data(layers)
			    .enter().append("path")
			    .attr("class", "layer")
			    .attr("d", function(d) {
			        return area(d.values);
			    })
			    .style("fill", function(d, i) {
			    	if(d.values[0].color) {
			    		d.color = d.values[0].color;
			    	} else {
			    		d.color = self.options.color(i);
			    	}
			    	for(var j in d.values) {
			    		d.values[j].color = d.color; 
			    	}
			        return d.color;
			    });


			svg.append("g")
			    .attr("class", "x axis")
			    .attr("transform", "translate(0, " + Number(height + 1) + ")")
			    .style("color", "#adacac")
			    .style("stroke-width", "2px")
			    .call(xAxis);

			svg.append("g")
			    .attr("class", "y axis")
			    .attr("transform", "translate(" + this.options.margin.left + ", 0)")
			    .attr("color", "#adacac")
			    .style("stroke-width", "2px")
			    .call(yAxis)
			    .append("text")
			    .style("color", this.options.fontColor)
			    .style("font-size", this.options.fontSize + "px")
			    .style("font-family", this.options.font);

			//X.Y좌표 속성
			svg.selectAll(".tick").style("opacity", 0.7);

			//X.Y좌표 path(기준라인) 속성
			svg.selectAll(".axis").select("path")
			    .style("fill", "none")
			    .style("shape-rendering", "crispedges")
			    .style("stroke", "#adacac")
			    .style("stroke-width", "2px");

			//y좌표 text 위치 수정
			svg.selectAll(".y").selectAll(".tick").select("text")
			    .attr("x", -7)
			    .attr("y", function(d, i) {
			        if (d == 0) {
			            return -9;
			        }
			        return 9;
			    })
			    .text(function(d, i) {
			        return self.digits(d);
			    });

			var tw = svg.selectAll(".x").selectAll(".tick").select("text").node().getComputedTextLength();
			var tickDivide = (width - (tw * 2)) / (svg.selectAll(".x").selectAll(".tick")[0].length);
			//x좌표 text 위치 수정
			svg.selectAll(".x").selectAll(".tick").select("text")
			    .style("text-anchor", "start")
			    .attr("x", function(d, i) {
			    	var translate = d3.transform(d3.select(this.parentNode).attr("transform")).translate;
					if(translate[0] == self.options.margin.left) {
						return 1;
					} else if(i != 0 && translate[0] < 35) {
						//$(".x .tick:first").children("text").hide();
						return -13;
					} else if(translate[0] == width) {
						return -28;
					}
					return -13;
				})
			    .attr("y", 7)
			    .text(function(d, i) {
			        if (self.options.ticksX) {
			            var chk = (i / self.options.ticksX);
			            if (chk.toString().indexOf(".") > 0) {
			                return;
			            }
			        }
			        if ((i == 0 && sdate == edate) || (i == svg.selectAll(".x").selectAll(".tick").size() - 1 && sdate == edate)) {
			            return;
			        }
			        if (self.options.dateFormat) {
			            var date = parseDate(d.toString());
			            return formatDate(date);
			        }
			        return d;
			    });
			
			//x,y 좌표 text 스타일
			svg.selectAll(".tick").select("text")
			    .style("color", this.options.fontColor)
			    .style("font-family", this.options.font)
			    .style("font-size", this.options.fontSize + "px");

			
			var crosshair_y = {};
			data.forEach(function(info, i) {
				var name = info.name;
				var date = info.date;
				var value = info.value;
				if(!crosshair_y[date]) {
					crosshair_y[date] = {};
				}
				crosshair_y[date][name] = value;
		    });
			if(this.options.tooltip.enabled) {
				d3.select(".tooltip_pop_"+this.element[0].id).remove();
				var tooltip = d3.select('body').append("div")
			    .attr("class", "tooltip_pop_"+this.element[0].id)
				.style("opacity", 0)
				.style("z-index", 10000)
				.style("visibility", "hidden")
				;
				
				//마우스 오버 crosshair 
				/*var focus = svg.append('g').style('display', 'none');
			    focus.append('line')
			    .attr('class', 'focusLineX')
			    .style('fill', "none")
			    .style('stroke', "#fff")
			    .style('stroke-width', 0.7)
			    ;*/
				//svg.selectAll(".layer")
				//.attr("opacity", 1)
				//d3.select(this.element.selector)
				svg.selectAll(".layer")
				.attr("opacity", 1)
			    .on("mouseover", function(d, i) {
			        svg.selectAll(".layer").transition()
		            .duration(250)
		            .attr("opacity", function(d, j) {
		                return j != i ? 0.6 : 1;
		            });
			        //focus.style('display', null); 
			    })
			    .on("mouseout", function(d, i) {
			        svg.selectAll(".layer").transition().duration(250).attr("opacity", "1");
			        //tooltip.style('display', "none"); 
			        tooltip.style("visibility", "hidden");
			        //focus.style('display', 'none'); 
			    })
			    .on("mousemove", function(d, i) {
				
			        var mouse = d3.mouse(this)[0];
			        mouse += 5
			        var leftEdges = x.range();
			        var width = x.rangeBand();
		            var interval = (leftEdges[1] - leftEdges[0]) / 2;
		            var j;
		            for(j=0; mouse > (leftEdges[j] + width); j++) {}
		            var date;
		            if(mouse < (leftEdges[j] - 2)) {
		            	date = x.domain()[j-1];
		            } else {
		            	date = x.domain()[j];
		            }
		            //focus.style('display', null); 
		            /*vertical.style('display', null); 
			        vertical.attr('x1', mouse).attr('y1', height)
			                .attr('x2', mouse).attr('y2', self.options.margin.top);
			        */ 
		            if(date == undefined) {
		            	return;
		            }
		            var cx = x(date)/* + self.options.margin.left*/;
		            var tip_y = [];
		            var yArray = [];
		            for(var name in crosshair_y[date]) {
		            	var obj = {};
		            	var info = {};
		            	data.forEach(function(obj, k) {
		            		if(obj.date == date && obj.name == name) {
		            			info = obj;
		            			return false;
		            		}
		            	});
		            	var tool_count = crosshair_y[date][name] == 0 ? 0 : (crosshair_y[date][name]);
		            	yArray.push({name : name, value : tool_count, color : info.color});
		            }
		            
//		            focus.select('.focusLineX')
//	                .attr('x1', cx).attr('y1', height)
//	                .attr('x2', cx).attr('y2', 0);
		            //yArray.date = date;
		            //yArray = yArray.sort(self.sort);
		            
		            var tooltip_offset = $(self.element.selector).offset();
		            
		            var tooltip_left;
		            tooltip_left = Math.max(0, d3.event.pageX - tooltip_offset.left + 30 + (self.options.tooltip.x));
		            tooltip_top = Math.max(0, d3.event.pageY + ((tooltip_offset.top - d3.event.pageY) / 2) - 10 + (self.options.tooltip.y));
		            var tooltip_style = {
			        	 left: tooltip_left + 'px',
			        	 top: tooltip_top + 'px'
		            }
		            
		            if(self.options.tooltip.css) {
			            for ( var key in self.options.tooltip.css) {
			            	tooltip_style[key] = self.options.tooltip.css[key];
						}
		            }
		            
		            var tooltip_html;
		            if(self.options.tooltip.useHtml) {
		            	tooltip_html = self.options.tooltip.html(yArray);  
		            } else {
			            var html = '<p style="font-size:14px; padding-left:10px;">'+(date)+'</p><ul style="list-style:none;padding-left:2px;">';
						for(var j = ((yArray.length) - 1) ; j >= 0; j--) {
							var obj = yArray[j];
							if(obj.name || obj.value) {
								var val = obj.value;
								val = self.digits(val);
								html += '<li style="padding:2px 10px;">'+
								'<span style="color:'+obj.color+'; padding-right:5px;font-size:10px;">●</span>'+
								'<span style="margin-right:30px;">'+obj.name+'</span>'+
								'<strong style="float:right;">'+ val + self.options.tooltip.suffix + '</strong>'+
								'</li>';
							}
						}
						html += '</ul>';
						tooltip_html = html;
		            }
		            //tooltip.style('display', null);
		            tooltip.style("visibility", "visible");
		            tooltip.transition().duration(200).style("opacity", 0.9);
		            tooltip.html(tooltip_html).style(tooltip_style);
		            
		            var width = Number(tooltip.style("width").replace("px", '')) + 30;
		            tooltip.style("width", width+"px");
		            
		            
			    })
			    ;
			}
			
			
		    /*
		    var vertical = d3.select(this.element.selector)
		        .append("div")
		        .attr("class", "remove")
		        .style("position", "absolute")
		        .style("z-index", "19")
		        .style("width", "1px")
		        .style("height", height + "px")
		        //.style("top", (self.options.margin.top)+"px")
		        .style("bottom", (self.options.margin.top) + (self.options.margin.bottom)+"px")
		        .style("background", "#fff");

		  d3.select(this.element.selector)
		      .on("mousemove", function(){  
		         mousex = d3.mouse(this);
		         mousex = mousex[0] + 5;
		         vertical.style("left", mousex + "px" )})
		      .on("mouseover", function(){  
		         mousex = d3.mouse(this);
		         mousex = mousex[0] + 5;
		         vertical.style("left", mousex + "px")});
			*/
		    //svg.selectAll(".layer")
		    /*svg.append('rect')
	        .attr('class', 'overlay')
	        .style('fill', 'none')
	        .style('stroke', 'none')
	        .style('pointer-events', 'all')
	        .style('cursor', 'pointer')
	        .attr('width', width)
	        .attr('height', height)
		      .on("mousemove", function(){  
		         var mx = d3.mouse(this);
		         mx = mx[0];
		         if(mx<self.options.margin.left || mx>width) {
		        	 vertical.style('display', 'none');
		        	 return;
		         } 
		         vertical.style('display', null); 
		         vertical.attr('x1', mx).attr('y1', height)
		                .attr('x2', mx).attr('y2', self.options.margin.top);
		      })
		      .on("mouseover", function(){  
		    	 var mx = d3.mouse(this);
		    	 mx = mx[0];
		    	 if(mx<self.options.margin.left || mx>width) {
		        	 vertical.style('display', 'none');
		        	 return;
		         } 
		         vertical.style('display', null); 
		         vertical.attr('x1', mx).attr('y1', height)
	                	.attr('x2', mx).attr('y2', self.options.margin.top);
		      });*/
		}
	}
	
	
	var Donut = function() {
		var self = this;
		this.type = 'donut';
		
		this.parseRnad = function() {
			var json = [];
			var keys = {};
			
			var csv = this.options.dataRand;
			var row = csv.split("\n");

			var step = 99;
			var lengthMax  = d3.max(row, function(r) {
				return r.split(",").length;
			});
			var first = row[0].split(",");
			for (var i = 0; i < first.length; i++) {
				for (var j = 0; j < row.length; j++) {
					if(row[j] == '') {
						continue;
					}
					var fields = row[j].split(",");
					var value = Number(fields[i]);
					if(isNaN(value) || typeof value != "number") {
						step = i;
					}
				}
			}
			//csv 데이터가 1개 일때
			if(lengthMax == 1) {
				if(step == 99) {
					for (var i = 0; i < row.length; i++) {
						if(row[i] == '') {
							continue;
						}
		 				var fields = row[i].split(",");
		 				var values = {};
		 				values.name = (i + 1);
	 					values.value = fields[0];
		 				json.push(values);
					}
				} else {
					var pec = 100 / row.length;
					for (var i = 0; i < row.length; i++) {
						if(row[i] == '') {
							continue;
						}
		 				var fields = row[i].split(",");
		 				var values = {};
		 				values.name = fields[0];
	 					values.value = pec;
		 				json.push(values);
					}
				}
			} else {
				for (var i = 0; i < row.length; i++) {
					if(row[i] == '') {
						continue;
					}
	 				var fields = row[i].split(",");
	 				var max = fields.length >= 2 ? 2 : 1;
	 				var values = {};
	 				for (var j = 0; j < max; j++) {
						if(step == j) {
							values.name = fields[j];
						} else {
							values.value = fields[j];
						}
	 				}
	 				json.push(values);
				}
			}

			this.options.data = json; 
		};
		
		this.draw = function() {

			if(this.options.dataRand) {
				this.parseRnad();
			}
			var options = this.options;
			var data = this.options.data;
			var svg = this.svg;

			svg.append("g").attr("class", "slices");
			svg.append("g").attr("class", "labels");
			svg.append("g").attr("class", "lines");

			var width = this.options.width - this.options.margin.left - this.options.margin.right;
			var height = this.options.height - this.options.margin.bottom - this.options.margin.top;
			var radius = Math.min(width, height) / 2;

			var pie = d3.layout.pie().sort(null).value(function(d) {
				return Number(d.value);
			});

			var arc = d3.svg.arc()
			.outerRadius(radius * this.options.outerRadius * 0.1)
			.innerRadius(radius * this.options.innerRadius * 0.1);

			var outerArc = d3.svg.arc()
			.innerRadius(radius)
			.outerRadius(radius);

			svg.attr("transform", "translate(" + width / 2 + "," + (Number(height / 2) + Number(this.options.margin.top)) + ")");

			var key = function(d){ return d.data.name; };
			var color = this.options.color;

			/* ------- PIE SLICES -------*/
			var slice = svg.select(".slices").selectAll("path.slice").data(pie(data), key);

			slice.enter()
				.insert("path")
				.style("fill", function(d) { d.data.color = color(d.data[self.options.colorKey]); return d.data.color; })
				.attr("class", "slice");

			slice.transition().duration(1000)
				.attrTween("d", function(d) {
					this._current = this._current || d;
					var interpolate = d3.interpolate(this._current, d);
					this._current = interpolate(0);
					return function(t) {
						return arc(interpolate(t));
					};
				})

			slice.exit().remove();


			function midAngle(d){
				return d.startAngle + (d.endAngle - d.startAngle)/2;
			}
			/* ------- TEXT LABELS -------*/
			if(options.labels.enabled == null || options.labels.enabled) {
				if(options.labels.center) {
					var labels = svg.select(".labels");
					labels.append("text")
					.attr("id", this.element[0].id + "textArea")
					.attr("y", options.textAreaY)
					.style("fill", options.fontColor)
					.style("font-family", options.font)
					.style("font-size", "25px")
					.style("text-anchor", "middle")
					.style("visibility", "hidden")
					.style(options.textAreaStyle)
					;
					labels.append("text")
					.attr("id", this.element[0].id + "countArea")
					.attr("y", options.countAreaY + 20)
					.style("fill", options.fontColor)
					.style("font-family", options.font)
					.style("font-size", "15px")
		            .style("text-anchor", "middle")
		            .style("font-weight", "bold")
					.style("visibility", "hidden")
					.style(options.countAreaStyle)
					;
					labels.append("text")
					.attr("id", this.element[0].id + "countSuffixArea")
					.attr("y", options.countSuffixAreaY + 20)
					.text(options.countSuffix)
					.style("font-size", "15px")
					.style("fill", options.fontColor)
					.style("visibility", "hidden")
					.style(options.countSuffixAreaStyle);
					
					var pathAnim = function(path, dir) {
			            switch(dir) {
		                case 0:
		                    path.transition()
		                        .duration(500)
		                        .ease('bounce')
		                        .attr('d', d3.svg.arc()
		                        		.innerRadius(radius * options.innerRadius * 0.1)
		                        		.outerRadius(radius * options.outerRadius * 0.1));
		                    break;

		                case 1:
		                    path.transition()
			                    .duration(500)
			                    .ease('bounce')
		                        .attr('d', d3.svg.arc()
		                        		.innerRadius(radius * options.innerRadius * 0.1)
		                    			.outerRadius(radius * options.outerRadius * 0.105));
		                    //0.01당 5px 씩
		                    break;
			            }
			        }

					var total = 0
					d3.map(data, function(d) {
						total += d.value;
					});
					var eventObj = {
		                'mouseover': function(d, i, iscall) {
		                	var obj = d.data ? d.data : d;
		                	svg.select("#"+self.element[0].id +"textArea")
		                	.style("visibility", "visible")
		                	.text(obj.name);
		                	
		                	var countAreaText = "";
		                	if(options.countSuffix == "%") {
		                		countAreaText = (obj.value / total) * 100;
		                		countAreaText = Math.round(countAreaText * Math.pow(10,options.countPoint))/Math.pow(10,options.countPoint);	//소수점 두자리
		                	} else {
		                		countAreaText = self.digits(obj.value);
		                	}
		                	svg.select("#"+self.element[0].id +"countArea")
		                	.style("visibility", "visible")
		                	.style("fill", obj.color)
		                	.text(countAreaText);
		                	
		                	svg.select("#"+self.element[0].id +"countSuffixArea")
		                	.style("visibility", "visible")
		                	.attr('x', d3.select("#"+self.element[0].id + "countArea").node().getComputedTextLength()/2)
		                	if(iscall == 0) {
		                		pathAnim(d3.select(this), 1);
		                	}
		                },
		                'mouseout': function(d, i) {
		                	svg.select("#"+self.element[0].id +"textArea").style("visibility", "hidden")
		                	svg.select("#"+self.element[0].id + "countArea").style("visibility", "hidden")
		                	svg.select("#"+self.element[0].id + "countSuffixArea").style("visibility", "hidden")
		                	pathAnim(d3.select(this), 0);
		                	if(options.firstDataShow) {
								eventObj.mouseover(data[0]);
							}
		                }
					};
					slice.on("mouseover", eventObj.mouseover)
					slice.on("mouseout", eventObj.mouseout)
					slice.on("mouseleave", eventObj.mouseout)

					slice.attr('d', d3.svg.arc().innerRadius(radius * options.innerRadius * 0.1).outerRadius(radius * options.outerRadius * 0.12));
					
					if(options.firstDataShow) {
						eventObj.mouseover(data[0]);
					}
				} else {
					var text = svg.select(".labels").selectAll("text").data(pie(data), key);
		
					text.enter()
					.append("text")
					.attr("dy", ".35em")
					.style("color", this.options.fontColor)
					.style("font-family", this.options.font)
					.style("font-size", this.options.fontSize+"px")
					.text(function(d) {
						return d.data.name;
					});
					
					function midAngle(d){
						return d.startAngle + (d.endAngle - d.startAngle)/2;
					}
		
					text.transition().duration(1000)
					.attrTween("transform", function(d) {
						this._current = this._current || d;
						var interpolate = d3.interpolate(this._current, d);
						this._current = interpolate(0);
						return function(t) {
							var d2 = interpolate(t);
							var pos = outerArc.centroid(d2);
							pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);
							return "translate("+ pos +")";
						};
					})
					.styleTween("text-anchor", function(d){
						this._current = this._current || d;
						var interpolate = d3.interpolate(this._current, d);
						this._current = interpolate(0);
						return function(t) {
							var d2 = interpolate(t);
							return midAngle(d2) < Math.PI ? "start":"end";
						};
					});
		
					text.exit().remove();
		
					/* ------- SLICE TO TEXT POLYLINES -------*/
		
					var polyline = svg.select(".lines").selectAll("polyline").data(pie(data), key);
					polyline.enter().append("polyline")
					.style("fill", "none")
					.style("stroke", this.options.linkColor)
					.style("stroke-width", this.options.linkWidth+"px")
					.style("opacity", this.options.linkOpacity)
					;
					polyline.transition().duration(1000)
					.attrTween("points", function(d){
						this._current = this._current || d;
						var interpolate = d3.interpolate(this._current, d);
						this._current = interpolate(0);
						return function(t) {
							var d2 = interpolate(t);
							var pos = outerArc.centroid(d2);
							pos[0] = radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);
							return [arc.centroid(d2), outerArc.centroid(d2), pos];
						};			
					});
					
					polyline.exit().remove();
				}
			}
			
			if(this.options.tooltip.enabled) {
				d3.select(".tooltip_pop_"+this.element[0].id).remove();
				var tooltip = d3.select("body").append("div")
				.attr("class", "tooltip_pop_"+this.element[0].id)
				.style("z-index", 100000);
				
				d3.select("#"+this.element[0].id).select(".slices").selectAll("path.slice").on("mousemove", function (d) {
					var textHtml = d.data.tooltip ? d.data.tooltip : d.data.name +" : "+ d.value + self.options.tooltip.suffix;
					var html = '<span>' + textHtml + '</span>';
					if(self.options.tooltip.useHtml) {
						d.name = d.data.name;
						d.value = d.value;
						d.color = d.data.color ? d.data.color : self.options.color(d.data[self.options.colorKey]);
						html = self.options.tooltip.html(d);
					}
					
					tooltip.transition().duration(200).style("opacity", 0.9);
					tooltip
					.html(html)
					.style("left", Math.max(0, d3.event.pageX - 50 + self.options.tooltip.x) + "px")
					.style("top", (d3.event.pageY - 50 + self.options.tooltip.y) + "px")
					.style("padding", "10px")
			        ;
					var tooltip_style = {};
					if(self.options.tooltip.css) {
			            for ( var key in self.options.tooltip.css) {
			            	tooltip_style[key] = self.options.tooltip.css[key];
						}
		            }
					tooltip.style(tooltip_style);
				})	
				.on("mouseout", function () {
				    tooltip.transition().duration(200).style("opacity", 0);
				});
			}
			
			if(this.options.click) {
				d3.select(".slices").selectAll("path.slice").style('cursor', 'pointer')
				.on("click", function(d) {
					var params = {};
					params.name = d.data.name;
					params.value = d.data.value;
					if(d.id) {
						params.id = d.id;
					}
					params.color = d.data.color ? d.data.color : self.options.color(d.data[self.options.colorKey]);
					self.options.click(params);
				});
			}
		}
	}
	
	
	var Radar = function() {
		var self = this;
		this.type = 'radar';
		
		this.parseSingleRand = function() {
			var csv = this.options.dataRand;
			var row = csv.split("\n"); 
			
			var dates = d3.map();
			var obj = {};
			
			var lengthMax  = d3.max(row, function(r) {
				return r.split(",").length;
			});
			
			var step = 999;
			var first = row[0].split(",");
			for (var i = 0; i < first.length; i++) {
				for (var j = 0; j < row.length; j++) {
					if(row[j] == '') {
						continue;
					}
					var fields = row[j].split(",");
					var value = Number(fields[i]);
					if(isNaN(value) || typeof value != "number") {
						step = i;
						break;
					} 
				}
				if(step != 999) {
					break;
				}
			}
			
			var index = 0;
			var step2 = step == 0 ? 1 : 0;
			for (var i = 0; i < row.length; i++) {
				if(row[i] == '') {
					continue;
				}
 				var fields = row[i].split(",");
 				var values = {};
 				values.name = "value";
				values.date = fields[step];
				values.value = Number(fields[step2]);
				var key = index;
				if(dates.has(values.date)) {
					for ( var j in obj[name].data) {
						var child = obj[name].data[j];
						if(child.date == values.date) {
							delete obj[name].data[j];
							key = dates.get(values.date);
							index--;
							break;
						}
					}
				}
				dates.set(values.date, key);
 				var name = values.name;
 				if(!obj[name]) {
 					obj[name] = {};
 				}
 				if(!obj[name].data) {
 					obj[name].data = [];
				}
 				obj[name].data[key] = (values);
 				index++;
			}
			
			var json = [];
			for (var name in obj) {
				var node = {};
				node.name = name;
				node.data = obj[name].data;
				if(obj[name].color) {
					node.color = obj[name].color;
				}
				if(obj[name].issue) {
					node.issue = obj[name].issue;
				}
				json.push(node);
			}
			this.options.data = json;
			
		};
		
		this.parseRand = function() {
	
			var csv = this.options.dataRand;
			var row = csv.split("\n"); 
			
			var dates = d3.map();
			var obj = {};
			
			var lengthMax  = d3.max(row, function(r) {
				return r.split(",").length;
			});
			
			var step = 999;
			var first = row[0].split(",");
			for (var i = 0; i < first.length; i++) {
				for (var j = 0; j < row.length; j++) {
					if(row[j] == '') {
						continue;
					}
					var fields = row[j].split(",");
					var value = Number(fields[i]);
					if(isNaN(value) || typeof value != "number") {
						step = i;
						break;
					} 
				}
				if(step != 999) {
					break;
				}
			}

			var chg = 1;
			if(step != 999) {
				for (var i = 0; i < row.length; i++) {
					if(row[i] == '') {
						continue;
					}
					var fields = row[i].split(",");
					if(dates.has(fields[0])) {
						chg = 0;
					}
					dates.set(fields[0]);
				}
			} else {
				chg = 0;
			}
			
			for (var i = 0; i < row.length; i++) {
				if(row[i] == '') {
					continue;
				}
 				var fields = row[i].split(",");
 				var values = {};
 				if(step == 999) {
 					values.name = "value";
 					if(lengthMax == 1) {
						var value = Number(fields[0]);
						values.value = value;
						values.date = (i + 1);
 					} else {
	 					if(fields[0]) {
	 						values.date = fields[0];
	 					} else {
	 						if(dates.has(values.name)) {
	 							values.date = dates.get(values.name) + 1;
	 							dates.set(values.name, values.date);
	 						} else {
	 							values.date = 0;
	 							dates.set(values.name, 0);
	 						}
	 					}
	 					if(fields[1]) {
	 						values.value = Number(fields[1]);
	 					} else {
	 						values.value = 0;
	 					}
 					}
 				} else {
 					if(chg == 0) {
	 					values.name = fields[0];
	 					if(fields[1]) {
	 						values.date = fields[1];
	 					} else {
	 						if(dates.has(values.name)) {
	 							values.date = dates.get(values.name) + 1;
	 							dates.set(values.name, values.date);
	 						} else {
	 							values.date = 0;
	 							dates.set(values.name, 0);
	 						}
	 					}
	 					
	 					if(fields[2]) {
	 						values.value = Number(fields[2]);
	 					} else {
	 						values.value = 0;
	 					}
 					} else {
 						values.name = "value";
 						values.date = fields[0];
 						values.value = Number(fields[1]);
 					}
 				}
 				var name = values.name;
 				if(!obj[name]) {
 					obj[name] = {};
 				}
 				if(!obj[name].data) {
 					obj[name].data = [];
				}
 				(obj[name].data).push(values);
			}
			
			var json = [];
			for (var name in obj) {
				var node = {};
				node.name = name;
				node.data = obj[name].data;
				if(obj[name].color) {
					node.color = obj[name].color;
				}
				if(obj[name].issue) {
					node.issue = obj[name].issue;
				}
				json.push(node);
			}
			this.options.data = json;
			
		};
		
		this.parseJson = function() {
			
			var json = this.options.data;
			
			if(json[0].data) {
				return;
			}
			
			var map = d3.map();
			for(var i in json) {
				var d = json[i];
				if(map.has(d.name)) {
					var dmap = map.get(d.name);
					dmap.push(d);
					map.set(d.name, dmap);
				} else {
					map.set(d.name, [d]);
				}
			}
			
			var index = 0;
			var data = [];
			map.forEach(function(key) {
				var d = map.get(key);
				for(var i in d) {
					d[i].value = Number(d[i].value);
				}
				data[index++] = d;
			});
			this.options.data = data;
		};
		
		this.sort = function() {
			var data = this.options.data;
			var sortedData = [];
			for(var i in data) {
				var obj = data[i];
				var sum = 0;
				for(var j in obj) {
					var d = obj[j];
					sum += Number(d.value);
				}
				sortedData.push({name:obj[0].name, value:sum});
			}
			sortedData.sort(sort);

			var ret = [];
			for(var i in sortedData) {
				var d = sortedData[i];
				for(var j in data) {
					var obj = data[j];
					if(d.name == obj[0].name) {
						ret.push(obj);
						break;
					}
					
				}
			}
			this.options.data = ret;
			
			function sort(a,b) {
				if (a.value > b.value) {
					return -1;
				}
				if (a.value < b.value) {
					return 1;
				}
				return 0;
			};
			
			
		}
		
		this.draw = function() {

			if(this.options.data) {
				this.parseJson();
			} else if(this.options.dataCsv) {
				this.parseCsv();
			} else if(this.options.dataRand) {
				this.parseRand();
			}
			this.sort();
			
			var data = this.options.data;
			var svg = this.svg;

			var margin = this.options.margin; 
			var width = this.options.width - this.options.margin.left - this.options.margin.right;
			var height = this.options.height - this.options.margin.bottom - this.options.margin.top;

			var maxValue = 0.5,
			levels = 5,
			opacityCircles = 0.1,
			labelFactor = 1.25,
			wrapWidth = this.options.textLength, 		//The number of pixels after which a label needs to be given a new line
			opacityArea = 0.35, 	//The opacity of the area of the blob
			dotRadius = this.options.nodeSize, 			//The size of the colored circles of each blog
			opacityCircles = 0.1, 	//The opacity of the circles of each blob
			strokeWidth = 2, 		//The width of the stroke around each blob
			lineType = this.options.lineType,
			tickSuffix = this.options.tickSuffix,
			color = this.options.color;
			
			dotRadius = dotRadius ? dotRadius : 4;
			wrapWidth = wrapWidth ? wrapWidth : 60;
			lineType = lineType ? lineType : "cardinal-closed";
			this.options.linkWidth = this.options.linkWidth ? this.options.linkWidth : 0.25;
			
			//If the supplied maxValue is smaller than the actual one, replace by the max in the data
			var maxValue = Math.max(maxValue, d3.max(data, function(i) {
			    return d3.max(i.map(function(o) {
			        return o.value;
			    }))
			}));
			
			var sum = d3.sum(data, function(d) { 
				return d3.sum(d, function(o) {
					return o.value;
				});
			});

			var allAxis = (data[0].map(function(i, j) {
		        return i.date
		    })), //Names of each axis
		    total = allAxis.length, //The number of different axes
		    radius = (this.options.height / 2) - this.options.margin.bottom - this.options.margin.top - 80,
		    Format = d3.format(tickSuffix), //Percentage formatting
		    angleSlice = Math.PI * 2 / total; //The width in radians of each "slice"

			
			//Scale for the radius
			var rScale = d3.scale.linear()
			    .range([0, radius])
			    .domain([0, maxValue]);

			/////////////////////////////////////////////////////////
			//////////// Create the container SVG and g /////////////
			/////////////////////////////////////////////////////////

			var ty = (height/2) + Number(this.options.margin.top);
			//Append a g element		
			var g = svg.attr("transform", "translate(" + width / 2 + "," + ty + ")");

			/////////////////////////////////////////////////////////
			/////////////// Draw the Circular grid //////////////////
			/////////////////////////////////////////////////////////

			//Wrapper for the grid & axes
			var axisGrid = g.append("g").attr("class", "axisWrapper");

			
			if(!this.options.gridColor) {
				this.options.gridColor = "#CDCDCD";
			}
			//Draw the background circles
			axisGrid.selectAll(".levels")
			    .data(d3.range(1, (levels + 1)).reverse())
			    .enter()
			    .append("circle")
			    .attr("class", "gridCircle")
			    .attr("r", function(d, i) {
			        return radius / levels * d;
			    })
			    .style("fill", this.options.gridColor)
			    .style("stroke", this.options.gridColor)
			    .style("fill-opacity", opacityCircles)
			    //.style("filter" , "url(#glow)")
			;

			var axisLabel = 0;
			//Text indicating at what % each level is
			axisGrid.selectAll(".axisLabel")
			    .data(d3.range(1, (levels + 1)).reverse())
			    .enter().append("text")
			    .attr("class", "axisLabel")
			    .attr("x", 4)
			    .attr("y", function(d) {
			        return -d * radius / levels;
			    })
			    .attr("dy", "0.4em")
			    .style("font-family", self.options.font)
			    .style("font-size", this.options.fontSize + "px")
			    .attr("fill", this.options.fontColor)
			    .text(function(d, i) {
			    	if(tickSuffix == "%") {
			    		return axisLabel + ((100 / levels) * d) + tickSuffix;
			    	} else {
			    		return d + tickSuffix;
			    	}
			    });

			/////////////////////////////////////////////////////////
			//////////////////// Draw the axes //////////////////////
			/////////////////////////////////////////////////////////

			//Create the straight lines radiating outward from the center
			var axis = axisGrid.selectAll(".axis")
			    .data(allAxis)
			    .enter()
			    .append("g")
			    .attr("class", "axis");
			//Append the lines
			axis.append("line")
			    .attr("x1", 0)
			    .attr("y1", 0)
			    .attr("x2", function(d, i) {
			        return rScale(maxValue * 1.1) * Math.cos(angleSlice * i - Math.PI / 2);
			    })
			    .attr("y2", function(d, i) {
			        return rScale(maxValue * 1.1) * Math.sin(angleSlice * i - Math.PI / 2);
			    })
			    .attr("class", "line")
			    .style("stroke", this.options.linkColor)
			    .style("stroke-width", this.options.linkWidth + "px");

			
			//Append the labels at each axis
			axis.append("text")
			    .attr("class", "legend")
			    .attr("text-anchor", "middle")
			    .attr("dy", "0.35em")
			    .attr("x", function(d, i) {
			        return rScale(maxValue * labelFactor) * Math.cos(angleSlice * i - Math.PI / 2);
			    	/*var angle = angleSlice * i - Math.PI / 2;
			    	var pos = (radius + 50) * Math.cos(angle);

		            if (Math.PI / 2 === Math.abs(angle)) {
		                pos -= d.length / 2;
		            } else if (Math.abs(angle) > Math.PI / 2) {
		                pos -= d.length;
		            }
		            return pos;*/
			    })
			    .attr("y", function(d, i) {
			        return rScale(maxValue * labelFactor) * Math.sin(angleSlice * i - Math.PI / 2) - self.options.labels.distance;
			    	/*var angle = angleSlice * i - Math.PI / 2;
			    	return ((radius + 30)* Math.sin(angle));*/
			    })
			    .text(function(d) {
			    	if(wrapWidth < d.length) {
						return (d).substr(0, wrapWidth) + self.options.textSuffix;
					}
					return d;
			        //return d
			    })
			    .attr("fill", this.options.fontColor)
			    .style("font-family", self.options.font)
			    .style("font-size", this.options.fontSize + "px")
			    .call(wrap, wrapWidth);

			/////////////////////////////////////////////////////////
			///////////// Draw the radar chart blobs ////////////////
			/////////////////////////////////////////////////////////

			//The radial line function
			var radarLine = d3.svg.line.radial().interpolate(lineType)
			    .radius(function(d) {
			        return rScale(d.value);
			    })
			    .angle(function(d, i) {
			        return i * angleSlice;
			    });

			//Create a wrapper for the blobs	
			var blobWrapper = g.selectAll(".radarWrapper")
			    .data(data)
			    .enter().append("g")
			    .attr("class", "radarWrapper");

			//Append the backgrounds	
			blobWrapper
			    .append("path")
			    .attr("class", "radarArea")
			    .attr("d", function(d, i) {
			        return radarLine(d);
			    })
			    .style("fill", function(d, i) {
			    	if(d[0].color) {
			    		return d[0].color; 
			    	}
			        return color(i);
			    	//return "none";
			    })
			    .style("fill-opacity", opacityArea)
			    .on('mouseover', function(d, i) {
			        //Dim all blobs
			        d3.selectAll(".radarArea")
			            .transition().duration(200)
			            .style("fill-opacity", 0.1);
			        //Bring back the hovered over blob
			        d3.select(this)
			            .transition().duration(200)
			            .style("fill-opacity", 0.7);
			    })
			    .on('mouseout', function() {
			        //Bring back all blobs
			        d3.selectAll(".radarArea")
			            .transition().duration(200)
			            .style("fill-opacity", opacityArea);
			    })
			    .append("title")
   			    .text(function(d) {
			    	return d[0].name;
			    })
			    ;

			//Create the outlines	
			blobWrapper.append("path")
			    .attr("class", "radarStroke")
			    .attr("d", function(d, i) {
			        return radarLine(d);
			    })
			    .style("stroke-width", strokeWidth + "px")
			    .style("stroke", function(d, i) {
			    	if(d[0].color) {
			    		return d[0].color; 
			    	}
			        return color(i);
			    })
			    .style("fill", "none")
			    //.style("filter" , "url(#glow)")
			;

			//Append the circles
			blobWrapper.selectAll(".radarCircle")
			    .data(function(d, i) {
			        return d;
			    })
			    .enter().append("circle")
			    .attr("class", "radarCircle")
			    .attr("r", dotRadius)
			    .attr("cx", function(d, i) {
			        return rScale(d.value) * Math.cos(angleSlice * i - Math.PI / 2);
			    })
			    .attr("cy", function(d, i) {
			        return rScale(d.value) * Math.sin(angleSlice * i - Math.PI / 2);
			    })
			    .style("fill", function(d, i, j) {
			    	if(d.color) {
			    		return d.color; 
			    	}
			        return color(j);
			    })
			    .style("fill-opacity", 0.8);

			/////////////////////////////////////////////////////////
			//////// Append invisible circles for tooltip ///////////
			/////////////////////////////////////////////////////////

			//Wrapper for the invisible circles on top
			var blobCircleWrapper = g.selectAll(".radarCircleWrapper")
			    .data(data)
			    .enter().append("g")
			    .attr("class", "radarCircleWrapper");

			//Append a set of invisible circles on top for the mouseover pop-up
			blobCircleWrapper.selectAll(".radarInvisibleCircle")
			    .data(function(d, i) {
			        return d;
			    })
			    .enter().append("circle")
			    .attr("class", "radarInvisibleCircle")
			    .attr("r", dotRadius * 1.5)
			    .attr("cx", function(d, i) {
			        return rScale(d.value) * Math.cos(angleSlice * i - Math.PI / 2);
			    })
			    .attr("cy", function(d, i) {
			        return rScale(d.value) * Math.sin(angleSlice * i - Math.PI / 2);
			    })
			    .style("fill", "none")
			    .style("pointer-events", "all")
			    .on("mouseover", function(d, i) {
			        newX = parseFloat(d3.select(this).attr('cx')) - 10;
			        newY = parseFloat(d3.select(this).attr('cy')) - 10;

			        tooltip
			            .attr('x', newX)
			            .attr('y', newY)
			            .text(d.value)
			            .transition().duration(200)
			            .style('opacity', 1);
			    })
			    .on("mouseout", function() {
			        tooltip.transition().duration(200)
			            .style("opacity", 0);
			    });

			//Set up the small tooltip for when you hover over a circle
			var tooltip = g.append("text")
			    .attr("class", "tooltip")
			    .style("opacity", 0);

			/////////////////////////////////////////////////////////
			/////////////////// Helper Function /////////////////////
			/////////////////////////////////////////////////////////

			//Taken from http://bl.ocks.org/mbostock/7555321
			//Wraps SVG text	
			function wrap(text, width) {
			    text.each(function() {
			        var text = d3.select(this),
			            words = text.text().split(/\s+/).reverse(),
			            word,
			            line = [],
			            lineNumber = 0,
			            lineHeight = 1.4, // ems
			            y = text.attr("y"),
			            x = text.attr("x"),
			            dy = parseFloat(text.attr("dy")),
			            tspan = text.text(null).append("tspan").attr("x", x).attr("y", y).attr("dy", dy + "em");

			        while (word = words.pop()) {
			            line.push(word);
			            tspan.text(line.join(" "));
			            if (tspan.node().getComputedTextLength() > width) {
			                line.pop();
			                tspan.text(line.join(" "));
			                line = [word];
			                tspan = text.append("tspan").attr("x", x).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
			            }
			        }
			    });
			} //wrap
		}
	}

	
	var BubblePie = function() {
		var self = this;
		this.type = 'bubble_pie';
		this.parseCsv = function(){

			var data = this.options.data;
			
			var map = d3.map();
			for(var i in data) {
				var d = data[i];
				var name = d.name;
				var value = d.value;
				if(map.has(name)) {
					var d = map.get(name);
					d.push(value);
					map.set(name, d);
				} else {
					var d = [value];
					map.set(name, d);
				}
			}

			var result = [];
			for(var key in map["_"]) {
				var d = [key, map["_"][key]];
				result.push(d);
			}
			this.options.data = result;
		}
		
		this.draw = function() {
			if(this.options.dataCsv) {
				this.parseCsv();
			} else if(this.options.dataRand) {
				this.parseRnad();
			} else {
				this.parseCsv();
			}
			
			var data = this.options.data;
			var svg = this.svg;

			var width = this.options.width - this.options.margin.left - this.options.margin.right;
			var height = this.options.height - this.options.margin.top - this.options.margin.bottom;
			var color = this.options.color;
			var nodePadding = this.options.nodePadding;
			if(!nodePadding) {
				nodePadding = 1.5;
			}
			var bubble = d3.layout.pack()
			.value(function(d) { return d3.sum(d[1]); })
			.sort(null)
			.size([width, height])
			.padding(nodePadding),
		    arc = d3.svg.arc().innerRadius(0),
		    pie = d3.layout.pie();
			
			var svg = this.svg;
			svg.attr("class", "bubble")
			.attr("transform", "translate(" + this.options.margin.left + ", " + this.options.margin.top + ")")
			;
			
			var nodes = svg.selectAll("g.node").data(bubble.nodes({children: data}).filter(function(d) { return !d.children; }));
			nodes.enter().append("g")
		    .attr("class", "node")
		    .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
		    .on("click", function(d) {
		    	self.options.click(d);
		    });
			
			if(this.options.click) {
				nodes.style("cursor", "pointer")
			}
			
			var arcGs = nodes.selectAll("g.arc").data(function(d) {
		      return pie(d[1]).map(function(m) { m.r = d.r; return m; });
		    });
			
			var arcEnter = arcGs.enter().append("g").attr("class", "arc");
			arcEnter.append("path")
		    .attr("d", function(d) {
		    	arc.outerRadius(d.r);
		    	return arc(d);
		    })
		    .style("fill", function(d, i) { return color(i); });
			
			arcEnter.append("text")
		    .attr({
		    	x: function(d) { arc.outerRadius(d.r); return arc.centroid(d)[0]; },
		    	y: function(d) { arc.outerRadius(d.r); return arc.centroid(d)[1]; },
		    	dy: "0.35em"
		    })
		    .style("text-anchor", "middle")
		    .style("color", this.options.fontColor)
	    	.style("font-family", this.options.font)
	    	.style("font-size", this.options.fontSize+"px")
		    .text(function(d) { return d.value; })
		    ;
			
			if(this.options.labels.over) {
				arcEnter.selectAll("text").style('display', 'none');
				nodes.on("mouseover", function() {
					arcEnter.select("text").transition().duration(200).style("display", null);
			    })
			    .on("mouseout", function() {
					arcEnter.select("text").transition().duration(200).style("display", "none");
			    });
			}
			
			var labels = nodes.selectAll("text.label").data(function(d) { return [d[0]]; });
			labels.enter().append("text")
		    .attr({
		    	"class": "label",
		      	dy: "0.35em"
		    })
		    .style("text-anchor", "middle")
		    .style("color", this.options.fontColor)
	    	.style("font-family", this.options.font)
	    	.style("font-size", this.options.fontSize+"px")
		    .text(String);
		}
	};
	
	//지도
	var Map = function() {
		var self = this;
		this.type = 'map';
		this.parseGroup = function() {
			var data = this.options.data;
			
			var result = {};
			var list = [];
			var list2 = [];
			var group = d3.map();
			var groups = d3.map();
			
			var area = d3.map();
			for(var i in data) {
				var d = data[i];
				if(d.where) {
					area.set(i, d);
				}
				
				var key = d.x+'`'+d.y;
				var obj = {};
				if(group.has(key)) {
					obj.id = i;
					for(var dkey in d) {
						var data_key = dkey;
						if(dkey == "x" || dkey == "y") {
							data_key = 'p'+dkey;
						}
						obj[data_key] = d[dkey];
					}
					if(!result[key]) {
						result[key] = [];
					}
					result[key].push(obj);
					groups.set(key, obj);
				} else {
					list.push(d);
					list2.push(d);
					group.set(key, d);
				}
			}
			
			var list3 = [];
			for(var i in list2) {
				var l = list2[i];
				var key = l.x+'`'+l.y;
				if(groups.has(key)) {
					var last = group.get(key);
					var obj = {};
					for(var dkey in last) {
						var data_key = dkey;
						if(dkey == "x" || dkey == "y") {
							data_key = 'p'+dkey;
						}
						obj[data_key] = last[dkey];
					}
					result[key].push(obj);
					list.splice(i, 1);
				} else {
					list3.push(l);
				}
			}
			this.options.data = {};
			this.options.data.list = list3;
			this.options.data.group = result;
			
			//area
			var area2 = area;
			var area3 = [];
			area.forEach(function(key, i) {
				var d = area.get(key);
				area2.forEach(function(key2, j) {
					var dd = area2.get(key2);
					if(d.where != dd.where) {
						if(d.fillColor && d.fillColor == dd.fillColor) {
							if((!d.fillOpacity) || (d.fillOpacity && d.fillOpacity == dd.fillOpacity)){ 
								d.where = d.where  + ',' + dd.where;
								area2.remove(key2);
							} 
						}
					}
				});
				area3.push(d);
			});
			this.options.data.area = area3;
		};
		
		this.draw = function() {

			var data = this.options.data;
			this.parseGroup();
			
			if(typeof google === 'undefined') {
				var param = {
					key : 'AIzaSyAZFGCckCO_YJsQCjzVA3Pk62-dP6rPH1c'
				}
				this.key = ['AIzaSyBMsv5tYu6FqLidWEPI2vdlDMAiI_ewwsg', 'AIzaSyAq955nn3wJ8cRTEzwMY8wqN2vWcfKmXHc'];
				this.count = 0;
				this._call(param);
			} else {
				//self._darwChart();
				self._draw();
			}
		}
		this._call = function(param) {
			$.ajax({
		        url: 'https://maps.googleapis.com/maps/api/js',
		        data : param,
		        dataType: 'script',
		        timeout: 30000, 
		        success: function () {
		        	//self._darwChart();
		        	self._draw();
		        },
		        error: function (e) {
		        	self._call(self.key[count]);
		        	self.count++;
		        }
		    });
		}
		

		this.uniqId = function() {
		  return Math.round(new Date().getTime() + (Math.random() * 100));
		}
		this._draw = function() {
			var options = this.options;
			var data = options.data.list;
			var groups = options.data.group;
			
			options.padding = 80 + options.padding;
			var padding = options.padding;
			
			var svg = d3.select(this.element.selector)
			.style("width", this.options.width + "px")
        	.style("height", this.options.height + "px")
        	.style("background-color", this.options.backgroundColor)
        	//.style("overflow", "hidden")
        	.style("margin-top", this.options.margin.top+"px")
        	.style("margin-bottom", this.options.margin.bottom+"px")
        	.style("margin-left", this.options.margin.left+"px")
        	.style("margin-right", this.options.margin.right+"px");

			var arr_max = [];
			var arr_min = [];
			arr_max.push(d3.max(data, function(d) {
				return Number(d.value);
			}));
			arr_min.push(d3.min(data, function(d) {
				return Number(d.value);
			}));
			for(var key in groups) {
				var group = groups[key];
				arr_max.push(d3.max(group, function(d) {
					return Number(d.value);
				}));
				arr_min.push(d3.min(group, function(d) {
					return Number(d.value);
				}));
			};
			var max = d3.max(arr_max);
			var min = d3.min(arr_min);
			options.max = max;
			options.min = min;
			
			self.svg = svg;
			var uniqId = self.uniqId();
			self.uniqId = uniqId;
			var CustomOverlay = function(options) {
				d3.select(svg.select(".cloud"+uniqId).parentNode).remove();
				this._element = $('<div class="ktext_'+uniqId+'" style="position:absolute;left:0;top:0;text-align:center;"></div>' + 
								  '<div class="kwordle_'+uniqId+'" style="position:absolute;left:0;top:0;text-align:center;"></div>');

				self.layer = d3.select(this._element[0]);
				self.layerCloud = d3.select(this._element[1]);
				for(var key in groups) {
			    	self.layerCloud.append("svg")
	            	.attr("class", "cloud_"+uniqId)
	            	.attr("id", key.replace(/\./gi, ''))
	            	;
			    }
				this.setPosition(options.position);
			    this.setMap(options.map || null);
			};

			//CustomOverlay.prototype = new naver.maps.OverlayView();
			CustomOverlay.prototype = new google.maps.OverlayView();
			CustomOverlay.prototype.constructor = CustomOverlay;

			CustomOverlay.prototype.setPosition = function(position) {
			    this._position = position;
			};

			CustomOverlay.prototype.getPosition = function() {
			    return this._position;
			};

			CustomOverlay.prototype.onAdd = function() {
				
				if(map.getZoom() < 8) {
					map.setZoom(8);
				}
				
			    var overlayLayer = this.getPanes().overlayLayer;
			    this._element.appendTo(overlayLayer);
			};
			
			var level = 0;
			CustomOverlay.prototype.draw = function() {
			    if (!this.getMap()) {
			        return;
			    }			
			    //map.setZoom(options.zoom);
			    if(map.getZoom() < 8) {
					$(".marker"+uniqId).hide();
					$(".cloud"+uniqId).hide();
					return;
				} else {
					$(".marker"+uniqId).show();
					$(".cloud"+uniqId).show();
				}
			    if(level == 0) {
			    	options.zoom = options.zoom ? options.zoom : map.getZoom();
			    	level++;
			    }
			    var position = this.getPosition();
			    self.drawText(data);
			    for(var key in groups) {
			    	self.drawCloud(groups[key], position, key.replace(/\./gi, ''));
			    }
			    
			    var projection = this.getProjection(),
			        position = this.getPosition(),
			        pixelPosition = projection.fromLatLngToDivPixel(position);
			   
			    self.projection = projection;
			    svg.selectAll(".marker"+uniqId)
			    .each(function(d) {
			    	var p = new google.maps.LatLng(d.x, d.y);
			    	p = projection.fromLatLngToDivPixel(p);
			    	var tnode = d3.select(this)
	                .style("left", (p.x - padding) + "px")
	                .style("top", (p.y - padding) + "px");
		            return tnode;
			    });
			    
			};

			CustomOverlay.prototype.onRemove = function() {
			    var overlayLayer = this.getPanes().overlayLayer;
			    this._element.remove();
			    this._element.off();
			};

			if(data.length <= 0 && !groups) {
				options.zoom = options.zoom ? options.zoom : 10;
			}			

			var coordinates = [];
			d3.map(data, function(d) {
				coordinates.push(new google.maps.LatLng(d.x, d.y));
			});
			for ( var key in groups) {
				key = key.split("`");
				coordinates.push(new google.maps.LatLng(key[0], key[1]));
			}
			
			var bounds = new google.maps.LatLngBounds();
			for (var i=0; i < coordinates.length; i++) {
				bounds.extend(coordinates[i]);
			}
			var position = new google.maps.LatLng(bounds.getCenter().lat(), bounds.getCenter().lng());
			
			
			var zoomOption = {
				zoomControl : options.zoomUse,
				scrollwheel : options.zoomUse,
				disableDoubleClickZoom : options.zoomUse
			}
			zoomOption.gestureHandling = options.zoomUse ? 'greedy' : 'none';
				
			var map = new google.maps.Map(d3.select(this.element.selector).node(), zoomOption);
			
			//데이터가 1개씩만 있는경우 지도 줌 값 고정
			if((data.length == 1 && Object.keys(groups).length == 0) || 
				(data.length == 0 && Object.keys(groups).length == 1)) {
				options.zoom = options.zoom ? options.zoom : 15;
				var ux, uy;
				if (data.length == 0 && Object.keys(groups).length == 1) {
					var gxy = Object.keys(groups)[0].split("`");
					ux = gxy[0];
					uy = gxy[1];
				} else {
					ux = data[0].x;
					uy = data[0].y;
				}
				position = new google.maps.LatLng(ux, uy);
			}
			
			//데이터 텍스트 표시
			var overlay = new CustomOverlay({
			    map: map,
			    position : position
			});
			
			if(options.zoom) {
				map.setZoom(options.zoom);
				map.setCenter(position);
			} else {
				map.fitBounds(bounds);
			}

			if(options.center) {
				position = new google.maps.LatLng(self.options.center[0], self.options.center[1]);
				map.setCenter(position);
				overlay.setCenter(position);
			}
			options.zoom = options.zoom ? options.zoom : map.getZoom();
			options.zoomChg = options.zoom;
			
		    var zoomWidth = options.width;
		    var zoomHeight = options.height;
			map.addListener('zoom_changed', function() {
				zoom_text();
				options.zoomChg = map.getZoom();
			});
			
			function zoom_text() {
				svg.selectAll(".marker"+uniqId).each(function(d) {
			    	var text = d3.select(this).select("text");
			    	var size = Number(text.style("font-size").replace("px", ''));
			    	if(options.zoom == map.getZoom()) {
			    		size = d.fontsize;
			    	} else {
				    	if(options.zoomChg > map.getZoom()) {
				    		if(size > 7) {
				    			size = size - 5;
				    		}
				    	} else if(options.zoomChg < map.getZoom()){
				    		size = size + 5;
				    		if(d.fontsize < size) {
				    			size = d.fontsize;
				    		}
				    	}
			    	}
			    	text.style("font-size", size + "px")
			    	.attr("x", function(dd) {
		            	var pre = 0;
		            	if(dd.name.length >= 4 && size > 40) {
		            		pre = (size - 19) * (dd.name.length - 4);
		            	} else if(dd.name.length < 4 && size > 55) {
		            		pre = (size - 50);
		            	}
		            	return padding + options.x + pre;
		            });
			    });
			}
			google.maps.event.trigger(map,'resize');

			//데이터 영역표시
			if(options.areaUse) {
				var address = '';
				if(this.options.data.area.length>0) {
					var area = this.options.data.area;
					var query = [];
					for(var i in area) {
						var q = {};
						var a = area[i];
						q.where = a.where;
						if(a.fillColor.indexOf("#") < 0) {
							a.fillColor = $c.name2hex(a.fillColor);
						}
						q.style = {
							fillColor : a.fillColor, 
							fillOpacity : a.fillOpacity
						};
						query.push(q);
						if(i == 0) {
							address = (a.where).split(",")[0];
						}
					}
					self.options.query = query;
				}
				var tablesLayer = self.getQuery();
				var layer = new google.maps.FusionTablesLayer({
					map: map,
				    query: tablesLayer.query,
				    styles: tablesLayer.styles
				});
				if(self.options.center == null) {
					var geocoder = new google.maps.Geocoder();
			        geocoder.geocode({'address': address}, function(results, status) {
						if (status === 'OK') {
							map.setCenter(results[0].geometry.location);
						/*var marker = new google.maps.Marker({
						  map: map,
						  position: results[0].geometry.location
						});*/
						} else {
							alert('Geocode was not successful for the following reason: ' + status);
						}
			        });
				}
			}
			
		}
		
		this.getQuery = function() {
			var query = self.options.query;
			
			var ret = {};
			ret.query = {};
			ret.styles = [];
			ret.query.select = 'geometry';
			ret.query.from = '18JvQdwJKCX04DxSgwLjaLBtKt0zFp529gLYrNk2q';
			if($.isArray(query)) {
				var sgg_sql= "sgg_nm IN (";
				for(var i in query) {
					var q = query[i];
					if(q.where) {
						var where = (q.where).split(",");
						var where_sql = "sgg_nm IN (";
						for(var j in where) {
							if(!where[j]) continue;
							sgg_sql += "'"+$.trim(where[j])+"'";
							where_sql += "'"+$.trim(where[j])+"'";
							if(j < (where.length -1) || i < (query.length -1)) {
								sgg_sql += ',';
							}
							if(j < (where.length -1)) {
								where_sql += ',';
							}
						}
						where_sql += ")";
						q.where = where_sql;
					}
					if(q.style) {
						q.polygonOptions = q.style;
						delete q.style;
					}
				}
				sgg_sql += ')';
				ret.query.where = sgg_sql;
				ret.styles = query;
			} else {
				if(!query) {
					return ret;
				}
				if(query.where) {
					var where = (query.where).split(",");
					var sgg_sql = "sgg_nm IN (";
					for(var i in where) {
						sgg_sql += "'"+$.trim(where[i])+"'";
						if(i < (where.length - 1)) {
							sgg_sql += ',';	
						}
					}
					sgg_sql += ')';
					ret.query.where = sgg_sql;
				}
				if(query.style) {
					var style = query.style;
					ret.styles.push({polygonOptions : style});
				}
			}
			return ret;
		}
		
		this.drawCloud = function(group, position, key) {
			if(group.length <= 0) {
				return;
			}
			
			var options = this.options;
            var padding = options.padding;
            var fontRange = options.fontRange;
            var fill = d3.scale.category20();
            var max = options.max;
            var min = options.min;
            
            if (!this.options.opacityDomain) {
                this.options.opacityDomain = [0.6, 0.65, 0.75, 0.85, 0.95, 1];
            }
            var opacity = [];
            for (var j in this.options.opacityDomain) {
                var op = this.options.opacityDomain[j];
                if (j == 0) {
                    opacity.push(min);
                    continue;
                }
                if (j == this.options.opacityDomain.length - 1) {
                    opacity.push(max);
                    continue;
                }
                opacity.push(max * op);
            }

            var s = d3.scale.linear().domain([min, max]).range(fontRange);
            var o = d3.scale.linear().domain(opacity).range(this.options.opacityDomain);
            var zw = d3.scale.linear().domain([14, 8]).range([(options.width/2), 170]);
            var zh = d3.scale.linear().domain([14, 8]).range([(options.height/2), 90]);
            var w = options.zoomChg > 14 ? (options.width/2) : zw(options.zoomChg);
        	var h = options.zoomChg > 14 ? (options.height/2) : zh(options.zoomChg);

        	var textPadding = this.options.textPadding ? this.options.textPadding : 2;
            d3.layout.cloud().size([w, h])
                .timeInterval(20)
                .words(group)
                .padding(textPadding)
                .fontSize(function(d) {
                    d.fontsize = s(+d.value);
                    return d.fontsize;
                })
                .text(function(d) {
                    return d.name;
                })
                .rotate(function() {
                    return ~~(Math.random() * 2) * self.options.rotate;
                })
                .font(self.options.font)
                .on("end", draw)
                .start();
            
            function draw(words) {
            	self.svg.select("svg[id='"+key+"']").select("g").remove();
            	self.svg.select("svg[id='"+key+"']")
                	//.append("svg")
                	.attr("class", "cloud"+self.uniqId)
                    .style("position", "absolute")
                    .style("margin", "0 auto")
                    .style("z-index", 4)
                    .attr("width", w)
                    .attr("height", h)
                    .style("text-align", "center")
                    .append("g")
                    .attr("transform", "translate(" + [(w) >> 1, (h) >> 1] + ")")
                    .selectAll("text")
                    .data(words)
                    .enter().append("text")
                    .style("font-size", function(d) {
                        d.fontsize = s(d.value);
                        return d.fontsize + "px";
                    })
                    .style("font-family", self.options.font)
                    .style("font-weight", 600)
                    .style("stroke", function(d) {
		            	if(options.nodeColor) {
		            		d.color = options.nodeColor;
		            	}
		            	if(!d.color) {
		          		  d.color = options.color(d[self.options.colorKey]);
		          	  }
		          	  return d.color; 
		            })
		            .style("stroke-width", options.strokeWidth)
                    .style("fill", function(d, i) {
                        if (!d.color) {
                            d.color = options.color(d[self.options.colorKey]);
                        }
                        return d.color;
                    })
                    .style("fill-opacity", function(d) {
                        return o(d.value);
                    })
                    .attr("text-anchor", "middle")
                    .attr("transform", function(d) {
                        return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
                    })
                    .text(function(d) {
                        return d.name;
                    })
                    .on("click", function(d) {
                        var params = {};
                        params.category = d.category;
                        params.color = d.color;
                        params.id = d.id;
                        params.opacity = d.opacity;
                        params.rotate = d.rotate;
                        params.value = d.size;
                        params.name = d.name;
                        params.x = d.x;
                        params.y = d.y;
                        self.click(params);
                    });
                if (self.projection) {
                    //줌 아웃 시 클라우드 위치가 계속 변경되는 문제 제어하기 위한 margin 값
                    var top_margin = options.zoomChg < options.zoom ? 38 - options.zoomChg : 0;
                    var p = new google.maps.LatLng(group[0].px, group[0].py);
                    p = self.projection.fromLatLngToDivPixel(p);
                    self.svg.select("svg[id='"+key+"']")
                        .style('left', (p.x - (padding)) + "px")
                        .style('top', (p.y - (padding) + top_margin) + "px");
                }
            }
            d3.layout.cloud().stop();
		}

		this.pad = function(n, width) {
			n = n + '';
			return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;
		}
		
		this.drawText = function(data, position) {
			var options = this.options;
			var width = options.width / 2;
            var height = options.height / 2;
            var fill = d3.scale.category20();
            var max = options.max;
            var min = options.min;
            
            var s = d3.scale.linear().domain([min, max]).range(this.options.fontRange);
            var padding = options.padding;
            var marker = self.layer.selectAll("svg")
	            .data(data)
	            .enter().append("svg")
	            .style("position", "absolute")
	            .attr("class", "marker"+self.uniqId);
	            //.style("z-index", 4);

            marker.append("text")
            .attr("class", "text")
            .style("text-anchor", "middle")
            .style("stroke", function(d) {
            	if(options.nodeColor) {
            		d.color = options.nodeColor;
            	}
            	if(!d.color) {
          		  d.color = options.color(d[self.options.colorKey]);
          	  }
          	  return d.color; 
            })
            .style("fill", function(d) {
            	if(options.nodeColor) {
            		d.color = options.nodeColor;
            	}
            	if(!d.color) {
          		  d.color = options.color(d[self.options.colorKey]);
          	  }
          	  return d.color; 
            })
            .style("fill-opacity", function(d) { return d.opacity; })
            .style("stroke-width", options.strokeWidth)
            .style("font-size", function(d) {
            	d.fontsize = s(d.value);
                return d.fontsize + 'px';
            })
            .text(function(d) {
                return d.name;
            })
            .attr("x", function(d) {
            	var pre = 0;
            	if(d.name.length >= 4 && d.fontsize > 40) {
            		pre = (d.fontsize - 19) * (d.name.length - 4);
            	} else if(d.name.length < 4 && d.fontsize > 55) {
            		pre = (d.fontsize - 50);
            	}
            	return padding + options.x + pre;
            })
            .attr("y", function(d) {
            	return padding + options.y;
            });
            
            marker.attr("width", function(d) {
            	return d.fontsize * d.name.length + padding;
            });
		}
		
	};
	
	
	var TreeMap = function() {
		var self = this;
		this.type = 'treemap';
		this.parseRand = function() {
			
			var json = {};
			var keys = {};
			
			var csv = this.options.dataRand;
			var row = csv.split("\n"); 
			
			var index = 0;
			for (var i = 0; i < row.length; i++) {
				if(row[i] == '') {
					continue;
				}
				var fields = row[i].split(",");
				var obj = {};
				
				if(index == 0) {
					
					obj.name = fields[0];
					obj.value = 0;
					obj.id = index;
					obj.children = [];
					json = obj;
				} else {
					
					obj.name = fields[0];
					if(fields[1]) {
						obj.value = fields[1];
					}
					obj.id = index;
					obj.parent = 0;
					obj.children = [];
					json.children.push(obj);
				}
				index++;
			}
			this.options.data = json;
			
		};
		
		this.parseCsv = function() {
			
			var json = {};
			var keys = {};
			
			var csv = this.options.dataCsv;
			var row = csv.split("\n"); 
			
			var key = row[0].split(",");
			for (var i = 0; i < key.length; i++) {
				keys[key[i]] = i;
			}
			for (var i = 1; i < row.length; i++) {
				if(row[i] == '') {
					continue;
				}
				var fields = row[i].split(",");
				
				var obj = {};
				
				for ( var key in keys) {
					var value = fields[keys[key]];
					if(value && (key == "size" || key == "value")) {
						value = Number(value);
					}
					if(key == "parent") {
						continue;
					}
					obj[key] = value;
				}
				var iParent = keys["parent"];
				if(fields[iParent]) {
					obj.children = [];
					if(fields[iParent] == json.id) {
						(json.children).push(obj);
					} else {
						for (var j = 0; j < (json.children).length; j++) {
							var child_id = json.children[j].id;
							if(fields[iParent] == child_id) {
								if(json.children[j].children) {
									json.children[j].children.push(obj);
								} else {
									json.children[j].children = [];
								}
							} else {
								//parent_child 2depth이상일때 재귀 호출되는 부분 개발
								if(json.children[j].children) {
									self._parseCsv(obj, json.children[j], fields[iParent], child_id);
								}
							}
						}
					}
				} else {
					json.children = [];
					$.extend(true, json, obj);
				}
			}
			this.options.data = json;
		};
		
		this._parseCsv = function(obj, json, parent_id, child_id) {
			for (var i = 0; i < (json.children).length; i++) {
				var child_id = json.children[i].id;
				if(parent_id == child_id) {
					if(json.children[i].children) {
						json.children[i].children.push(obj);
					} else {
						json.children[i].children = [];
					}
				} else {
					self._parseCsv(obj, json.children[i], parent_id, child_id);
				}
			}
		}
		
		this.parseJson = function() {
			var json = this.options.data;

			var map = d3.map();
			var result = json[0];
			result.children = [];
			for(var i in json) {
				var d = json[i];
				if(result.id == d.parent) {
					result.children.push(d)
				} else {
					addChildren(d, result.children);
				}
			}
			function addChildren(d, children) {
				for(var i in children) {
					var c = children[i];
					if(c.id == d.parent) {
						if(!c.children) {
							c.children = [d];
						} else {
							c.children.push(d);
						}
					} else {
						addChildren(d, c.children);
					}
				}
			}
			
			this.options.dataCsv = null;
			this.options.data = result;
		};
		
		
		this.draw = function() {

			var svg = this.svg;
			var options = this.options;
			
			if(options.dataCsv) {
				this.parseCsv();
			} else if(options.dataRand) {
				this.parseRand();
			} else {
				this.parseJson();
			}
			
			var data = options.data;
			
			var chartWidth = options.width - options.margin.left - options.margin.right;
			var chartHeight = options.height - options.margin.bottom - options.margin.top;
			var xscale = d3.scale.linear().range([0, chartWidth]);
			var yscale = d3.scale.linear().range([0, chartHeight]);
			var headerHeight = options.headerHeight ? options.headerHeight : 16;
			var transitionDuration = 500;
			var root;
			var node;

			var minColor = "#0C8F8F";
			var minMid = GetLightestFromColor(minColor);
			var maxColor = "#FFAD08";
			var maxMid = GetLightestFromColor(maxColor);

			//var colorScale = d3.scale.linear().domain([0, 0.49999, 0.5, 1]).range([minColor, minMid, maxMid, maxColor]);
			var colorScale = options.color;

			function treeValue(d, type) {
				return d3[type](d, function(dd) {
					if(dd.children && dd.children.length > 0) {
						return treeValue(dd.children, type);
					}
					return dd.value; 
				});
			}
			var max = treeValue(data.children, "max");
			var min = treeValue(data.children, "min");
			var v = d3.scale.linear().domain([min, max]).range([0, 1]);
			
			var tmTTTimeout;

			var treemap = d3.layout.treemap()
		    .round(false)
		    .mode("squarify")
		    .size([chartWidth, chartHeight])
		    .sticky(true)
		    .value(function(d) {
		        return d.value;
		    });
			
			if(options.treeOrder == "desc") {
				treemap.sort(function(a, b) { return a.value - b.value; });
			}
			
			self.treemap = treemap;
			var chart = svg.append("svg:g")
			.attr("transform", "translate(" + options.margin.left + "," + (options.margin.top) + ")")
			;
			
			node = root = data;
			var nodes = treemap.nodes(data);
			//All nodes that are leaf nodes
		    var children = nodes.filter(function(d) {
		        return !d.children;
		    });
		    //All nodes that are parent/container nodes
		    var parents = nodes.filter(function(d) {
		        return d.children;
		    });

		    var parentCells = chart.selectAll("g.tmcell.tmparent")
	        .data(parents, function(d) {
	            return "p-" + d.id;
	        });
			
		    
		    var parentEnterTransition = parentCells.enter()
		        .append("g")
		        .attr("class", "tmcell tmparent")
		        .style("cursor", "pointer")
		        .style("font-size", "11px")
		        .on("click", function(d) {
		        	if(options.treeZoomUse) zoom(node === d ? root : d);
		        })   
		        .on("mouseover", function (d) {
		            ShowTMTooltip(d, true);
		        })
		        .on("mouseout", function (d) {
		            HideTooltip();
		        })       
		        .append("g") //svg
		        .attr("class", "tmclip")
		        .attr("width", function(d) {
		            return Math.max(0.01, d.dx);
		        })
		        //.attr("height", headerHeight);
		        .attr("height", function(d) {
		            return Math.max(0.01, d.dy);
		        });
		    
		    parentEnterTransition.append("rect")
		        .attr("width", function(d) {
		            return Math.max(0.01, d.dx);
		        })
		        //.attr("height", headerHeight)
		        .attr("height", function(d) {
		            return Math.max(0.01, d.dy);
		        })
		        .attr("class", "tmRect tmheaderBackground")
		        .style("cursor", "pointer")
				.style("stroke", "#aaa")
				.style("stroke-width", 0.3)
				.style("stroke-opacity", 0.75)
				.style("fill", function(d) {
					if(d.color) {
	            		return d.color;
	            	}
            		return "#eee";
	            });
		        ;
		    
		    var fontX = options.fontX ? options.fontX + 3 : 3;
		    var fontY = options.fontY ? options.fontY + 13 : 13;
		    var firstNodeId = null;
		    parentEnterTransition.append('text')
		        .attr("class", "tmlabel")
		        .attr("id", function(d, i) {
					d.id = d.id ? self.element[0].id+"_p_"+d.id : self.element[0].id+"_p_"+i;
					if(i == 0) {
						firstNodeId = d.id;
					}
					return d.id;
				})
		        .style("font-size", options.fontSize + "px")
				//.style("stroke", options.fontColor)
				.style("fill", function(d) {
					if(d.fontColor) { return d.fontColor; }
					return options.fontColor;
				})
		        .attr("dy", "0.3px")
				.style("stroke-width", "0")
				.style("margin", "2px")
				.style("overflow", "hidden")
				.style("text-overflow", "ellipsis")
		        .attr("transform", "translate("+fontX+", "+fontY+")")
		        .attr("width", function(d) {
		            return Math.max(0.01, d.dx);
		        })
		        .attr("height", headerHeight)
		        .text(function(d) {
		            return d.name;
		        })
		        ;

		    // update transition
		    var parentUpdateTransition = parentCells.transition().duration(transitionDuration);
		    parentUpdateTransition.select(".tmcell")
		            .attr("transform", function(d) {
		                return "translate(" + d.dx + "," + d.y + ")";
		            });
		    parentUpdateTransition.select("rect")
		            .attr("width", function(d) {
		                return Math.max(0.01, d.dx);
		            })
		            .attr("height", headerHeight)
		            .attr("dy", "0");
		    
		    parentUpdateTransition.select(".tmlabel")
		            .attr("transform", "translate(3, 13)")
		            .attr("width", function(d) {
		                return Math.max(0.01, d.dx);
		            })
		            .attr("height", headerHeight)
		            .text(function(d) {
		                return d.name;
		            });
		    
		    // remove transition
		    parentCells.exit().remove();
	
		    // create children cells
		    /* 
		      <g class="cell child" transform>
		          <svg class="clip" width="dx" height="dy">
		              <rect width="dx" height="dy" class="background" style="fill: color" ></rect>
		              <text class="label" x="dx/2" y="dy/2" dy="0.35em" text-anchor="middle" height="dy" width="dx">name</text>
		          </svg>
		      </g>
		    */
		    var childrenCells = chart.selectAll("g.tmcell.tmchild")
		            .data(children, function(d) {
		                return "c-" + d.id;
		            });
		    // enter transition
		    var childEnterTransition = childrenCells.enter()
		            .append("g")
		            .attr("class", "tmcell tmchild")
		            .on("click", function(d) {
		            	//childEnterTransition.select(".tmchild .tmlabel").style("display", "none");
		            	if(options.treeZoomUse) zoom(node === d.parent ? root : d.parent);
		            })
		            .on("mouseover", function (d) {
		                ShowTMTooltip(d, false);
		            })
		            .on("mouseout", function (d) {
		                HideTooltip();
		            })        
		            .append("g") //svg
		            .attr("class", "tmclip");
	
		    childEnterTransition.append("rect")
		            .attr("class", "background tmRect")
		            .style("cursor", "pointer")
					.style("stroke", "#aaa")
					.style("stroke-width", 0.3)
					.style("stroke-opacity", 0.75)
		            .attr("rx", 4)
		            .attr("ry", 4)
		            .on("click", options.click)
		            .style("fill", function(d) {
		            	var c;
		            	if(d.category) {
							c = self.options.color(d.category);
						} else if(d.color) {
							c = d.color;
		            	} else {
		            		c = colorScale(v(d.value));
		            	}
		            	d.color = c;
		            	return c;
		            });
		    childEnterTransition.append('text')
		            .attr("class", "tmlabel")
		            .style("font-size", (options.fontSize - 1 ) + "px")
		            .attr("id", function(d, i) {
						d.id = d.id ? self.element[0].id+"_c_"+d.id : self.element[0].id+"_c_"+i;
						return d.id;
					})
		            .attr("dy", "0")
		            .attr("text-anchor", "middle")
		            .style("display", "none") //label		            
		            .style("cursor", "pointer")
		            ;
		    
		    // update transition
		    var childUpdateTransition = childrenCells.transition().duration(transitionDuration);
		    childUpdateTransition.select(".tmcell")
		            .attr("transform", function(d) {
		                return "translate(" + d.x + "," + d.y + ")";
		            });
		    childUpdateTransition.select("rect")
		            .attr("width", function(d) {
		                return Math.max(0.01, d.dx);
		            })
		            .attr("height", function(d) {
		                return d.dy;
		            })
		    childUpdateTransition.select(".tmlabel")
		            /*.attr('x', function(d) {
		                return d.dx / 2;
		            })
		            .attr('y', function(d) {
		                return d.dy / 2;
		            })*/
		            //.attr("dy", ".35em")
		            //.style("display", "none") //label
		            .attr("text-anchor", "middle")
		            /*.text(function(d) {
		                return d.name;
		            })*/
		            .style("display", "none")
			  
		            ;
		    //

		    // exit transition
		    childrenCells.exit().remove();
		    zoom(node);
		    
		    function zoom(n) {
			    self.treemap
			        .padding([headerHeight / (chartHeight / n.dy), 2, 1, 2])
			        .nodes(n);
			    
			    // moving the next two lines above treemap layout messes up padding of zoom result
			    var kx = chartWidth / n.dx;
			    var ky = chartHeight / n.dy;
			    var level = n;
			    var prevNode = node;
			    
			    xscale.domain([n.x, n.x + n.dx]);
			    yscale.domain([n.y, n.y + n.dy]);
			    
			    var zoomTransition = chart.selectAll("g.tmcell").transition().duration(transitionDuration)
			        .attr("transform", function(d) {
			            return "translate(" + xscale(d.x) + "," + yscale(d.y) + ")";
			        })
			        .each("start", function(d, i) {
			        	d3.select("#"+d.id).style("display", "none");
			        })
			        .each("end", function(d, i) {
			        	if(d.id) {
			        		var sel = d3.select("#"+d.id);
			        		sel.style("display", "")
			        		d3text.textwrap().container(sel).align("middle").valign("middle").wrap(true).draw();
			        		if(d.id.indexOf("_c_") > 0) {
			        			var mdiffW = ((sel.select(function() { return this.parentNode }).select("rect").node().getBBox().width) - (sel.node().getBBox().width)) / 2;
			        			var diffW = ((sel.select(function() { return this.parentNode }).select("rect").node().getBBox().width) / 2);
			        			sel.selectAll("tspan").each(function(t, i) {
			        				sel.attr("y", function(dd) {
			        					return (ky * dd.dy / 2) - sel.node().getBBox().height / 2;
			        				})
			        			})
			        			.attr("x", function(dd) {
			        				if(n.id == firstNodeId) {
			        					return mdiffW;
			        				} else {
			        					return diffW;
			        				}
			        			})
			        			
			        		}
			        	} 
			        });
			    
			    zoomTransition.select(".tmclip")
			        .attr("width", function(d) {
			            return Math.max(0.01, (kx * d.dx));
			        })
			        .attr("height", function(d) {
			            return Math.max(0.01, (ky * d.dy));
			        });
			    
			    zoomTransition.select(".tmparent .tmlabel")
			        .attr("width", function(d) {
			            return Math.max(0.01, (kx * d.dx));
			        })
			        .attr("height", function(d) {
			            return d.children ? headerHeight : Math.max(0.01, (ky * d.dy));
			        })
			        .text(function(d) {
			            return d.name;
			        })
			        ;
			    
			    zoomTransition.select(".tmchild .tmlabel")
			    	.attr("text-anchor", "middle")
			    	.attr('id', function(d, i) {
				    	return d.id;
				    })
				    .text(function(d) {
			            return d.name;
			        })
			        .style("fill", function(d) {
				    	return typeof options.fontColor === "function" ? options.fontColor(d) : options.fontColor;
				    })
			        //.style("display", "none")
			        /*.attr("x", function(d) {
			            return kx * d.dx / 2;
			        })
			        .attr("y", function(d) {
			            return ky * d.dy / 2;
			        })*/
			    
			    zoomTransition.select("rect")
			    	.attr("text-anchor", "middle")
			        .attr("width", function(d) {
			            return Math.max(0.01, (kx * d.dx));
			        })
			        .attr("height", function(d) {
			            return Math.max(0.01, (ky * d.dy));
			        });
			    node = n;
			    
			    setTimeout(function(){
			        chart.selectAll(".tmcell.tmchild")
			        .filter(function(d) {
			            return d.parent === level; 
			        })
			        .select(".tmlabel")
			        .style("display", "none")		        
			        
			        /*zoomTransition.each(function(d) {
			        	console.log(2);
			        	if(d.id) {
			        		d3text.textwrap().container(d3.select("#"+d.id)).align("middle").wrap(true).draw();
			        	}
			        });*/
			    	
			    }, 250);
			    
			    if (d3.event) {
			        d3.event.stopPropagation();
			    }
			    
			}
	
			function GetLightestFromColor(bgColor) {
			    var hsl = d3.hsl(bgColor);
			    hsl.l = 0.965;    
			    return  hsl.toString();
			}
	
			function HideTooltip(){
			    clearTimeout(tmTTTimeout);
			    d3.select(".protooltip")
			        .classed("z-depth-1", false)
			        .classed("tmtip", false)
			        .transition()
			        .duration(500)
			        .style("opacity", 0);   
			}
			
			function ShowTMTooltip(d, IsContainer){
			    var div = d3.select(".protooltip");
			    if (div.empty()) {
			        div = d3.select("body").append("div")
			        .attr("class", "protooltip")
			        .style("position", "absolute")	
				    .style("text-align", "center")	
				    .style("min-width", "60px")				
				    .style("max-width", "240px")					
				    .style("min-height", "26px")					
				    .style("padding", "12px")		
				    .style("font-size", options.tooltip.css["font-size"])
				    .style("color",  options.tooltip.css.color)	
				    .style("border-radius", "6px")			
				    .style("pointer-events", "none")
				    .style("z-index", "10000")
				    ;
			    }
			    div.classed("z-depth-1", true)
			        .classed("tmtip", true)
			        .style("background", options.tooltip.css["background-color"])	
			        .style("border", "0")
			    	.style("color", options.tooltip.css.color)	
			        .style("opacity", 0);
			    
			    div.transition()
			        .duration(400)
			        .style("opacity", .96);

			    div.html(d.tooltip ? d.tooltip + ': ' + d.value: IsContainer ? d.name : d.name + ': ' + d.value)
			        .style("left", (d3.event.pageX + 10) + "px")
			        .style("top", (d3.event.pageY + 20) + "px");
			    
			    tmTTTimeout = setTimeout(HideTooltip, 5000);    
			}
	
			function idealTextColor(bgColor) {
			    return  d3.hsl(bgColor).l > 0.4 ? "#000000" : "#ffffff";
			}

		}
		
	}
	
	var ParallelCoordinates = function(){
		var self = this;
		this.type = "parallel_coordinates";
		
		this.draw = function() {
			
			var options = this.options;
			var margin = options.margin;
			var width = options.width - options.margin.left - options.margin.right;
			var height = options.height - options.margin.bottom - options.margin.top;

			var data = options.data;
			var svg = this.svg.attr("transform", "translate(" + margin.left + "," + (Number(margin.top)) + ")");
			var dimensions = [], dimension_map = d3.map();
			for(var i in data) {
				var d = data[i];
				for(var key in d) {
					if(!dimension_map.has(key)) {
						dimension_map.set(key);
						var opt = {
							name: key,
							scale: d3.scale.ordinal().rangePoints([0, height]), 
							type: String
						};
						dimensions.push(opt);
					}
				}
			}

			var x = d3.scale.ordinal()
			    .domain(dimensions.map(function(d) {
			        return d.name;
			    }))
			    .rangePoints([0, width]);

			var line = d3.svg.line()
			    .defined(function(d) {
			        return !isNaN(d[1]);
			    });

			var yAxis = d3.svg.axis()
			    .orient("left");

			var dimension = svg.selectAll(".dimension")
			    .data(dimensions)
			    .enter().append("g")
			    .attr("class", "dimension")
			    .attr("transform", function(d) {
			        return "translate(" + x(d.name) + ")";
			    });

			//var data = [{"Scale":"a","Areal":"b","Angular":"c","name":"d"},{"Scale":"e","Areal":"f","Angular":"g","name":"h"}];

			dimensions.forEach(function(dimension) {
			    dimension.scale.domain(dimension.type === Number ?
			        d3.extent(data, function(d) {
			            return +d[dimension.name];
			        }) :
			        data.map(function(d) {
			            return d[dimension.name];
			        }).sort());
			});

			svg.append("g")
			    .attr("class", "background")
			    .selectAll("path")
			    .data(data)
			    .enter().append("path")
			    .style("fill", "none")
			    .style("stroke", "none")
			    .style("stroke-width", "20px")
			    .style("pointer-events", "stroke")
			    .attr("d", draw);

			svg.append("g")
			    .attr("class", "foreground")
			    .selectAll("path")
			    .data(data)
			    .enter().append("path")
			    .style("fill", "none")
			    .style("stroke",function(d) {
			    	return "steelblue";
			    })
			    .style("stroke-width", "1.5px")
			    .attr("d", draw);

			dimension.append("g")
			    .attr("class", "axis")
			    .each(function(d) {
			        d3.select(this).call(yAxis.scale(d.scale));
			    })
			    .append("text")
			    .attr("class", "title")
			    .attr("text-anchor", "middle")
			    .attr("y", -9)
			    .style("font-size", this.options.fontSize+"px")
			    .style("font-weight", "bold")
			    .style("text-transform", "uppercase")
			    .text(function(d) {
			        return d.name;
			    });

			svg.selectAll(".axis path")
			.style({
				"fill": "none",
				"stroke": "#000",
				"shape-rendering": "crispEdges"
			});
			svg.selectAll(".axis line")
			.style({
					"fill": "none",
					"stroke": "#000",
					"shape-rendering": "crispEdges"
			});

			// Rebind the axis data to simplify mouseover.
			svg.select(".axis")
			.selectAll("text:not(.title)")
			    .attr("class", "label")
			    .data(data, function(d) {
			        return d.name || d;
			    });

			svg.selectAll(".title").style("font-size", Number(options.fontSize) + 2)
			svg.selectAll(".tick").selectAll("text").style("font-size", options.fontSize);
			
			var projection = svg.selectAll(".axis text,.background path,.foreground path")
			    .on("mouseover", mouseover)
			    .on("mouseout", mouseout);

			function mouseover(d) {
			    svg.classed("active", true);
			    svg.selectAll(".active .label:not(.inactive)").style("font-weight", "bold");
			    projection.classed("inactive", function(p) {
			        return p !== d;
			    });
			    svg.selectAll(".label.inactive").style("fill", "#ccc");
			    svg.selectAll(".foreground path.inactive").style({
			    	"stroke": "#ccc",
			    	"stroke-opacity": ".5",
			    	"stroke-width": "1px"
			    });
			    projection.filter(function(p) {
			        return p === d;
			    }).each(moveToFront);
			}

			function mouseout(d) {
				svg.selectAll(".active .label:not(.inactive)").style("font-weight", "normal");
			    svg.classed("active", false);
			    svg.selectAll(".label.inactive").style("fill", "#000");
			    svg.selectAll(".foreground path.inactive").style({
			    	"stroke": "steelblue",
			    	"stroke-opacity": "1",
			    	"stroke-width": "1.5px"
			    });
			    projection.classed("inactive", false);
			}

			function moveToFront() {
			    this.parentNode.appendChild(this);
			}


			function draw(d) {
			    return line(dimensions.map(function(dimension) {
			        return [x(dimension.name), dimension.scale(d[dimension.name])];
			    }));
			}
			
		}
		
	}
	
	var Bubble = function(){
		var self = this;
		this.type = "bubble";
		
		this.draw = function() {
		    var options = this.options;
		    var margin = options.margin;
		    var width = options.width - options.margin.left - options.margin.right;
		    var height = options.height - options.margin.bottom - options.margin.top;
		    var color = options.color;

		    var data = options.data;

		    var svg = this.svg.attr("transform", "translate(" + margin.left + "," + (Number(margin.top)) + ")");
		    
		    var padding = options.nodePadding ? options.nodePadding : 1.5, // separation between same-color circles
			        clusterPadding = 10; // separation between different-color circles
		    
		   
		    var max = d3.max(data, function(d) {
		        return d.value
		    });
		    var min = d3.min(data, function(d) {
		        return d.value
		    });
		    var initR = max ? max / 1.5 : 0;
		    var categories = d3.nest().key(function(d) {
		            return d.category;
		        })

		        //.rollup(function(v) { return d3.sum(v, function(d) { return d.size; }); })
		        .entries(data);

		    categories = $.grep(categories, function(obj) {
		        return obj.key != 'undefined';
		    });
		    
		    var cmap = d3.map();
		    for (var i in categories) {
		        cmap.set(categories[i].key, Number(i));
		    }




		    var parents = [];
		    for(var i in data) {
		    	var d = data[i];
		    	if(!d.category) {
		    		data[i].value = initR;
		    		data[i].category = "top";
		    		parents.push(d.name);
		    	}
		    }

		    var n = data.length, // total number of circles
			    m = categories.length; // number of distinct clusters  
		    var nodeRange = options.nodeRange ? options.nodeRange : [10, 70];
		    var radiusRange = d3.scale.linear().domain([0, max]).range(nodeRange);
	
			// The largest node for each cluster.
			var clusters = new Array(m);
	
			var nodes = d3.range(n).map(function(index) {
				var dd = data[index];
				var i = Math.floor(Math.random() * m),
			    //r = Math.sqrt((i + 1) / m * -Math.log(Math.random())) * maxRadius,
			     	r = dd.value == 0 ? 40 : radiusRange(dd.value),
			     	cluster = cmap.get(dd.category);
			     var d = {cluster: cluster, radius: r};

				if(dd.category != 'top') {
					d.parent_name = parents;
				}
				d.cnt = dd.value;

				$.extend(d, dd);
				if (!clusters[cluster] || (r > clusters[cluster].radius)) clusters[cluster] = d;
				return d;
			});


		    // Use the pack layout to initialize node positions.
		    d3.layout.pack()
		        .sort(null)
		        .size([width, height])
		        .children(function(d) {
		            return d.values;
		        })
		        .value(function(d) {
		            return d.radius * d.radius;
		        })
		        .nodes({
		            values: d3.nest()
		                .key(function(d) {
		                    return d.category;
		                })
		                .entries(nodes)
		        });

		    var force = d3.layout.force()
		        .nodes(nodes)
		        .size([width, height])
		        .gravity(.02)
		        .charge(0)
		        .on("tick", tick)
		        .start();
		    var g = svg.selectAll("g")
		        .data(nodes)
		        .enter().append("g");

		    if(options.colorRange) {
		    	var max = d3.max(nodes, function(d) {
		    		return d.radius;
		    	});
		    	var range = [];
		    	var divide = max/(options.color.range()).length;
		    	for(var i in options.color.range()) {
		    		range.push((divide * (Number(i) + 1)));
		    	}
		    	var colorRange = d3.scale.linear().domain(range).range(options.color.range());
		    }
		    var node = g.append("circle")
		        .style("fill", function(d) {
		        	var c;
		            if (d.category == "top") {
		                c = "#fff";
		            } else if(options.colorRange) {
		            	c = colorRange(d.radius);
		            } else if (d.color) {
		            	c = d.color;
		            } else {
		            	c = color(d.cluster);
		            }
		            d.color = c;
		            return c;
		        })
		        .style("stroke", function(d) {
		        	if (d.category == "top") {
		                return "#44404b";

		            }
		        })
		        .style("stroke-width", function(d) {
		        	if (d.category == "top") {
		                return "5px";

		            }
		        })
		        .on("click", function(d) {
		        	if(self.options.click) {
						self.click(d);
					}
		        })
		        .call(force.drag)
		        .style("cursor", "pointer");
		    
		    

		    node.transition()
		        .duration(750)
		        .delay(function(d, i) {
		            return i * 5;
		        })
		        .attrTween("r", function(d) {
		            var i = d3.interpolate(0, d.radius);
		            return function(t) {
		                return d.radius = i(t);
		            };
		        });

		    var text = g.append("text")
		        .text(function(d) {
		            return d.name;
		        })
		        .style("text-anchor", "middle")
		        .style("fill", function(d) {
		        	if(d.category == 'top') {
		        		return "#000";
		        	}
		        	var fontColor = typeof options.fontColor === "function" ? options.fontColor(d) : options.fontColor;
		        	return fontColor;
		        })
		        .style("font-family", options.font)
		        //.style("font-size", options.fontSize + "px")
		        .style("font-size", function(d) { 
		        	if ((d.r * 2) <= d3.select(this).node().getComputedTextLength()) {
		                d.fs = Math.min(2 * d.r, (2 * d.r) / this.getComputedTextLength() * options.fontSize); 
		            } else {
		        		d.fs = options.fontSize;
		        	}
		        	return d.fs + "px";
		        })
		        .style("fill-opacity", function(d, i) {
		        	if(d.category == 'top') {
		        		d3.select(this).style("opacity", 1);		        		
		        	} else if ((d.r * 2) <= d3.select(this).node().getComputedTextLength()) {
		                d3.select(this).style("opacity", 0);
		            } else {
		                d3.select(this).style("opacity", 1);
		            }
		        })
		        .style("cursor", "pointer")
		        .on("click", function(d) {
		        	if(self.options.click) {
						self.click(d);
					}
		        })
			    .attr("transform",  function(d) {
			    	//var ty = d.r > 25 ? 5 : 3;
			    	var ty = ( d.radius) / options.fontSize;
			    	if(d.radius < 25) {
			    		ty = ty + 2;
			    	}
			      return "translate(0,"+ty+")"; 
			    })


			if(options.tooltip.enabled) {
				node.append("title").text(function(d) {
					if(d.category == "top") {
						return d.name;
					}
					return d.name + " : " + self.digits(d.cnt) + "건";
				})

				text.append("title").text(function(d) {
					if(d.category == "top") {
						return d.name;
					}
					return d.name + " : " + self.digits(d.cnt) + "건";
				})
			}


		    function tick(e) {
		        node.each(cluster(10 * e.alpha * e.alpha))
		            .each(collide(.5))
		            .attr("cx", function(d) {
		                return d.x = Math.max(d.radius, Math.min(width - d.radius, d.x));;

		            })
		            .attr("cy", function(d) {
		                return d.y = Math.max(d.radius, Math.min(height - d.radius, d.y));

		            });
		        text.each(cluster(10 * e.alpha * e.alpha))
		            .each(collide(.5))
		            .attr("x", function(d) {
		                return d.x = Math.max(d.radius, Math.min(width - d.radius, d.x));

		            })
		            .attr("y", function(d) {
		                d.y = Math.max(d.radius, Math.min(height - d.radius, d.y));
		                return d.y;
		            });
		    }

		    // Move d to be adjacent to the cluster node.
		    function cluster(alpha) {
		        return function(d) {
		            var cluster = clusters[d.cluster];
		            if (cluster === d) return;
		            var x = d.x - cluster.x,
		                y = d.y - cluster.y,
		                l = Math.sqrt(x * x + y * y),
		                r = d.radius + cluster.radius;
		            if (l != r) {
		                l = (l - r) / l * alpha;
		                d.x -= x *= l;
		                d.y -= y *= l;
		                cluster.x += x;
		                cluster.y += y;
		            }
		        };
		    }

		    // Resolves collisions between d and all other circles.
		    function collide(alpha) {
		        var quadtree = d3.geom.quadtree(nodes);
		        return function(d) {
		            var r = d.radius + Math.max(padding, clusterPadding),
		                nx1 = d.x - r,
		                nx2 = d.x + r,
		                ny1 = d.y - r,
		                ny2 = d.y + r;
		            quadtree.visit(function(quad, x1, y1, x2, y2) {
		                if (quad.point && (quad.point !== d)) {
		                    var x = d.x - quad.point.x,
		                        y = d.y - quad.point.y,
		                        l = Math.sqrt(x * x + y * y),
		                        r = d.radius + quad.point.radius + (d.cluster === quad.point.cluster ? padding : clusterPadding);
		                    if (l < r) {
		                        l = (l - r) / l * alpha;
		                        d.x -= x *= l;
		                        d.y -= y *= l;
		                        quad.point.x += x;
		                        quad.point.y += y;
		                    }
		                }
		                return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
		            });
		        };
		    }

		}
		
	}
	
	var Heatmap = function(){
		var self = this;
		this.type = "heatmap";
		
		this.draw = function() {
		    var options = this.options;
		    var margin = options.margin;
		    var width = options.width - options.margin.left - options.margin.right;
		    var height = options.height - options.margin.bottom - options.margin.top;
		    var color = options.color;

		    var data = options.data;

		    var days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'],
				times = d3.range(24);

		    var gridSize = Math.floor(width / times.length);
		    var daysSize = Math.floor(height / days.length);
			//SVG container
			var svg = this.svg.attr("transform", "translate(" + margin.left + "," + (Number(margin.top)) + ")");
			var colorScale = d3.scale.linear()
				.domain([0, d3.max(data, function(d) {return d.count; })/2, d3.max(data, function(d) {return d.count; })])
				.range(["#FFFFDD", "#3E9583", "#1F2D86"]);
				//.interpolate(d3.interpolateHcl);
	
			var dayLabels = svg.selectAll(".dayLabel")
			    .data(days)
			    .enter().append("text")
			    .text(function (d) { return d; })
			    .attr("x", 0)
			    .attr("y", function (d, i) { return i * daysSize; })
			    .style("text-anchor", "end")
		    	.style("font-family", this.options.font)
		    	.style("font-size", this.options.fontSize+"px")
			    .attr("transform", "translate(-6," + daysSize / 1.5 + ")")
			    .attr("class", function (d, i) { return ((i >= 0 && i <= 4) ? "dayLabel mono axis axis-workweek" : "dayLabel mono axis"); });
	
			var timeLabels = svg.selectAll(".timeLabel")
			    .data(times)
			    .enter().append("text")
			    .text(function(d) { return d; })
			    .attr("x", function(d, i) { return i * gridSize; })
			    .attr("y", 0)
		    	.style("font-family", this.options.font)
		    	.style("font-size", this.options.fontSize+"px")
			    .style("text-anchor", "middle")
			    .attr("transform", "translate(" + gridSize / 2 + ", -6)")
			    .attr("class", function(d, i) { return ((i >= 8 && i <= 17) ? "timeLabel mono axis axis-worktime" : "timeLabel mono axis"); });
	
			var heatMap = svg.selectAll(".hour")
			    .data(data)
			    .enter().append("rect")
			    .attr("x", function(d) { return (d.hour - 1) * gridSize; })
			    .attr("y", function(d) { return (d.day - 1) * daysSize; })
			    .attr("class", "hour bordered")
			    .attr("width", gridSize)
			    .attr("height", daysSize)
			    .style("stroke", "white")
			    .style("stroke-opacity", 0.6)
			    .style("fill", function(d) { return colorScale(d.count); });
	
			//Extra scale since the color scale is interpolated
			var countScale = d3.scale.linear()
				.domain([0, d3.max(data, function(d) {return d.count; })])
				.range([0, width])
	
			//Calculate the variables for the temp gradient
			var numStops = 10;
			countRange = countScale.domain();
			countRange[2] = countRange[1] - countRange[0];
			countPoint = [];
			for(var i = 0; i < numStops; i++) {
				countPoint.push(i * countRange[2]/(numStops-1) + countRange[0]);
			}//for i
	
			//Create the gradient
			svg.append("defs")
				.append("linearGradient")
				.attr("id", "legend-traffic")
				.attr("x1", "0%").attr("y1", "0%")
				.attr("x2", "100%").attr("y2", "0%")
				.selectAll("stop") 
				.data(d3.range(numStops))                
				.enter().append("stop") 
				.attr("offset", function(d,i) { 
					return countScale( countPoint[i] )/width;
				})   
				.attr("stop-color", function(d,i) { 
					return colorScale( countPoint[i] ); 
				});
	
			///////////////////////////////////////////////////////////////////////////
			////////////////////////// Draw the legend ////////////////////////////////
			///////////////////////////////////////////////////////////////////////////
	
			var legendWidth = Math.min(width*0.8, 400);
			//Color Legend container
			var legendsvg = svg.append("g")
				.attr("class", "legendWrapper")
				.attr("transform", "translate(" + (width/2) + "," + (daysSize * days.length + 10) + ")");
	
			//Draw the Rectangle
			legendsvg.append("rect")
				.attr("class", "legendRect")
				.attr("x", -legendWidth/2)
				.attr("y", 0)
				//.attr("rx", hexRadius*1.25/2)
				.attr("width", legendWidth)
				.attr("height", 10)
				.style("fill", "url(#legend-traffic)");
				
			//Set scale for x-axis
			var xScale = d3.scale.linear()
				 .range([-legendWidth/2, legendWidth/2])
				 .domain([ 0, d3.max(data, function(d) { return d.count; })] );
	
			//Define x-axis
			var xAxis = d3.svg.axis()
				  .orient("bottom")
				  .ticks(5)
				  //.tickFormat(formatPercent)
				  .scale(xScale);
	
			//Set up X axis
			legendsvg.append("g")
				.attr("class", "axis")
				.attr("transform", "translate(0," + (10) + ")")
				.call(xAxis);
		    
		}
	}
	
	
	d3.selection.prototype.moveToFront = function() { 
	  return this.each(function() { 
			this.parentNode.appendChild(this); 
		});
	
	};
		
	Line.prototype = new Davif();
	Dendrogram.prototype = new Davif();
	Explorer.prototype = new Davif();
	Cloud.prototype = new Davif();
	Pie.prototype = new Davif();
	Bar.prototype = new Davif();
	HorizontalBar.prototype = new Davif();
	NetworkMap.prototype = new Davif();
	Scatter.prototype = new Davif();
	BoxPlot.prototype = new Davif();
	NetworkDiagram.prototype = new Davif();
	ChordDiagram.prototype = new Davif();
	Table.prototype = new Davif();
	RapidTable.prototype = new Davif();
	Stream.prototype = new Davif();
	Donut.prototype = new Davif();
	Radar.prototype = new Davif();
	BubblePie.prototype = new Davif();
	Map.prototype = new Davif();
	TreeMap.prototype = new Davif();
	ParallelCoordinates.prototype = new Davif();
	Bubble.prototype = new Davif();
	Heatmap.prototype = new Davif();
	
	$.fn.visualization = function (option) {
		var defaults = $.fn.visualization.defaults();
		var options = $.extend(true, defaults, option);
		var config = $.fn.visualization.config;
		var $this = $(this);

		var chart;
		switch (options.type) {
		case config.CHART_TYPE_DENDROGRAM:
			chart = new Dendrogram();
			break;
		case config.CHART_TYPE_MULTI_LINE:
		case config.CHART_TYPE_LINE:
			chart = new Line();
			break;
		case config.CHART_TYPE_EXPLORER:
			chart = new Explorer();
			break;
		case config.CHART_TYPE_CLOUD:
			chart = new Cloud();
			break;
		case config.CHART_TYPE_PIE:
			chart = new Pie();
			break;
		case config.CHART_TYPE_BAR:
		case config.CHART_TYPE_STACKED_BAR:
		case config.CHART_TYPE_GROUPED_BAR:
		case config.CHART_TYPE_HORIZONTAL_BAR:
		case config.CHART_TYPE_HORIZONTAL_GROUPED_BAR:
			chart = new Bar();
			break;
		case config.CHART_TYPE_HORIZONTAL_STACKED_BAR:
			chart = new HorizontalBar();
			break;
		case config.CHART_TYPE_NETWORKMAP:
		case config.CHART_TYPE_NETWORKMAP_RANK:
			chart = new NetworkMap();
			break;
		case config.CHART_TYPE_SCATTER:
			chart = new Scatter();
			break;
		case config.CHART_TYPE_BOXPLOT:
			chart = new BoxPlot();
			break;
		case config.CHART_TYPE_NETWORK_DIAGRAM:
			chart = new NetworkDiagram();
			break;
		case config.CHART_TYPE_CHORD_DIAGRAM:
			chart = new ChordDiagram();
			break;
		case config.CHART_TYPE_TABLE:
			chart = new Table();
			break;
		case config.CHART_TYPE_RAPID_TABLE:
			chart = new RapidTable();
			break;
		case config.CHART_TYPE_STREAM:
			chart = new Stream();
			break;
		case config.CHART_TYPE_DONUT:
			chart = new Donut();
			break;
		case config.CHART_TYPE_RADAR:
			chart = new Radar();
			break;
		case config.CHART_TYPE_BUBBLE_PIE:
			chart = new BubblePie();
			break;
		case config.CHART_TYPE_MAP:
			chart = new Map();
			break;
		case config.CHART_TYPE_TREEMAP:
			chart = new TreeMap();
			break;
		case config.CHART_TYPE_PARALLEL_COORDINATES:
			chart = new ParallelCoordinates();
			break;
		case config.CHART_TYPE_BUBBLE:
			chart = new Bubble();
			break;
		case config.CHART_TYPE_HEATMAP:
			chart = new Heatmap();
			break;
		}
		this[0].innerHTML = "";
		chart.init(this, options, config);
		chart.parseCSV();
		chart.parseJSON();
		chart.setColors();
		chart.render();
		if(options.afterCall) {
			chart.afterCall();
		}
	};
	 
	
	$.fn.visualization.defaults = function() {
		var defaults = {
			type : null,
			data : null,
			dataUrl : null,
			dataCsv : null,
			dataCsvUrl : null,
			dataRand : null,
			dataParams : null,
			dataType : null,
			click : null,
			color : null,
			colorKey : 'name',
			
			/**explorer**/
			collapse : {
				httpType : "POST", 
				use : false,
				data: null,
				dataUrl : null,
				dataParams : {},
				parser : null
			},
			linkColor : "#828282",
			linkWidth : null,
			linkClass : '', 
			linkDistance : 15,
			linkCharge : -1000,
			linkIsLabel : null,
			nodePadding : null,
			nodeClass : '', 
			nodeBorderColor : '#ffffff',
			nodeBorderWidth : 2,
			nodeIsLabel : null,
			removeUse : true,
			removeImg : "../images/btn_delete.png",
			zoomRange : null,
			
			parent : {
				fontSize : 14,
				fontColor : null,
				bgColor : null,
				borderColor : null,
				borderWidth : null
			},
			
			
			/** cloud **/
			x : 0,
			y : 0,
			fontRange : [14, 30],
			rotate : 0,
			opacityDomain : null,
			textPadding : null,
			randomUse : null,
			
			/** pie **/
			labels : {
				enabled : null,
				distance : 0,
				over : false,
				gap : 0,
				//line
				inner : true,
				//bubble_pie
				size:null,
				borderWidth : null,
				length : null,
				suffix : '',
			},
			
			node : {
				enabled : true,
				over : true,
				size : null,
				color : null,
			},
			
			/** tooltip **/
			tooltip : {
				enabled : false,
				useHtml : false,
				suffix : '',
				dateFormat : '',
				innerBox : false,
				css : {
					opacity : 0.8,
					width: "auto",
		        	height : "auto",
		        	overflow : "hidden",
		        	position : "absolute",
		        	color: "#fff",
		            margin: 0,
		        	"background-color" : "#0083DD",
		        	"font-family" : "Malgun Gothic",
		        	"font-size" : "12px",
		        	"vertical-align" : "top",
		        	"-webkit-border-radius" : "10px",
		        	"-moz-border-radius" : "10px",
		        	"border-radius" : "10px",
		        	'pointer-events' : 'none',
		        	p : 'font-size:14px; padding-left:10px;',
					ul : 'list-style:none;padding-left:2px;',
					li : 'padding:2px 10px;',
					'davif-icon' : 'padding-right:5px;font-size:10px;',
					'davif-title1' : 'margin-right:30px;',
					'davif-title2' : 'float:right;',
				},
				x : 0,
				y : 0,
				html : null,
				textFunc : null,
				isabsolute : null,
			},
	
			/** stacekd bar **/
			tickSuffix : "",
			tickPoint : 0,
			tickX : null,
			tickY : null,
			tickXtextX : null,
			tickXtextY : null,
			tickYtextX : null,
			tickYtextY : null,
			tickXtextAnchor : "middle",
			tickNagative : false,
			barWidth : 0,
			tickXAlign : "middle",
			tickYAlign : null,
			textRotate : 0,
			textRotateCount : 1, 
			textRotateOptions : {
				tickXtextY : null,
				tickXtextX : null
			},
			/** line **/
			dateFormat : '',
			inputFormat : '%Y.%m.%d',
			maxPointUse : true,
			maxPointAllUse : true,
			
			/** dendrogram **/
			depthLength : null,
			textLength : null, 
			textSuffix : "...", 
			
			/** scatter **/
			ticksX : null,
			ticksY : null,
			nodeColor : null,
			nodeOpacity: .7,
			
			/** boxPlot **/
			borderColor : null,
			borderWidth : 1,
			boxColor : "#fff",
			pointColor : "#fff",
			whiskerDash : 3.3,
			boxWidth : null, 
			
			/** network circle **/
			//linkWidth : null,
			textWrapWidth : 0,
			markerUse : true,
			nodeRange : null,
			
			/** diagram **/
			maxNode : null,
			emptyArea : 3.5,
			nodeInterval : 4,
			categoryInterval : 4,
			nodeSize : 0,
			mouseOverArea : null,
			
			/** table **/
			title : '',
			headerUse : true,
			tableClass : {
				table : "",
				tr : "",
				tr_header : "davif-header-row",
				tr_row : "davif-row",
				td : "davif-cell",
				th : "davif-header",
				
				//rapid table
				div : '',
				h2 : '',
				ol : '',
				ul : '',
				li : '',
				up : '',
				down : '',
				keep : '',
				'new' : '',
				rank : '',
				keyword : '',
				gap : ''
			},
			defaultCss : true,
			imgPath : '', 
			headerWidth : null,
			
			/** pane **/
			ticks : null,
			gridUse : true,
			gridXUse : true,
			gridYUse : true,
			gridXcolor: "#c4c4c4",
			gridYcolor: "#c4c4c4",
			gridYbaseColor : null,
			/** donut **/
			outerRadius : 0,
			innerRadius : 0,
			linkOpacity : 0,
			
			/** radar **/
			gridColor : null,
			//nodeSize
			//textLength : null, 
			//textSuffix : "...", 
			lineType : null,
			addSize : null,
			
			/** map **/
			zoom : null,
			zoomUse : false,
			treeZoomUse : true,
			latLng : null,
			mapType : null, /** ROADMAP, SATELLITE, HYBRID, TERRAIN **/
			padding : null,
			center : null,
			cloudWidth : null,
			cloudHeight : null,
			zoomWidth : null,
			zoomHeight : null,
			zoomChg : null,
			mapChartType : null,
			mapChartOption : null,
			mapChartData : null,
			areaUse : false,
			where : null,
			style : null,
			
			/** treemap **/
			headerHeight : null,
			childFontColor : "#fff",
			
			/** style **/
			margin : {
				top : 0,
				right : 0,
				bottom : 0,
				left : 0
			},
			font : "Malgun Gothic",
			backgroundColor : null,
			fontColor : null,
			fontSize : 12,
			fontX : null,
			fontY : null,
			fontAlign : "end",
			fontWrapDistance : 1,
			letterSpacing : 0,
			strokeWidth : null,
			width : null,
			height : null,
			
			xPointLine : null,
			axisStrokeColor : "#adacac",
			scaleXPadding : 0,
			textAreaStyle : null,
			countAreaStyle : null,
			countSuffixAreaStyle : null,
			countPoint : 0,
			countSuffix : "",
			countAreaY : 0,
			textAreaY : 0,
			countSuffixAreaY : 0,
			firstDataShow : true,
			focusRectX : null,
			tickSkip : 1,
			tickYSkip : 1,
		};
		return defaults;
	};
	
	$.fn.visualization.config = {
		MEDIA_TYPE_ALL_NAME : "전체",
		MEDIA_TYPE_TWITTER_NAME : "트위터",
		MEDIA_TYPE_FACEBOOK_NAME : "페이스북",
		MEDIA_TYPE_BLOG_NAME : "블로그",
		MEDIA_TYPE_NEWS_NAME : "뉴스",
		MEDIA_TYPE_COMMUNITY_NAME : "커뮤니티",
		
		MEDIA_TYPE_ALL : "all",
		MEDIA_TYPE_TWITTER : "twitter",
		MEDIA_TYPE_FACEBOOK : "facebook",
		MEDIA_TYPE_BLOG : "blog",
		MEDIA_TYPE_NEWS : "news",
		MEDIA_TYPE_COMMUNITY : "community",
		
		SENTIMENT_TYPE_ALL: "all",
		SENTIMENT_TYPE_POSITIVE: "positive",
		SENTIMENT_TYPE_NEUTRAL: "neutral",
		SENTIMENT_TYPE_NEUTRALITY: "neutrality",
		SENTIMENT_TYPE_NEGATIVE: "negative",
		SENTIMENT_TYPE_OBJECTIVE: "objective",
		SENTIMENT_TYPE_OBJECT: "object",
		
		SENTIMENT_TYPE_ALL_NAME : "전체",
		SENTIMENT_TYPE_POSITIVE_NAME : "긍정",
		SENTIMENT_TYPE_NEUTRAL_NAME : "중립",
		SENTIMENT_TYPE_NEGATIVE_NAME : "부정",
		SENTIMENT_TYPE_OBJECT_NAME : "객관",
		
		TYPE_ALL: "all",
		TYPE_ALL_NAME : "전체",
		
		CHART_TYPE_LINE : "line",
		CHART_TYPE_MULTI_LINE : "multiline",
		CHART_TYPE_PIE : "pie",
		
		CHART_TYPE_BAR : "bar",
		CHART_TYPE_STACKED_BAR : "stackedbar",
		CHART_TYPE_GROUPED_BAR : "groupedbar",
		CHART_TYPE_HORIZONTAL_BAR : "horizontal_bar",
		CHART_TYPE_HORIZONTAL_STACKED_BAR : "horizontal_stackedbar",
		CHART_TYPE_HORIZONTAL_GROUPED_BAR : "horizontal_groupedbar",
		
		CHART_TYPE_CLOUD : "cloud",
		CHART_TYPE_EXPLORER : "explorer",
		CHART_TYPE_DENDROGRAM : "dendrogram",
		CHART_TYPE_NETWORKMAP : "networkmap",
		CHART_TYPE_NETWORKMAP_RANK : "networkmap_rank",
		CHART_TYPE_NETWORK_DIAGRAM : "network_diagram",
		CHART_TYPE_CHORD_DIAGRAM : "chord_diagram",
		CHART_TYPE_SCATTER : "scatter",
		CHART_TYPE_BOXPLOT : "boxplot",
		CHART_TYPE_TABLE : "table",
		CHART_TYPE_RAPID_TABLE : "rapid_table",
		CHART_TYPE_STREAM : "stream",
		CHART_TYPE_DONUT : "donut",
		CHART_TYPE_RADAR : "radar",
		CHART_TYPE_BUBBLE_PIE : "bubble_pie",
		CHART_TYPE_MAP : "map",
		CHART_TYPE_TREEMAP : "treemap",
		CHART_TYPE_PARALLEL_COORDINATES : "parallel_coordinates",
		CHART_TYPE_BUBBLE : "bubble",
		CHART_TYPE_HEATMAP : "heatmap",
		
		DATA_TYPE_JSON : "json",
		DATA_TYPE_CSV : "csv",
		DATA_TYPE_RAND : "random"
	};

	$.fn.visualization.Constructor = Davif;

})();












































