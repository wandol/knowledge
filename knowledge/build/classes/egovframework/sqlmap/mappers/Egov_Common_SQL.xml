<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- <!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" 
	"http://ibatis.apache.org/dtd/sql-map-2.dtd"> -->

<mapper namespace="CommonMapper">

	<!-- 조건에 맞는 발전사 정보를 불러온다 -->
	<select id="selectPowerCompList" parameterType="hashmap"
		resultType="hashmap">
		SELECT POWER_COMP_NM
		FROM tb_power_st_info
		<if test='cate.equals("GT") or cate.equals("ST")'>
			WHERE (TYPE_NM = #{cate} OR TYPE_NM IS NULL)
		</if>
		GROUP BY POWER_COMP_NM
		ORDER BY POWER_COMP_NM ASC
	</select>

	<!-- 조건에 맞는 사업소 정보를 불러온다 -->
	<select id="selectPowerStList" parameterType="hashmap"
		resultType="hashmap">
		SELECT POWER_ST_NM
		FROM tb_power_st_info
		<where>
			<if test='powerCompName != ""'>
			POWER_COMP_NM = #{powerCompName}
			</if>				
		</where>
		<if test='cate.equals("GT") or cate.equals("ST")'>
			AND (TYPE_NM = #{cate} OR TYPE_NM IS NULL)
		</if>
		GROUP BY POWER_ST_NM
		ORDER BY POWER_ST_NM ASC
	</select>

	<!-- 조건에 맞는 호기 정보를 불러온다 -->
	<select id="selectStNoList" parameterType="hashmap"
		resultType="hashmap">
		SELECT ST_NO
		FROM tb_power_st_info
		WHERE POWER_COMP_NM = #{powerCompName}
		AND POWER_ST_NM = #{powerStName}
		<if test='cate.equals("GT") or cate.equals("ST")'>
			AND (TYPE_NM = #{cate} OR TYPE_NM IS NULL)
		</if>
		GROUP BY ST_NO
		ORDER BY ST_NO ASC
	</select>

	<!-- 자동분류 필드 업데이트 -->
	<update id="updateClassfication" parameterType="hashmap">
		UPDATE
		tb_report_info
		SET AUTO_CLASSFICATION = #{classfication}
		WHERE MD5_FILENM_SIZE = #{idx}
	</update>

	<!-- 클릭, 다운로드 수 Ranking 관련 -->
	<insert id="insertClickNDownHistory"
		parameterType="ClickNDownVO">
		INSERT
		INTO tb_click_down_history (
		REPO_KEY,
		REPO_FILE_NM,
		CATEGORY,
		GUBUN,
		USER_ID,
		REG_DT
		)
		VALUES (
		#{repo_key},
		#{repo_file_nm},
		#{category},
		#{gubun},
		#{user_id},
		now()
		)
	</insert>

	<!-- 클릭, 다운로드 history DB select -->
	<select id="selectClickNDownloadRanking" parameterType="String"
		resultType="ClickNDownVO">
		SELECT REPO_FILE_NM,
		REPO_KEY,
		CATEGORY,
		COUNT(*) AS COUNT
		FROM tb_click_down_history
		<where>
			<if test='_parameter !=null and _parameter != ""'>
				AND GUBUN=#{_parameter}
			</if>
		</where>
		GROUP BY REPO_FILE_NM
		ORDER BY COUNT DESC
		LIMIT 10
	</select>

	<!-- 최근 지식 DB select -->
	<select id="selectRecentHistoryByUser" parameterType="Integer"
		resultType="RecentVO">
		SELECT IDX,
		REPO_KEY,
		REPO_FILE_NM,
		USER_ID,
		CATEGORY,
		REG_DT,
		UDT_DT
		FROM tb_recent_knowledge_history
		WHERE USER_ID = #{user_id}
		GROUP BY REPO_FILE_NM, CATEGORY
		ORDER BY UDT_DT DESC
		LIMIT 10
	</select>

	<select id="selectRecentReportTop10" resultType="hashmap">
		SELECT
		REPORT_NM,
		MD5_FILENM_SIZE,
		DATE_FORMAT(REG_DT, '%Y-%m-%d %h:%i:%s') AS REG_DT,
		(
		CASE CATE
		WHEN 'turbin' THEN CONCAT(IF(REPO_KIND = "가스터빈", '가스터빈', '증기터빈'), '_',
		REPO_KIND2)
		WHEN 'gen' THEN CONCAT('발전기', '_', REPO_KIND)
		WHEN 'perform' THEN '성능'
		ELSE CONCAT('보일러', '_', REPO_KIND)
		END
		) AS CATE_NM,
		CATE,
		REPO_KIND,
		REPO_KIND2
		FROM tb_report_info
		ORDER BY REG_DT DESC
		LIMIT 10
	</select>

	<select id="selectRecentReportList" parameterType="hashmap"
		resultType="hashmap">
		SELECT REPORT_NM,
		MD5_FILENM_SIZE,
		DATE_FORMAT(REG_DT, '%Y-%m-%d %h:%i:%s') AS REG_DT,
		(
		CASE CATE
		WHEN 'turbin' THEN CONCAT(IF(REPO_KIND = "가스터빈", '가스터빈', '증기터빈'), '_',
		REPO_KIND2)
		WHEN 'gen' THEN CONCAT('발전기', '_', REPO_KIND)
		WHEN 'perform' THEN '성능'
		ELSE CONCAT('보일러', '_', REPO_KIND)
		END
		) AS CATE_NM,
		CATE,
		REPO_KIND,
		REPO_KIND2
		FROM tb_report_info
		ORDER BY REG_DT DESC
		<if test="iDisplayStart != null and iDisplayLength != null">
			LIMIT ${iDisplayStart} , ${iDisplayLength}
		</if>
	</select>

	<select id="selectRecentReportTotal" parameterType="hashmap"
		resultType="Integer">
		SELECT COUNT(*) AS COUNT
		FROM tb_report_info
	</select>


	<!-- Dashboard -->
	<!-- 클릭 & 다운로드 통계 -->
	<select id="selectClickNDownStatistics" resultType="hashmap">
		SELECT GUBUN,
		DATE_FORMAT(REG_DT, '%Y-%m-%d') AS REG_DT,
		COUNT(*) AS COUNT
		FROM tb_click_down_history
		GROUP BY GUBUN, DATE_FORMAT(REG_DT, '%Y-%m-%d')
		ORDER BY REG_DT
	</select>

	<!-- 성능 -->
	<select id="selectPerformDataGroupBy" parameterType="hashmap"
		resultType="hashmap">
		SELECT COUNT(*) as COUNT,
		<choose>
			<when test='menu == "powerSt"'>
				d.POWER_ST_NM
			</when>
			<when test='menu == "stNo"'>
				d.ST_NO
			</when>
			<when test='menu == "partName"'>
				d.TEST_ITEM AS PARTNAME
			</when>
			<otherwise>
				d.POWER_COMP_NM
			</otherwise>
		</choose>
		FROM (
		SELECT
		c.POWER_COMP_NM,c.POWER_ST_NM,c.ST_NO,
		TEST_ITEM
		FROM tb_perform_chk_list2 a
		inner join tb_perform_repo_info b on a.PERFORM_REPO_IDX=b.PERFORM_REPO_IDX
		inner join tb_power_st_info c on b.POWER_ST_IDX=c.IDX
		GROUP BY TEST_ITEM
		ORDER BY ITEM_ORDER,PERIOD_ORDER
		) d
		<where>
			<if test='menu == "powerSt"'>
				AND d.POWER_COMP_NM = #{powerCompName}
			</if>
			<if test='menu == "stNo"'>
				AND d.POWER_COMP_NM = #{powerCompName} AND d.POWER_ST_NM =
				#{powerStName}
			</if>
			<if test='menu == "partName"'>
				AND d.POWER_COMP_NM = #{powerCompName} AND d.POWER_ST_NM =
				#{powerStName} AND d.ST_NO = #{stNo}
			</if>
		</where>
		<choose>
			<when test='menu == "powerSt"'>
				GROUP BY d.POWER_ST_NM
			</when>
			<when test='menu == "stNo"'>
				GROUP BY d.ST_NO
			</when>
			<when test='menu == "partName"'>
				GROUP BY d.TEST_ITEM
			</when>
			<otherwise>
				GROUP BY d.POWER_COMP_NM
			</otherwise>
		</choose>
	</select>

	<!-- Img Merge Logic -->
	<select id="selectMergeImgCheck" parameterType="hashmap"
		resultType="hashmap">
		SELECT MERGE_IMG
		,MERGE_TXT
		FROM tb_merge_image
		WHERE MD5_KEY = #{md5_key}
		AND GUBUN_NO = #{gubun_no}
	</select>

	<insert id="insertMergeImg" parameterType="hashmap">
		INSERT
		INTO tb_merge_image
		(
		MD5_KEY,
		GUBUN_NO,
		CATE,
		MERGE_IMG,
		MERGE_TXT
		)
		VALUES
		(
		#{md5_key},
		#{gubun_no},
		#{cate},
		#{merge_img},
		#{merge_txt}
		)
	</insert>

	<update id="updateMergeImg" parameterType="hashmap">
		UPDATE tb_merge_image
		SET MERGE_IMG = #{merge_img},
		MERGE_TXT = #{merge_txt}
		WHERE MD5_KEY = #{md5_key}
		AND GUBUN_NO = #{gubun_no}
		AND CATE = #{cate}
	</update>

	<!-- START : MD% Update -->
	<!--MD5 부여 안된 목록 가져오기 -->
	<select id="selectReportInfo" resultType="hashmap">
		SELECT *
		FROM tb_report_info
		WHERE MD5_FILENM_SIZE IS NULL
	</select>

	<!-- MD5 업데이트 -->
	<update id="updateReportMD5" parameterType="uploadVO">
		UPDATE tb_report_info
		SET MD5_FILENM_SIZE = #{md5FileNmAndSize}
		WHERE REPO_IDX = #{uploadIdx}
	</update>
	<!-- END : MD5 Update -->
</mapper>
